["^ ","~:output",["^ ","~:js","goog.provide('personal_website.content.writings.blog_posts.the_mathematics_of_automatic_differentiation');\npersonal_website.content.writings.blog_posts.the_mathematics_of_automatic_differentiation.post_preview = \"Automatic differentiation is the numerical computing technique\\n   that gave us the backpropogation algorithm, which is\\n   how neural nets learn. In this post, we will explore\\n   the mathematics behind it \\u2013 both in the context of neural nets\\n   and more broadly.\";\npersonal_website.content.writings.blog_posts.the_mathematics_of_automatic_differentiation.post_content = new cljs.core.PersistentVector(null, 24, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"div\",\"div\",1057191632),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"Backpropogation is the cornerstone of the differentiable\\n        programming paradigm \\u2014 the idea that we can allow programs to optimize\\n        their behavior against certain metrics by  differentiating over and updating sets\\n        of learnable functions. In fact, it is the very algorithm that allows neural\\n        nets to learn! Less talked about is automatic differentiation, the numerical computing technique\\n        that makes it possible, and one of the key reasons\\n        neural nets are able to transcend theory and work in real life.\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"Both, however, are essential to a thorough understanding of\\n        how and why neural nets are even possible in the first place.\\n        In this post, we'll go through the mathematics underpinning both\\n        of them, which is a journey far less restricted to the realm\\n        of a calculus than you may expect (no spoilers!).\\n        That said, there is no escaping the calculus, so if you feel it's\\n        worth taking a few moments\\n        to review how exactly we take the deriavatives of multivariate functions, continue on.\\n        Otherwise, skip here.\\n        \"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"h1\",\"h1\",-1896887462),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),\"post-section-header\"], null),\"Learning To Differentiate\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"Derivatives of single-variable functions are\\n        measurements of how infinitesimal variations to a function's\\n        input-space correspond to variations in the output-space. And the same\\n        is true of multivariable functions,\\n        except now we have many more ways in which\\n        we can vary our input-space.\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"To start though, let\\u2019s consider the case of a\\n        function of two variables. Such a function can be pictured as a surface\\n        above the Cartesian plane, where the height of a point\\n        on that surface is calculated using the function\\n        \\\\(f(x,y)\\\\) in question. With this in mind, the geometrical\\n        interpretation of the derivative is how the elevation of\\n        this surface changes given a small step in some direction.\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"figure\",\"figure\",-561394079),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),\"img-container\"], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"div\",\"div\",1057191632),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"text-align\",\"text-align\",1786091845),\"center\"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"img\",\"img\",1442687358),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"src\",\"src\",-1651076051),\"/multi-fn-2.png\",new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"width\",\"width\",-384071477),\"45%\"], null)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"img\",\"img\",1442687358),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"src\",\"src\",-1651076051),\"/multi-fn-4.png\",new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"width\",\"width\",-384071477),\"45%\"], null)], null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"figcaption\",\"figcaption\",-1790122047),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),\"post-caption\",new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"text-align\",\"text-align\",1786091845),\"left\"], null)], null),\"Fig. 2. Examples of surfaces that can be generated\\n     by a function of two variables (Source: \",personal_website.utils.link(\"CalcPlot3D\",\"https://www.monroecc.edu/faculty/paulseeburger/calcnsf/CalcPlot3D/\"),\").\"], null)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"An important thing to notice here is that this step could be in any direction:\\n        vertical, horizontal, or some combination of the two (diagonal). For simplicity\\n        though, we'll resitrict ourselves to the first two cases\\u00A0\\u2013 those in which we take\\n        steps in purely the \\\\(x\\\\) and \\\\(y\\\\) directions \\u2013 for right now.\\n        So how would we calculate the derivative of the function \\\\(f(x,y) = x^2 + y^2\\\\)\\n        with respect to \\\\(x\\\\) then?\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"Imagine standing at some point on this function's surface, and walking\\n        horizontally in both directions. If we walk such that a spool of\\n        yarn unrolls behind  us, the shape this yarn takes will\\n        resemble the graph of a single-variate function.\\n        More specifically, it will look like\\n          \\\\(f(x) = x^2 + C\\\\) (a parabola) where \\\\(C\\\\) is some constant, namely\\n        whatever the \\\\(y\\\\)-value of our original point was.\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"It might not be immediately obvious, but by walking horizontally\\n        across our surface we only varied our \\\\(x\\\\)-coordinate, while\\n        our \\\\(y\\\\)-coordinate remained constant.\\n        Thus, when walking in this way,\\n        the surface can be described\\n        by a special case of the original function where\\n        \\\\(y\\\\) is a constant.\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"Similarly, a walk\\n           in a purely vertical direction is described\\n           when \\\\(x\\\\) is a constant. More generally, we would find that\\n           all multivariate functions\\n           behave in this way when being sliced\\n           (or walked upon) purely in the direction of one their variables, such\\n           that all others become constants.\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"figure\",\"figure\",-561394079),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),\"img-container\"], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"div\",\"div\",1057191632),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"text-align\",\"text-align\",1786091845),\"center\"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"img\",\"img\",1442687358),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"src\",\"src\",-1651076051),\"/parabaloid-1.png\",new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"width\",\"width\",-384071477),\"50%\"], null)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"img\",\"img\",1442687358),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"src\",\"src\",-1651076051),\"/parabaloid-2.png\",new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"width\",\"width\",-384071477),\"50%\"], null)], null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"figcaption\",\"figcaption\",-1790122047),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),\"post-caption\",new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"text-align\",\"text-align\",1786091845),\"left\"], null)], null),\"Fig. 3. The graph the function \\\\(f(x,y) = x^2 + y^2\\\\), known as a parabaloid.\\n    Slicing it across the \\\\(x\\\\)-axis reveals that \\\\(x\\\\)-wise\\n    cross-sections are parabolas. In fact, this property defines the surface! (Source: \",personal_website.utils.link(\"GeoGebra3D\",\"https://www.geogebra.org/3d?lang=en\"),\").\"], null)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"In that vein of thought, we might conjecture that when computing\\n        the derivative of our function \\\\(f(x,y) = x^2 + y^2\\\\) with\\n        respect to \\\\(x\\\\), we can imagine we are taking the\\n        derivative of \\\\(f(x) = x^2 + C\\\\), as this is what\\n        the surface looks like when moving in the \\\\(x\\\\) direction.\\n        Then the deriavative with respect to \\\\(x\\\\)\\n        (what we call its partial derivative)\\n        would be \\\\(2x\\\\). That is to say\\n        \\\\(\\\\frac{\\\\partial{f}}{\\\\partial{x}}\\\\ = 2x\\\\)\\n        (as would \\\\(\\\\frac{\\\\partial{f}}{\\\\partial{y}}\\\\)).\"], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"And it turns out that this thought is in fact correct!\",personal_website.utils.make_footnote(\"1\",\"first-footnote-a\",\"first-footnote-b\"),\" But how do we generalize this idea when taking steps across our surface that aren't\\n          purely horizontal or vertical in nature? For instance,\\n          what is the derivative associated with some step in the\\n        direction of the vector \\\\(\\\\langle 1, 1 \\\\rangle \\\\)?\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"\\n        Well, a step in this direction is equivelant to one step\\n        in both the \\\\(x\\\\) direction and \\\\(y\\\\) direction.\\n        And since we know how our function changes for both a pure step in the\\n        \\\\(x\\\\) direction (\\\\(\\\\frac{\\\\partial{f}}{\\\\partial{x}}\\\\)) and \\\\(y\\\\)\\n        direction (\\\\(\\\\frac{\\\\partial{f}}{\\\\partial{y}}\\\\)), the derivative\\n        in this direction is just a sum of the two: \\\\(\\\\frac{\\\\partial{f}}{\\\\partial{x}} + \\\\frac{\\\\partial{f}}{\\\\partial{y}}\\\\ =\\n        2x + 2y\\\\).\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"More generally, given any multivariate function of \\\\(n\\\\) variables,\\n       we can express a derivative with respect to some vector \\u2013 what we\\n       call a directional derivative \\u2013 as the linear combination of that function's partial derivatives\\n       and the components of that vector. Said another way, given the vectors:\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"$$ \\\\boldsymbol{\\\\vec{\\\\alpha}} = \\\\begin{bmatrix}\\n          a_{1} \\\\\\\\\\n          a_{2} \\\\\\\\\\n          \\\\vdots \\\\\\\\\\n          a_{n} \\\\\\\\\\n          \\\\end{bmatrix}\\n          \\\\hspace{1cm}\\n          \\\\boldsymbol{\\\\vec{\\\\beta}} =\\n          \\\\begin{bmatrix}\\n          \\\\frac{\\\\partial{f}}{\\\\partial{x_1}} \\\\\\\\\\n          \\\\frac{\\\\partial{f}}{\\\\partial{x_2}} \\\\\\\\\\n          \\\\vdots \\\\\\\\\\n          \\\\frac{\\\\partial{f}}{\\\\partial{x_n}} \\\\\\\\\\n          \\\\end{bmatrix}\\n        $$\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"margin-bottom\",\"margin-bottom\",388334941),\"25px\"], null)], null),\"Then the derivative of \\\\(f(x_1, x_2, \\\\ldots, x_n)\\\\) with respect to \\\\(\\\\boldsymbol{\\\\vec{\\\\alpha}}\\\\) is \\\\(\\\\boldsymbol{\\\\vec{\\\\alpha}} \\\\cdot \\\\boldsymbol{\\\\vec{\\\\beta}}\\\\).\\n        Just as before, the given vector can be decomposed as the sum of steps in the direction\\n        of a single variable (\\\\(a_1\\\\hat{\\\\imath} + a_2\\\\hspace{0.08cm}\\\\skew{2}{\\\\hat}{\\\\jmath} + \\\\ldots\\\\)),\\n        and as a function's partials represent the effects of such steps,\\n        the derivative in this direction is just their sum,\\n        one for each step taken in the direction they represent (\\\\(a_1 \\\\frac{\\\\partial{f}}{\\\\partial{x_1}} + a_2 \\\\frac{\\\\partial{f}}{\\\\partial{x_2}} + \\\\ldots \\\\)).\"], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"figure\",\"figure\",-561394079),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),\"img-container\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"img\",\"img\",1442687358),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"src\",\"src\",-1651076051),\"/parabaloid-5.png\",new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"width\",\"width\",-384071477),\"50%\"], null)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"img\",\"img\",1442687358),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"src\",\"src\",-1651076051),\"/parabaloid-6.png\",new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"width\",\"width\",-384071477),\"50%\"], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"figcaption\",\"figcaption\",-1790122047),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),\"post-caption\"], null),\"Fig. 4. The slice of the parabaloid in the direction\\n   \\\\(\\\\langle 1, 1 \\\\rangle\\\\) is also a parabola, albeit a\\n   steeper one. It's generating function is \\\\(2n^2\\\\) for every \\\\(n\\\\) steps along this vector (see\\n   right image where an \\\\(n = 1\\\\) returns \\\\(2\\\\)).\"], null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"While this isn't rigorous\",\" (how can you take multiple infinitesimal steps?),\",personal_website.utils.make_footnote(\"2\",\"second-footnote-a\",\"second-footnote-b\"),\"\\n        it suits our immediate purposes, as we can now calculate both partial\\n        and directional derivatives. A natural question then, is what derivative is the greatest?\\n        In what direction does a function increase most rapidly?\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"In other words, what vector, when dotted with the vector containing\\n        the partials of our function, yields the largest possible\\n        value? Well, the largest dot product a vector can have (when only\\n        considering vectors of the same magnitude) is with\\n        itself, so the direction of steepest ascent must be represented by the thing\\n        we're dotting against \\u2013\\u00A0the vector containing the partials of our function! \"], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"Intuitively, this makes sense too, as how much this vector points in a given\\n        direction is equivelant to the derivative in that direction, such that it points\\n        more in steeper directions and less in shallow ones, thus becoming the steepest direction itself.\",personal_website.utils.make_footnote(\"3\",\"third-footnote-a\",\"third-footnote-b\"),\"\\n        It is yielded by the \\\\(\\\\nabla\\\\) \\u2013 or gradient \\u2013 operation:\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),\"$$\\\\nabla f(x_1, x_2, \\\\ldots, x_n) =\\n          \\\\begin{bmatrix}\\n          \\\\frac{\\\\partial{f}}{\\\\partial{x_1}} \\\\\\\\\\n          \\\\frac{\\\\partial{f}}{\\\\partial{x_2}} \\\\\\\\\\n          \\\\vdots \\\\\\\\\\n          \\\\frac{\\\\partial{f}}{\\\\partial{x_n}} \\\\\\\\\\n          \\\\end{bmatrix}$$\"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"h1\",\"h1\",-1896887462),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),\"post-section-header\"], null),\"Gradient Descent\"], null)], null);\npersonal_website.content.writings.blog_posts.the_mathematics_of_automatic_differentiation.media_query_1 = (function personal_website$content$writings$blog_posts$the_mathematics_of_automatic_differentiation$media_query_1(){\nreturn garden.stylesheet.at_media.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"max-width\",\"max-width\",-1939924051),\"600px\"], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.PersistentVector.EMPTY], 0));\n});\npersonal_website.content.writings.blog_posts.the_mathematics_of_automatic_differentiation.post = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.Keyword(null,\"overarching\",\"overarching\",696949346),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),new cljs.core.Keyword(null,\"content\",\"content\",15833224),new cljs.core.Keyword(null,\"css\",\"css\",1135045163),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"title\",\"title\",636505583),new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"show\",\"show\",-576705889)],[new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"mathematics\",\"deep learning\"], null),\"writing\",\"2020/10/29\",personal_website.content.writings.blog_posts.the_mathematics_of_automatic_differentiation.post_content,personal_website.content.writings.blog_posts.the_mathematics_of_automatic_differentiation.media_query_1(),\"blog-post\",\"The Mathematics Of Automatic Differentiation\",\"1\",personal_website.content.writings.blog_posts.the_mathematics_of_automatic_differentiation.post_preview]);\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","personal_website/content/writings/blog_posts/the_mathematics_of_automatic_differentiation.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",94],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$personal-website.content.writings.blog-posts.the-mathematics-of-automatic-differentiation","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$personal-website.utils","^Q","~$utils","^Q","~$garden.stylesheet","^S","~$cljs.core","^T","~$goog","^U"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$at-media","^S"],"~:require-macros",["^ ","^T","^T"],"~:form",["~#list",["~$ns","^L",["^10",["^W",["^Q","~:as","^R"],["^S","~:refer",["^Y"]]]]]],"~:flags",["^ ","^W",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^U","^T","^Q","^S"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","personal_website/content/writings/blog_posts/the_mathematics_of_automatic_differentiation.cljs"],"~:compiled-at",1607628959622,"~:resource-name","personal_website/content/writings/blog_posts/the_mathematics_of_automatic_differentiation.cljs","~:warnings",[],"~:source","(ns personal-website.content.writings.blog-posts.the-mathematics-of-automatic-differentiation\n  (:require [personal-website.utils :as utils]\n            [garden.stylesheet :refer [at-media]]))\n\n(def post-preview\n  \"Automatic differentiation is the numerical computing technique\n   that gave us the backpropogation algorithm, which is\n   how neural nets learn. In this post, we will explore\n   the mathematics behind it – both in the context of neural nets\n   and more broadly.\")\n\n(def post-content\n  [:div ;{:style {:text-indent \"25px\"}}\n   [:p \"Backpropogation is the cornerstone of the differentiable\n        programming paradigm — the idea that we can allow programs to optimize\n        their behavior against certain metrics by  differentiating over and updating sets\n        of learnable functions. In fact, it is the very algorithm that allows neural\n        nets to learn! Less talked about is automatic differentiation, the numerical computing technique\n        that makes it possible, and one of the key reasons\n        neural nets are able to transcend theory and work in real life.\"]\n\n   [:p \"Both, however, are essential to a thorough understanding of\n        how and why neural nets are even possible in the first place.\n        In this post, we'll go through the mathematics underpinning both\n        of them, which is a journey far less restricted to the realm\n        of a calculus than you may expect (no spoilers!).\n        That said, there is no escaping the calculus, so if you feel it's\n        worth taking a few moments\n        to review how exactly we take the deriavatives of multivariate functions, continue on.\n        Otherwise, skip here.\n        \"]\n\n   ;[:p \"With that in mind, let’s start very simple. Neural nets are just\n    ;    hierarchies of “layers”  – vertical stacks of interconnected units known as\n    ;    neurons. Each neuron is associated with some learnable weight vector which\n    ;    computes a dot product with the vector of incoming values, adjusts it by some\n    ;    (also learnable) scalar, and pumps it through a non-linearity, such that\n    ;    optimizing these learnable parameters can result in very complex – and\n    ;    seemingly intelligent – behavior. \"]\n\n\n    ;[:figure {:class \"img-container\"}\n    ;  [:div {:style {:text-align \"center\"}}\n    ;    [:img {:src \"/auto_diff_nn_pic.svg\"  :style {:width \"65%\"}}]]\n    ;  [:figcaption {:class \"post-caption\"}\n    ;    \"Fig. 1. An example of a simple neural network. An almost laughably basic building block –\n    ;    learnable transformations of information – allows them to approximate all kinds of complex functions.\"]]\n\n\n    ;[:p \"This is known - it is neural networks in their simplest, most\n    ;    straightforward form. But treating their optimization as a block box makes\n    ;    things seem deceptively easy, when in fact these optimization algorithms\n    ;    (along with the hardware they’re  running on) are the sole differentiator\n    ;    between neural nets being only of theoretical interest versus practical utility,\n    ;    and automatic differentiation underpins every single one of them. So how does it actually work?\"]\n\n   [:h1 {:class \"post-section-header\"} \"Learning To Differentiate\"]\n\n   [:p \"Derivatives of single-variable functions are\n        measurements of how infinitesimal variations to a function's\n        input-space correspond to variations in the output-space. And the same\n        is true of multivariable functions,\n        except now we have many more ways in which\n        we can vary our input-space.\"]\n\n   [:p \"To start though, let’s consider the case of a\n        function of two variables. Such a function can be pictured as a surface\n        above the Cartesian plane, where the height of a point\n        on that surface is calculated using the function\n        \\\\(f(x,y)\\\\) in question. With this in mind, the geometrical\n        interpretation of the derivative is how the elevation of\n        this surface changes given a small step in some direction.\"]\n\n  [:figure {:class \"img-container\"}\n   [:div {:style {:text-align \"center\"}}\n    [:img {:src \"/multi-fn-2.png\" :style {:width \"45%\"}}]\n    [:img {:src \"/multi-fn-4.png\" :style {:width \"45%\"}}]\n     [:figcaption {:class \"post-caption\" :style {:text-align \"left\"}}\n     \"Fig. 2. Examples of surfaces that can be generated\n     by a function of two variables (Source: \"\n     (utils/link \"CalcPlot3D\" \"https://www.monroecc.edu/faculty/paulseeburger/calcnsf/CalcPlot3D/\")\").\"]]]\n\n\n   [:p \"An important thing to notice here is that this step could be in any direction:\n        vertical, horizontal, or some combination of the two (diagonal). For simplicity\n        though, we'll resitrict ourselves to the first two cases – those in which we take\n        steps in purely the \\\\(x\\\\) and \\\\(y\\\\) directions – for right now.\n        So how would we calculate the derivative of the function \\\\(f(x,y) = x^2 + y^2\\\\)\n        with respect to \\\\(x\\\\) then?\"]\n\n   [:p \"Imagine standing at some point on this function's surface, and walking\n        horizontally in both directions. If we walk such that a spool of\n        yarn unrolls behind  us, the shape this yarn takes will\n        resemble the graph of a single-variate function.\n        More specifically, it will look like\n          \\\\(f(x) = x^2 + C\\\\) (a parabola) where \\\\(C\\\\) is some constant, namely\n        whatever the \\\\(y\\\\)-value of our original point was.\"]\n\n   [:p \"It might not be immediately obvious, but by walking horizontally\n        across our surface we only varied our \\\\(x\\\\)-coordinate, while\n        our \\\\(y\\\\)-coordinate remained constant.\n        Thus, when walking in this way,\n        the surface can be described\n        by a special case of the original function where\n        \\\\(y\\\\) is a constant.\"]\n\n      [:p \"Similarly, a walk\n           in a purely vertical direction is described\n           when \\\\(x\\\\) is a constant. More generally, we would find that\n           all multivariate functions\n           behave in this way when being sliced\n           (or walked upon) purely in the direction of one their variables, such\n           that all others become constants.\"]\n\n  [:figure {:class \"img-container\"}\n   [:div {:style {:text-align \"center\"}}\n    [:img {:src \"/parabaloid-1.png\" :style {:width \"50%\"}}]\n    [:img {:src \"/parabaloid-2.png\" :style {:width \"50%\"}}]\n    [:figcaption {:class \"post-caption\" :style {:text-align \"left\"}}\n    \"Fig. 3. The graph the function \\\\(f(x,y) = x^2 + y^2\\\\), known as a parabaloid.\n    Slicing it across the \\\\(x\\\\)-axis reveals that \\\\(x\\\\)-wise\n    cross-sections are parabolas. In fact, this property defines the surface! (Source: \"\n    (utils/link \"GeoGebra3D\" \"https://www.geogebra.org/3d?lang=en\")\").\"\n     ]]]\n\n   [:p \"In that vein of thought, we might conjecture that when computing\n        the derivative of our function \\\\(f(x,y) = x^2 + y^2\\\\) with\n        respect to \\\\(x\\\\), we can imagine we are taking the\n        derivative of \\\\(f(x) = x^2 + C\\\\), as this is what\n        the surface looks like when moving in the \\\\(x\\\\) direction.\n        Then the deriavative with respect to \\\\(x\\\\)\n        (what we call its partial derivative)\n        would be \\\\(2x\\\\). That is to say\n        \\\\(\\\\frac{\\\\partial{f}}{\\\\partial{x}}\\\\ = 2x\\\\)\n        (as would \\\\(\\\\frac{\\\\partial{f}}{\\\\partial{y}}\\\\)).\"]\n\n   [:p \"And it turns out that this thought is in fact correct!\"\n        (utils/make-footnote \"1\" \"first-footnote-a\" \"first-footnote-b\")\n        \" But how do we generalize this idea when taking steps across our surface that aren't\n          purely horizontal or vertical in nature? For instance,\n          what is the derivative associated with some step in the\n        direction of the vector \\\\(\\\\langle 1, 1 \\\\rangle \\\\)?\"]\n\n    [:p \"\n        Well, a step in this direction is equivelant to one step\n        in both the \\\\(x\\\\) direction and \\\\(y\\\\) direction.\n        And since we know how our function changes for both a pure step in the\n        \\\\(x\\\\) direction (\\\\(\\\\frac{\\\\partial{f}}{\\\\partial{x}}\\\\)) and \\\\(y\\\\)\n        direction (\\\\(\\\\frac{\\\\partial{f}}{\\\\partial{y}}\\\\)), the derivative\n        in this direction is just a sum of the two: \\\\(\\\\frac{\\\\partial{f}}{\\\\partial{x}} + \\\\frac{\\\\partial{f}}{\\\\partial{y}}\\\\ =\n        2x + 2y\\\\).\"]\n\n  [:p \"More generally, given any multivariate function of \\\\(n\\\\) variables,\n       we can express a derivative with respect to some vector – what we\n       call a directional derivative – as the linear combination of that function's partial derivatives\n       and the components of that vector. Said another way, given the vectors:\"]\n\n  [:p \"$$ \\\\boldsymbol{\\\\vec{\\\\alpha}} = \\\\begin{bmatrix}\n          a_{1} \\\\\\\\\n          a_{2} \\\\\\\\\n          \\\\vdots \\\\\\\\\n          a_{n} \\\\\\\\\n          \\\\end{bmatrix}\n          \\\\hspace{1cm}\n          \\\\boldsymbol{\\\\vec{\\\\beta}} =\n          \\\\begin{bmatrix}\n          \\\\frac{\\\\partial{f}}{\\\\partial{x_1}} \\\\\\\\\n          \\\\frac{\\\\partial{f}}{\\\\partial{x_2}} \\\\\\\\\n          \\\\vdots \\\\\\\\\n          \\\\frac{\\\\partial{f}}{\\\\partial{x_n}} \\\\\\\\\n          \\\\end{bmatrix}\n        $$\"]\n\n   [:p {:style {:margin-bottom \"25px\"}} \"Then the derivative of \\\\(f(x_1, x_2, \\\\ldots, x_n)\\\\) with respect to \\\\(\\\\boldsymbol{\\\\vec{\\\\alpha}}\\\\) is \\\\(\\\\boldsymbol{\\\\vec{\\\\alpha}} \\\\cdot \\\\boldsymbol{\\\\vec{\\\\beta}}\\\\).\n        Just as before, the given vector can be decomposed as the sum of steps in the direction\n        of a single variable (\\\\(a_1\\\\hat{\\\\imath} + a_2\\\\hspace{0.08cm}\\\\skew{2}{\\\\hat}{\\\\jmath} + \\\\ldots\\\\)),\n        and as a function's partials represent the effects of such steps,\n        the derivative in this direction is just their sum,\n        one for each step taken in the direction they represent (\\\\(a_1 \\\\frac{\\\\partial{f}}{\\\\partial{x_1}} + a_2 \\\\frac{\\\\partial{f}}{\\\\partial{x_2}} + \\\\ldots \\\\)).\"]\n\n\n   ;; some image\n   [:figure {:class \"img-container\"}\n   [:img {:src \"/parabaloid-5.png\" :style {:width \"50%\"}}]\n   [:img {:src \"/parabaloid-6.png\" :style {:width \"50%\"}}]\n  [:figcaption {:class \"post-caption\"}\n   \"Fig. 4. The slice of the parabaloid in the direction\n   \\\\(\\\\langle 1, 1 \\\\rangle\\\\) is also a parabola, albeit a\n   steeper one. It's generating function is \\\\(2n^2\\\\) for every \\\\(n\\\\) steps along this vector (see\n   right image where an \\\\(n = 1\\\\) returns \\\\(2\\\\)).\"]]\n\n   [:p \"While this isn't rigorous\"\n       \" (how can you take multiple infinitesimal steps?),\" (utils/make-footnote \"2\" \"second-footnote-a\" \"second-footnote-b\")\"\n        it suits our immediate purposes, as we can now calculate both partial\n        and directional derivatives. A natural question then, is what derivative is the greatest?\n        In what direction does a function increase most rapidly?\"]\n\n   [:p \"In other words, what vector, when dotted with the vector containing\n        the partials of our function, yields the largest possible\n        value? Well, the largest dot product a vector can have (when only\n        considering vectors of the same magnitude) is with\n        itself, so the direction of steepest ascent must be represented by the thing\n        we're dotting against – the vector containing the partials of our function! \"]\n\n   [:p \"Intuitively, this makes sense too, as how much this vector points in a given\n        direction is equivelant to the derivative in that direction, such that it points\n        more in steeper directions and less in shallow ones, thus becoming the steepest direction itself.\" (utils/make-footnote \"3\" \"third-footnote-a\" \"third-footnote-b\")\"\n        It is yielded by the \\\\(\\\\nabla\\\\) – or gradient – operation:\"]\n\n   [:p \"$$\\\\nabla f(x_1, x_2, \\\\ldots, x_n) =\n          \\\\begin{bmatrix}\n          \\\\frac{\\\\partial{f}}{\\\\partial{x_1}} \\\\\\\\\n          \\\\frac{\\\\partial{f}}{\\\\partial{x_2}} \\\\\\\\\n          \\\\vdots \\\\\\\\\n          \\\\frac{\\\\partial{f}}{\\\\partial{x_n}} \\\\\\\\\n          \\\\end{bmatrix}$$\"]\n\n\n\n   [:h1 {:class \"post-section-header\"} \"Gradient Descent\"]\n\n\n    ;The geometric interpretation associated with\n        ;    this idea is that instead of taking a step across\n;\n;            Even though we only can only really visualize\n;            functions of two variables as surfaces, it helps to hold this\n;            mental image – of multivariable functions encoding surfaces –\n;            in our heads. With that in mind, we can imagine that for some\n;            multivariable function of \\\\(n\\\\) inputs some surface is generated\n;            with some higher-dimesnional analogs for the concepts we would associate\n;            with 2D and 3D surfaces – that is to say, some sense of steepness,\n;            angle and direction, etc. We don't need to concretize what these might\n;            look like (at least not visually) but accepting that these properties\n;            exist in some shape or form will allow us to reason with them and make\n;            expanding upon our definition of the derivative.\n\n\n\n   ])\n\n\n(defn media-query-1 []\n (at-media {:max-width \"600px\"}\n     [\n      ;[:#first-footnote-b {:font-size \"13.5px\"}]\n      ;[:#math-2 {:font-size \"13.5px\"}]\n\n      ;[:#hot-cold-2 {:width \"200px\"}]\n      ]))\n\n(def post\n  {:title \"The Mathematics Of Automatic Differentiation\"\n   :date \"2020/10/29\"\n   :show post-preview\n   :content post-content\n   :tags [\"mathematics\", \"deep learning\"]\n   :type \"blog-post\"\n   :overarching \"writing\"\n   :id \"1\"\n   :css (media-query-1)})\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappingsqEA,AAAA,AAAA,AAACC,AA0CF,AAAA,AAAA,AAACA,AAeG,AAAA,AAAA,AAAA,AAACC,AAuDmD,AAAA,AAAA,AAAA,AAACA,AAc8C,AAAA,AAAA,AAAA,AAACA;AAoC5G,AAAA,AAAMC;AAAN,AACC,AAAA,AAAA,AAAA,AAAA,AAACC;;AAQF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAGIN,AACGC,AAKJ,AAACG","names",["personal-website.content.writings.blog-posts.the-mathematics-of-automatic-differentiation/post-preview","personal-website.content.writings.blog-posts.the-mathematics-of-automatic-differentiation/post-content","personal-website.utils/link","personal-website.utils/make-footnote","personal-website.content.writings.blog-posts.the-mathematics-of-automatic-differentiation/media-query-1","garden.stylesheet.at_media","personal-website.content.writings.blog-posts.the-mathematics-of-automatic-differentiation/post"]],"~:used-vars",["^J",["~$personal-website.content.writings.blog-posts.the-mathematics-of-automatic-differentiation/post","~$personal-website.content.writings.blog-posts.the-mathematics-of-automatic-differentiation/post-content","~$garden.stylesheet/at-media","~$personal-website.content.writings.blog-posts.the-mathematics-of-automatic-differentiation/media-query-1","~$personal-website.utils/link","~$personal-website.utils/make-footnote","~$personal-website.content.writings.blog-posts.the-mathematics-of-automatic-differentiation/post-preview"]]],"~:cache-keys",["~#cmap",[["^18","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^U","~$goog.dom.HtmlElement"]]],["^18","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","~$goog.array","~$goog.asserts"]]],["^18","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U"]]],["^18","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","~$goog.string"]]],["^18","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1R","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^18","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1S","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^1W"]]],["^18","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1S"]]],["^18","garden/color.cljc"],["c54b1d4a503890dd6f9bccea320b8ec76e68bee8","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^T","~$clojure.string","~$garden.util"]]],["^18","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U"]]],["^18","personal_website/content/writings/blog_posts/the_mathematics_of_automatic_differentiation.cljs"],["02d741534987f29f9246c017b1a7e2bcf1717da4","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^T","^Q","^S"]]],["^18","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U"]]],["^18","garden/stylesheet.cljc"],["c54b1d4a503890dd6f9bccea320b8ec76e68bee8","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^T","^23","~$garden.color","~$garden.types"]]],["^18","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U"]]],["^18","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U"]]],["^18","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1S"]]],"~:SHADOW-TIMESTAMP",[1600470677000,1600470677000,1593530297000],["^18","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1S","~$goog.reflect"]]],["^18","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1S","~$goog.html.trustedtypes","^1Z","^1[","^20","^21"]]],["^18","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U"]]],["^18","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U"]]],["^18","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1R","^1S","~$goog.html.SafeUrl","^20","^21","^1W"]]],["^18","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1S","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^29","^1Y","~$goog.html.uncheckedconversions","^20","^1W"]]],["^18","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^18","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1R","^1S","~$goog.dom.TagName","~$goog.dom.tags","^2=","^2>","~$goog.html.SafeStyleSheet","^29","^1Y","^28","^1Z","^1[","~$goog.labs.userAgent.browser","^1V","^20","^21","^1W"]]],["^18","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1V"]]],["^18","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^18","garden/types.cljc"],["c54b1d4a503890dd6f9bccea320b8ec76e68bee8","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^T"]]],["^18","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1R","^1S","^1T","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^18","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U"]]],["^18","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U"]]],["^18","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",[]]],["^18","garden/util.cljc"],["c54b1d4a503890dd6f9bccea320b8ec76e68bee8","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^T","^22","^25","^1T","~$goog.string.format"]]],["^18","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1R","^1V"]]],["^18","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^T","^1T","~$goog.string.StringBuffer"]]],["^18","personal_website/utils.cljs"],["08acac2c327494c1ed27572e7ec198dd1a496ba0","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^T"]]],["^18","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","~$goog.dom.safe","^2?","^20","^1W"]]],["^18","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U"]]],["^18","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1W"]]],["^18","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U"]]],["^18","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1R","^1S","^2;","~$goog.math"]]],["^18","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1S","^2<","^2=","^2>","^2D","^29","^1Y","^20","^1W"]]],["^18","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U"]]],["^18","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","~$goog.math.Long","~$goog.math.Integer","^1T","^1V","^1R","~$goog.Uri","^2N"]]],["^18","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1S","^28","^20","^21"]]],["^18","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1R","^1S","^2>","^1V","^20","^21","^1W"]]],["^18","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^27"]]],["^18","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1R","^1S","^1T"]]],["^18","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^U","^1S","^21"]]]]],"~:clj-info",["^ ","jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/garden/garden/1.3.10/garden-1.3.10.jar!/garden/types.cljc",1590336096000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/garden/garden/1.3.10/garden-1.3.10.jar!/garden/color.cljc",1590336096000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/garden/garden/1.3.10/garden-1.3.10.jar!/garden/util.cljc",1590336096000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1593530297000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","personal_website/content/writings/blog_posts/the_mathematics_of_automatic_differentiation.cljs","^7",1,"^8",5,"^9",1,"^:",94],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^Q","^S","^S","^T","^T","^U","^U"],"^V",["^J",["^W"]],"^X",["^ ","^Y","^S"],"~:defs",["^ ","~$post-preview",["^ ","^K","^1J","^6","personal_website/content/writings/blog_posts/the_mathematics_of_automatic_differentiation.cljs","^7",5,"^8",1,"^9",5,"^:",18,"^5",["^ ","^6","personal_website/content/writings/blog_posts/the_mathematics_of_automatic_differentiation.cljs","^7",5,"^8",6,"^9",5,"^:",18],"~:tag","~$string"],"~$post-content",["^ ","^K","^1E","^6","personal_website/content/writings/blog_posts/the_mathematics_of_automatic_differentiation.cljs","^7",12,"^8",1,"^9",12,"^:",18,"^5",["^ ","^6","personal_website/content/writings/blog_posts/the_mathematics_of_automatic_differentiation.cljs","^7",12,"^8",6,"^9",12,"^:",18],"^3G","~$cljs.core/IVector"],"~$media-query-1",["^ ","~:protocol-inline",null,"^5",["^ ","^6","personal_website/content/writings/blog_posts/the_mathematics_of_automatic_differentiation.cljs","^7",243,"^8",7,"^9",243,"^:",20,"~:arglists",["^10",["~$quote",["^10",[[]]]]]],"^K","^1G","^6","personal_website/content/writings/blog_posts/the_mathematics_of_automatic_differentiation.cljs","^:",20,"~:method-params",["^10",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"~:variadic?",false,"^7",243,"~:ret-tag","~$garden.types/CSSAtRule","^9",243,"~:max-fixed-arity",0,"~:fn-var",true,"^3M",["^10",["^3N",["^10",[[]]]]]],"~$post",["^ ","^K","^1D","^6","personal_website/content/writings/blog_posts/the_mathematics_of_automatic_differentiation.cljs","^7",252,"^8",1,"^9",252,"^:",10,"^5",["^ ","^6","personal_website/content/writings/blog_posts/the_mathematics_of_automatic_differentiation.cljs","^7",252,"^8",6,"^9",252,"^:",10],"^3G","~$cljs.core/IMap"]],"^Z",["^ ","^T","^T"],"~:cljs.analyzer/constants",["^ ","^V",["^J",["~:tags","~:figure","~:figcaption","~:overarching","~:date","~:text-align","~:content","~:width","~:css","~:type","~:src","~:max-width","~:title","~:style","~:div","~:id","~:class","~:h1","~:p","~:margin-bottom","~:img","~:show"]],"~:order",["^4<","~:p","^4?","^4>","^3[","^4;","^43","^4A","^48","^45","^40","^4@","^49","^3Z","^41","^42","^44","^46","^47","^4:","^4=","^4B"]],"^14",["^ ","^W",["^J",[]]],"^15",["^ "],"^16",["^U","^T","^Q","^S"]],"^N","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^1L",[["^4F","~:static-fns"],true,["^4F","~:shadow-tweaks"],null,["^4F","~:source-map-inline"],null,["^4F","~:elide-asserts"],false,["^4F","~:optimize-constants"],null,["^4F","^1;"],null,["^4F","~:external-config"],null,["^4F","~:tooling-config"],null,["^4F","~:emit-constants"],null,["^4F","~:load-tests"],null,["^4F","~:form-size-threshold"],null,["^4F","~:data-readers"],null,["^4F","~:infer-externs"],"~:auto",["^4F","^1="],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4F","~:fn-invoke-direct"],null,["^4F","~:source-map"],"/dev/null"]]]