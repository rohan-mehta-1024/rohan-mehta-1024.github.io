["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\n});\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___37547 = arguments.length;\nvar i__4737__auto___37548 = (0);\nwhile(true){\nif((i__4737__auto___37548 < len__4736__auto___37547)){\nargs__4742__auto__.push((arguments[i__4737__auto___37548]));\n\nvar G__37549 = (i__4737__auto___37548 + (1));\ni__4737__auto___37548 = G__37549;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__37482){\nvar map__37486 = p__37482;\nvar map__37486__$1 = (((((!((map__37486 == null))))?(((((map__37486.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__37486.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__37486):map__37486);\nvar m = map__37486__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__37486__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__37486__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__37486__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nif(re_frame.interop.debug_enabled_QMARK_){\nvar temp__5733__auto___37550 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys));\nif(temp__5733__auto___37550){\nvar unknown_keys_37551 = temp__5733__auto___37550;\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_37551], 0));\n} else {\n}\n} else {\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__4126__auto__ = id;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\n}\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\n}));\n\n(re_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq37478){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq37478));\n}));\n\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\nvar G__37492 = arguments.length;\nswitch (G__37492) {\ncase 1:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\n});\nre_frame.interceptor.update_effect = (function re_frame$interceptor$update_effect(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___37557 = arguments.length;\nvar i__4737__auto___37558 = (0);\nwhile(true){\nif((i__4737__auto___37558 < len__4736__auto___37557)){\nargs__4742__auto__.push((arguments[i__4737__auto___37558]));\n\nvar G__37559 = (i__4737__auto___37558 + (1));\ni__4737__auto___37558 = G__37559;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);\n});\n\n(re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq37520){\nvar G__37521 = cljs.core.first(seq37520);\nvar seq37520__$1 = cljs.core.next(seq37520);\nvar G__37522 = cljs.core.first(seq37520__$1);\nvar seq37520__$2 = cljs.core.next(seq37520__$1);\nvar G__37523 = cljs.core.first(seq37520__$2);\nvar seq37520__$3 = cljs.core.next(seq37520__$2);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__37521,G__37522,G__37523,seq37520__$3);\n}));\n\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\nvar G__37531 = arguments.length;\nswitch (G__37531) {\ncase 1:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\n});\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___37569 = arguments.length;\nvar i__4737__auto___37570 = (0);\nwhile(true){\nif((i__4737__auto___37570 < len__4736__auto___37569)){\nargs__4742__auto__.push((arguments[i__4737__auto___37570]));\n\nvar G__37571 = (i__4737__auto___37570 + (1));\ni__4737__auto___37570 = G__37571;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);\n});\n\n(re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq37536){\nvar G__37537 = cljs.core.first(seq37536);\nvar seq37536__$1 = cljs.core.next(seq37536);\nvar G__37538 = cljs.core.first(seq37536__$1);\nvar seq37536__$2 = cljs.core.next(seq37536__$1);\nvar G__37539 = cljs.core.first(seq37536__$2);\nvar seq37536__$3 = cljs.core.next(seq37536__$2);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__37537,G__37538,G__37539,seq37536__$3);\n}));\n\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\nvar temp__5733__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar f = temp__5733__auto__;\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\n} else {\nreturn context;\n}\n});\n/**\n * Loop over all interceptors, calling `direction` function on each,\n *   threading the value of `context` through every call.\n * \n *   `direction` is one of `:before` or `:after`.\n * \n *   Each iteration, the next interceptor to process is obtained from\n *   context's `:queue`. After they are processed, interceptors are popped\n *   from `:queue` and added to `:stack`.\n * \n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\n *   contain all interceptors processed.\n * \n *   Returns updated `context`. Ie. the `context` which has been threaded\n *   through all interceptor functions.\n * \n *   Generally speaking, an interceptor's `:before` function will (if present)\n *   add to a `context's` `:coeffects`, while it's `:after` function\n *   will modify the `context`'s `:effects`.  Very approximately.\n * \n *   But because all interceptor functions are given `context`, and can\n *   return a modified version of it, the way is clear for an interceptor\n *   to introspect the stack or queue, or even modify the queue\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\n */\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\nvar context__$1 = context;\nwhile(true){\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\nif(cljs.core.empty_QMARK_(queue)){\nreturn context__$1;\n} else {\nvar interceptor = cljs.core.peek(queue);\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\nvar G__37572 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\ncontext__$1 = G__37572;\ncontinue;\n}\nbreak;\n}\n});\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\n});\n/**\n * Create a fresh context\n */\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\nvar G__37543 = arguments.length;\nswitch (G__37543) {\ncase 2:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),interceptors);\n}));\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\n}));\n\n(re_frame.interceptor.context.cljs$lang$maxFixedArity = 3);\n\n/**\n * Called on completion of `:before` processing, this function prepares/modifies\n * `context` for the backwards sweep of processing in which an interceptor\n * chain's `:after` fns are called.\n * \n *   At this point in processing, the `:queue` is empty and `:stack` holds all\n *   the previously run interceptors. So this function enables the backwards walk\n *   by priming `:queue` with what's currently in `:stack`\n */\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\n});\n/**\n * Executes the given chain (coll) of interceptors.\n * \n * Each interceptor has this form:\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\n * \n * Walks the queue of iterceptors from beginning to end, calling the\n * `:before` fn on each, then reverse direction and walk backwards,\n * calling the `:after` fn on each.\n * \n * The last interceptor in the chain presumably wraps an event\n * handler fn. So the overall goal of the process is to \"handle\n * the given event\".\n * \n * Thread a `context` through all calls. `context` has this form:\n * \n *   {:coeffects {:event [:a-query-id :some-param]\n *                :db    <original contents of app-db>}\n *    :effects   {:db    <new value for app-db>\n *                :dispatch  [:an-event-id :param1]}\n *    :queue     <a collection of further interceptors>\n *    :stack     <a collection of interceptors already walked>}\n * \n * `context` has `:coeffects` and `:effects` which, if this was a web\n * server, would be somewhat anologous to `request` and `response`\n * respectively.\n * \n * `coeffects` will contain data like `event` and the initial\n * state of `db` -  the inputs required by the event handler\n * (sitting presumably on the end of the chain), while handler-returned\n * side effects are put into `:effects` including, but not limited to,\n * new values for `db`.\n * \n * The first few interceptors in a chain will likely have `:before`\n * functions which \"prime\" the `context` by adding the event, and\n * the current state of app-db into `:coeffects`. But interceptors can\n * add whatever they want to `:coeffects` - perhaps the event handler needs\n * some information from localstore, or a random number, or access to\n * a DataScript connection.\n * \n * Equally, some interceptors in the chain will have `:after` fn\n * which can process the side effects accumulated into `:effects`\n * including but, not limited to, updates to app-db.\n * \n * Through both stages (before and after), `context` contains a `:queue`\n * of interceptors yet to be processed, and a `:stack` of interceptors\n * already done.  In advanced cases, these values can be modified by the\n * functions through which the context is threaded.\n */\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__37423__auto___37578 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37423__auto___37578);\n\n} else {\n}\n\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^Q","~$re-frame.interop","^R","~$re-frame.trace","^S","~$trace","^S","~$clojure.set","^U","~$set","^U","~$cljs.core","^W","~$goog","^X"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$console","^Q","~$empty-queue","^R","~$debug-enabled?","^R"],"~:require-macros",["^ ","^S","^S","^T","^S","^W","^W"],"~:form",["~#list",["~$ns","^L",["^15",["^Z",["^Q","~:refer",["^10"]],["^R","^17",["^11","^12"]],["^S","~:as","^T","~:include-macros",true],["^U","^18","^V"]]]]],"~:flags",["^ ","^Z",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^X","^W","^Q","^R","^S","^U"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1600473337981,"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n    [re-frame.loggers :refer [console]]\n    [re-frame.interop :refer [empty-queue debug-enabled?]]\n    [re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after})\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n   (-> {}\n      (assoc-coeffect :event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__37482","map__37486","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq37478","self__4724__auto__","cljs.core/seq","id","before","after","re-frame.interop/debug-enabled?","temp__5733__auto__","unknown-keys","clojure.set.difference","re_frame.loggers.console","or__4126__auto__","G__37492","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq37520","G__37521","cljs.core/first","cljs.core/next","G__37522","G__37523","self__4723__auto__","f","args","cljs.core/update-in","G__37531","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq37536","G__37537","G__37538","G__37539","re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc","cljs.core/pop","cljs.core.conj","re-frame.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","re-frame.interop/empty-queue","G__37543","re-frame.interceptor/context","event","db","re_frame.interceptor.context","re-frame.interceptor/change-direction","cljs.core.dissoc","re-frame.interceptor/execute","event-v","re-frame.trace/is-trace-enabled?","new-trace__37423__auto__","cljs.core.merge","re-frame.trace/*current-trace*","cljs.core/merge"]],"~:used-vars",["^J",["~$re-frame.interceptor/context","~$re-frame.interceptor/get-effect","~$cljs.core/=","~$cljs.core/keys","~$re-frame.interceptor/execute","~$re-frame.interceptor/->interceptor","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.loggers/console","~$cljs.core/dissoc","~$re-frame.interceptor/update-effect","~$cljs.core/pop","~$re-frame.interceptor/invoke-interceptors","~$cljs.core/set","~$cljs.core/empty?","~$re-frame.interceptor/enqueue","~$cljs.core/fnil","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/get-in","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$re-frame.interceptor/assoc-coeffect","~$re-frame.interceptor/change-direction","~$re-frame.trace/*current-trace*","~$re-frame.interceptor/get-coeffect","~$re-frame.interop/empty-queue","~$re-frame.interceptor/assoc-effect","~$re-frame.interceptor/interceptor?","~$cljs.core/assoc","~$cljs.core/assoc-in","~$re-frame.interop/debug-enabled?","~$cljs.core/update-in","~$re-frame.interceptor/invoke-interceptor-fn","~$js/Error","~$re-frame.interceptor/mandatory-interceptor-keys"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","dc3011a0ee823c91a565237d17cbc3c0856de8a6","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1>","reagent/impl/batching.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^W","~$reagent.debug","~$reagent.impl.util"]]],["^1>","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","~$goog.dom.HtmlElement"]]],["^1>","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","~$goog.labs.userAgent.util","~$goog.string"]]],["^1>","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","~$goog.array","~$goog.asserts"]]],["^1>","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^1>","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1>","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2S","^2Q","~$goog.object","~$goog.string.internal"]]],["^1>","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2T","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2X"]]],["^1>","re_frame/loggers.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^W","^U"]]],["^1>","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2T"]]],["^2F","node_modules/prop-types/checkPropTypes.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","3180f5f58c360a2e36c5ff354213b3ff22f43d1b","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^2K","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1>","reagent/impl/util.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^W","~$clojure.string"]]],["^1>","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2Q","~$goog.reflect","^2R"]]],["^1>","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^1>","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2T","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2U","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1>","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2V"]]],["^1>","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^2F","node_modules/scheduler/cjs/scheduler.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","7d8513ea2b82a7b8f00a1fd322704005205046bc","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^2K"]]],["^1>","reagent/ratom.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^W","^2O","^2N","~$reagent.impl.batching","^U","^2W"]]],["^2F","node_modules/scheduler/cjs/scheduler.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","19e07f39891e78ec50904d00e33146e92404379f","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^2K"]]],["^1>","re_frame/interop.cljs"],["0e1666916193eaabc7012c4a18450a0d00336095","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^W","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1>","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","~$goog.disposable.IDisposable"]]],["^1>","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^2F","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","d9f1d6c2a711a6903adf603db43d9f9e19057146","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^2K"]]],["^2F","node_modules/react/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^2K","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1>","shadow/js.js"],["5d2e4e955ab1a108e2ebc0c9b87ba78f8be4edbc","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^1>","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^1>","reagent/impl/template.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^W","^A","^34","~$clojure.walk","^2O","~$reagent.impl.component","^3=","^3A","^2N","^2W"]]],["^1>","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2T"]]],["^2F","node_modules/react-dom/cjs/react-dom.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","d5ed1c931c99ccc1a772592a9e96c018d814f7fd","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^2K","^A","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1600470677000,1600470677000,1593530297000],["^2F","node_modules/react/cjs/react.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","0c9d0acaa1ab1e24333c71607d0fa0609193e7d7","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^2K","^3G","~$module$node_modules$prop_types$checkPropTypes"]]],["^1>","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2T","^38"]]],["^1>","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","~$goog.events.ListenableKey"]]],["^1>","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2T","~$goog.html.trustedtypes","^2[","^30","^31","^32"]]],["^1>","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2S","~$goog.events.Listener","^2W"]]],["^1>","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^1>","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^2F","node_modules/scheduler/cjs/scheduler-tracing.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","0b00a799c88b303e4c3e8fe2628f7bde50128f0d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^2K"]]],["^1>","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^1>","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2S","^2T","~$goog.html.SafeUrl","^31","^32","^2X"]]],["^1>","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2T","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^3N","^2Z","~$goog.html.uncheckedconversions","^31","^2X"]]],["^1>","reagent/impl/component.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^W","^2W","^A","^2O","^3=","^3A","^2N"]]],["^1>","clojure/walk.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^W"]]],["^1>","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1>","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2S","^2T","~$goog.dom.TagName","~$goog.dom.tags","^3R","^3S","~$goog.html.SafeStyleSheet","^3N","^2Z","^3L","^2[","^30","^35","^2W","^31","^32","^2X"]]],["^1>","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2W"]]],["^1>","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^2F","node_modules/scheduler/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","408126fc2241739168bcaf5965ae56a7df143144","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^2K","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1>","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2S","^2Q","^2R"]]],["^1>","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2S","^2T","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^3W","~$goog.dom.safe","^3Q","^3T","~$goog.math.Coordinate","~$goog.math.Size","^2W","^2R","~$goog.string.Unicode","^2V"]]],["^1>","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","~$goog.debug.Error","^41"]]],["^1>","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2S","^2T","^2R","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1>","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^2F","node_modules/object-assign/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","519ffd5a4c91b67302cc9947b794966d629860cd","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^2K"]]],["^1>","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^1>","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^1>","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",[]]],["^1>","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2S","^2W"]]],["^1>","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^W","^2R","~$goog.string.StringBuffer"]]],["^2F","node_modules/react/cjs/react.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","a25ef7d1b1992294ca65e96d70e1be7f70977b13","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^2K","^3G"]]],["^1>","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2T"]]],["^1>","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^42","^3T","^31","^2X"]]],["^1>","re_frame/interceptor.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^W","^Q","^R","^S","^U"]]],["^1>","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^1>","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2X"]]],["^1>","reagent/core.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^W","^A","~$reagent.impl.template","^3F","^2O","^3=","^3A","^2N","~$reagent.dom"]]],["^1>","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2S","~$goog.debug.errorcontext","^2V"]]],["^1>","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^1>","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","~$goog.math"]]],["^1>","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^1>","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2S","^2T","^3P","^4@"]]],["^1>","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^39","~$goog.dom","^3W","^42","^3P","^3Q","^2Z","^35","^36","^31"]]],["^1>","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2T","^3Q","^3R","^3S","^3Y","^3N","^2Z","^31","^2X"]]],["^1>","reagent/dom.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^W","^C","^2O","^4=","^3=","^3A"]]],["^2F","node_modules/prop-types/lib/ReactPropTypesSecret.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","4eec230c5b56ef580ea9c3e7ae6358ba1f8bdbec","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^2K"]]],["^1>","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","~$goog.Disposable","~$goog.events.EventId"]]],["^1>","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X"]]],["^1>","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","~$goog.math.Long","~$goog.math.Integer","^2R","^2W","^2S","~$goog.Uri","^4<"]]],["^1>","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2T","^3L","^31","^32"]]],["^1>","reagent/debug.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^W"]]],["^1>","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2S","^2T","^3S","^2W","^31","^32","^2X"]]],["^1>","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","~$goog.debug","^2U","~$goog.events.Event","~$goog.events.EventType","^38","^2V"]]],["^1>","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^38"]]],["^1>","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2V"]]],["^2F","node_modules/scheduler/tracing.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","4a7a89de5eaa5548bfc85da9e5243b3c7e444a34","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^2K","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^2F","node_modules/react-dom/cjs/react-dom.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","19dc160595b3eb8999f04fe10db88fd747daa853","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^2K","^A","^3G","^3H","^3J","~$module$node_modules$scheduler$tracing"]]],["^1>","clojure/set.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^W"]]],["^1>","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2S","^2T","^2R"]]],["^1>","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^2T","^32"]]],["^1>","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^4C"]]],["^1>","re_frame/trace.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2G",["^ ","^2H",null,"^2I",["^J",[]],"^2J",["^X","^W","^R","^Q","^3P"]]]]],"~:clj-info",["^ ","jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/interop.clj",1592409480000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1566593954000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/re-frame/re-frame/1.1.1/re-frame-1.1.1.jar!/re_frame/interop.clj",1600471688000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/debug.clj",1592409480000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/core.clj",1592409480000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/re-frame/re-frame/1.1.1/re-frame-1.1.1.jar!/re_frame/trace.cljc",1600471688000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/ratom.clj",1592409480000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^R","^S","^S","^T","^S","^U","^U","^V","^U","^W","^W","^X","^X"],"^Y",["^J",["^Z"]],"~:shadow/js-access-global",["^J",["Error"]],"^[",["^ ","^10","^Q","^11","^R","^12","^R"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",42,"^8",7,"^9",42,"^:",20,"~:arglists",["^15",["~$quote",["^15",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^15",["^5H","^5I","~$f","^5J"]]],"^5F",["^15",[["^5H","^5I","~$f","~$&","^5J"]]],"~:arglists-meta",["^15",[null]]]],"^K","^1T","^6","re_frame/interceptor.cljc","^:",20,"^5K",["^ ","^5L",true,"^5M",3,"^5N",3,"^5O",[["^15",["^5H","^5I","~$f","^5J"]]],"^5F",["^15",[["^5H","^5I","~$f","~$&","^5J"]]],"^5P",["^15",[null]]],"^5O",[["^15",["^5H","^5I","~$f","^5J"]]],"~:protocol-impl",null,"^5M",3,"^5P",["^15",[null]],"^8",1,"^5L",true,"~:methods",[["^ ","^5M",3,"^5L",true,"~:tag","~$any"]],"^7",42,"~:ret-tag","^5T","^9",42,"^5N",3,"~:fn-var",true,"^5F",["^15",[["^5H","^5I","~$f","~$&","^5J"]]]],"~$invoke-interceptors",["^ ","^5E",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",74,"^8",8,"^9",74,"^:",27,"~:private",true,"^5F",["^15",["^5G",["^15",[["^5H","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^5X",true,"^K","^1V","^6","re_frame/interceptor.cljc","^:",27,"^5O",["^15",[["^5H","^5Y"]]],"^5Q",null,"^5P",["^15",[null,null]],"^8",1,"^5L",false,"^7",74,"^9",74,"^5N",2,"^5V",true,"^5F",["^15",["^5G",["^15",[["^5H","^5Y"]]]]],"^5Z","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^5E",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",56,"^8",7,"^9",56,"^:",21,"^5F",["^15",["^5G",["^15",[["^5H","^5I","~$value"]]]]]],"^K","^26","^6","re_frame/interceptor.cljc","^:",21,"^5O",["^15",[["^5H","^5I","^60"]]],"^5Q",null,"^5P",["^15",[null,null]],"^8",1,"^5L",false,"^7",56,"^5U",["^J",["~$clj","^5T"]],"^9",56,"^5N",3,"^5V",true,"^5F",["^15",["^5G",["^15",[["^5H","^5I","^60"]]]]]],"~$update-coeffect",["^ ","^5E",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",60,"^8",7,"^9",60,"^:",22,"^5F",["^15",["^5G",["^15",[["^5H","^5I","~$f","~$&","^5J"]]]]],"^5K",["^ ","^5L",true,"^5M",3,"^5N",3,"^5O",[["^15",["^5H","^5I","~$f","^5J"]]],"^5F",["^15",[["^5H","^5I","~$f","~$&","^5J"]]],"^5P",["^15",[null]]]],"^K","^24","^6","re_frame/interceptor.cljc","^:",22,"^5K",["^ ","^5L",true,"^5M",3,"^5N",3,"^5O",[["^15",["^5H","^5I","~$f","^5J"]]],"^5F",["^15",[["^5H","^5I","~$f","~$&","^5J"]]],"^5P",["^15",[null]]],"^5O",[["^15",["^5H","^5I","~$f","^5J"]]],"^5Q",null,"^5M",3,"^5P",["^15",[null]],"^8",1,"^5L",true,"^5R",[["^ ","^5M",3,"^5L",true,"^5S","^5T"]],"^7",60,"^5U","^5T","^9",60,"^5N",3,"^5V",true,"^5F",["^15",[["^5H","^5I","~$f","~$&","^5J"]]]],"~$invoke-interceptor-fn",["^ ","^5E",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",67,"^8",8,"^9",67,"^:",29,"^5X",true,"^5F",["^15",["^5G",["^15",[["^5H","~$interceptor","^5Y"]]]]]],"^5X",true,"^K","^2A","^6","re_frame/interceptor.cljc","^:",29,"^5O",["^15",[["^5H","^64","^5Y"]]],"^5Q",null,"^5P",["^15",[null,null]],"^8",1,"^5L",false,"^7",67,"^5U",["^J",[null,"^5T"]],"^9",67,"^5N",3,"^5V",true,"^5F",["^15",["^5G",["^15",[["^5H","^64","^5Y"]]]]]],"~$get-effect",["^ ","^5E",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",30,"^8",7,"^9",30,"^:",17,"^5F",["^15",["^5G",["^15",[["^5H"],["^5H","^5I"],["^5H","^5I","~$not-found"]]]]],"^5K",["^ ","^5L",false,"^5M",3,"^5N",3,"^5O",[["^5H"],["^5H","^5I"],["^5H","^5I","^66"]],"^5F",["^15",[["^5H"],["^5H","^5I"],["^5H","^5I","^66"]]],"^5P",["^15",[null,null,null]]]],"^K","^1K","^6","re_frame/interceptor.cljc","^:",17,"^5K",["^ ","^5L",false,"^5M",3,"^5N",3,"^5O",[["^5H"],["^5H","^5I"],["^5H","^5I","^66"]],"^5F",["^15",[["^5H"],["^5H","^5I"],["^5H","^5I","^66"]]],"^5P",["^15",[null,null,null]]],"^5O",[["^5H"],["^5H","^5I"],["^5H","^5I","^66"]],"^5Q",null,"^5M",3,"^5P",["^15",[null,null,null]],"^8",1,"^5L",false,"^5R",[["^ ","^5M",1,"^5L",false,"^5S","^5T"],["^ ","^5M",2,"^5L",false,"^5S",["^J",[null,"^5T"]]],["^ ","^5M",3,"^5L",false,"^5S",["^J",[null,"^5T"]]]],"^7",30,"^9",30,"^5N",3,"^5V",true,"^5F",["^15",[["^5H"],["^5H","^5I"],["^5H","^5I","^66"]]]],"~$->interceptor",["^ ","^5E",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",17,"^8",7,"^9",17,"^:",20,"^5F",["^15",["^5G",["^15",[["~$&",["^ ","^18","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^5K",["^ ","^5L",true,"^5M",0,"^5N",0,"^5O",[["^15",[["^ ","^18","~$m","^68",["^69","^6:","^6;"]]]]],"^5F",["^15",[["~$&",["^ ","^18","~$m","^68",["^69","^6:","^6;"]]]]],"^5P",["^15",[null]]]],"^K","^1O","^6","re_frame/interceptor.cljc","^:",20,"^5K",["^ ","^5L",true,"^5M",0,"^5N",0,"^5O",[["^15",[["^ ","^18","~$m","^68",["^69","^6:","^6;"]]]]],"^5F",["^15",[["~$&",["^ ","^18","~$m","^68",["^69","^6:","^6;"]]]]],"^5P",["^15",[null]]],"^5O",[["^15",[["^ ","^18","~$m","^68",["^69","^6:","^6;"]]]]],"^5Q",null,"^5M",0,"^5P",["^15",[null]],"^8",1,"^5L",true,"^5R",[["^ ","^5M",0,"^5L",true,"^5S","~$cljs.core/IMap"]],"^7",17,"^5U","^5T","^9",17,"^5N",0,"^5V",true,"^5F",["^15",[["~$&",["^ ","^18","~$m","^68",["^69","^6:","^6;"]]]]]],"~$get-coeffect",["^ ","^5E",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",48,"^8",7,"^9",48,"^:",19,"^5F",["^15",["^5G",["^15",[["^5H"],["^5H","^5I"],["^5H","^5I","^66"]]]]],"^5K",["^ ","^5L",false,"^5M",3,"^5N",3,"^5O",[["^5H"],["^5H","^5I"],["^5H","^5I","^66"]],"^5F",["^15",[["^5H"],["^5H","^5I"],["^5H","^5I","^66"]]],"^5P",["^15",[null,null,null]]]],"^K","^29","^6","re_frame/interceptor.cljc","^:",19,"^5K",["^ ","^5L",false,"^5M",3,"^5N",3,"^5O",[["^5H"],["^5H","^5I"],["^5H","^5I","^66"]],"^5F",["^15",[["^5H"],["^5H","^5I"],["^5H","^5I","^66"]]],"^5P",["^15",[null,null,null]]],"^5O",[["^5H"],["^5H","^5I"],["^5H","^5I","^66"]],"^5Q",null,"^5M",3,"^5P",["^15",[null,null,null]],"^8",1,"^5L",false,"^5R",[["^ ","^5M",1,"^5L",false,"^5S","^5T"],["^ ","^5M",2,"^5L",false,"^5S",["^J",[null,"^5T"]]],["^ ","^5M",3,"^5L",false,"^5S",["^J",[null,"^5T"]]]],"^7",48,"^9",48,"^5N",3,"^5V",true,"^5F",["^15",[["^5H"],["^5H","^5I"],["^5H","^5I","^66"]]]],"~$execute",["^ ","^5E",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",143,"^8",7,"^9",143,"^:",14,"^5F",["^15",["^5G",["^15",[["~$event-v","~$interceptors"]]]]],"^5Z","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^K","^1N","^6","re_frame/interceptor.cljc","^:",14,"^5O",["^15",[["^6?","^6@"]]],"^5Q",null,"^5P",["^15",[null,null]],"^8",1,"^5L",false,"^7",143,"^5U","^5T","^9",143,"^5N",2,"^5V",true,"^5F",["^15",["^5G",["^15",[["^6?","^6@"]]]]],"^5Z","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^5E",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",38,"^8",7,"^9",38,"^:",19,"^5F",["^15",["^5G",["^15",[["^5H","^5I","^60"]]]]]],"^K","^2;","^6","re_frame/interceptor.cljc","^:",19,"^5O",["^15",[["^5H","^5I","^60"]]],"^5Q",null,"^5P",["^15",[null,null]],"^8",1,"^5L",false,"^7",38,"^5U",["^J",["^61","^5T"]],"^9",38,"^5N",3,"^5V",true,"^5F",["^15",["^5G",["^15",[["^5H","^5I","^60"]]]]]],"~$enqueue",["^ ","^5E",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",111,"^8",7,"^9",111,"^:",14,"^5F",["^15",["^5G",["^15",[["^5H","^6@"]]]]]],"^K","^1Y","^6","re_frame/interceptor.cljc","^:",14,"^5O",["^15",[["^5H","^6@"]]],"^5Q",null,"^5P",["^15",[null,null]],"^8",1,"^5L",false,"^7",111,"^5U",["^J",["^61","^5T"]],"^9",111,"^5N",2,"^5V",true,"^5F",["^15",["^5G",["^15",[["^5H","^6@"]]]]]],"~$mandatory-interceptor-keys",["^ ","^K","^2C","^6","re_frame/interceptor.cljc","^7",9,"^8",1,"^9",9,"^:",32,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",9,"^8",6,"^9",9,"^:",32],"^5S","~$cljs.core/ISet"],"~$interceptor?",["^ ","^5E",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",11,"^8",7,"^9",11,"^:",19,"^5F",["^15",["^5G",["^15",[["~$m"]]]]]],"^K","^2<","^6","re_frame/interceptor.cljc","^:",19,"^5O",["^15",[["~$m"]]],"^5Q",null,"^5P",["^15",[null,null]],"^8",1,"^5L",false,"^7",11,"^5U","~$boolean","^9",11,"^5N",1,"^5V",true,"^5F",["^15",["^5G",["^15",[["~$m"]]]]]],"~$change-direction",["^ ","^5E",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",129,"^8",8,"^9",129,"^:",24,"^5X",true,"^5F",["^15",["^5G",["^15",[["^5H"]]]]],"^5Z","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^5X",true,"^K","^27","^6","re_frame/interceptor.cljc","^:",24,"^5O",["^15",[["^5H"]]],"^5Q",null,"^5P",["^15",[null,null]],"^8",1,"^5L",false,"^7",129,"^5U",["^J",["^61","^5T"]],"^9",129,"^5N",1,"^5V",true,"^5F",["^15",["^5G",["^15",[["^5H"]]]]],"^5Z","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^5H",["^ ","^5E",null,"^5",["^ ","^5X",true,"^6","re_frame/interceptor.cljc","^:",15,"^5K",["^ ","^5L",false,"^5M",3,"^5N",3,"^5O",[["~$event","^6@"],["^6H","^6@","~$db"]],"^5F",["^15",[["^6H","^6@"],["^6H","^6@","^6I"]]],"^5P",["^15",[null,null]]],"^8",8,"^7",118,"^9",118,"^5F",["^15",["^5G",["^15",[["^6H","^6@"],["^6H","^6@","^6I"]]]]],"^5Z","Create a fresh context"],"^5X",true,"^K","^1J","^6","re_frame/interceptor.cljc","^:",15,"^5K",["^ ","^5L",false,"^5M",3,"^5N",3,"^5O",[["^6H","^6@"],["^6H","^6@","^6I"]],"^5F",["^15",[["^6H","^6@"],["^6H","^6@","^6I"]]],"^5P",["^15",[null,null]]],"^5O",[["^6H","^6@"],["^6H","^6@","^6I"]],"^5Q",null,"^5M",3,"^5P",["^15",[null,null]],"^8",1,"^5L",false,"^5R",[["^ ","^5M",2,"^5L",false,"^5S",["^J",["^61","^5T"]]],["^ ","^5M",3,"^5L",false,"^5S",["^J",["^61","^5T"]]]],"^7",118,"^9",118,"^5N",3,"^5V",true,"^5F",["^15",[["^6H","^6@"],["^6H","^6@","^6I"]]],"^5Z","Create a fresh context"]],"^13",["^ ","^S","^S","^T","^S","^W","^W"],"~:cljs.analyzer/constants",["^ ","^Y",["^J",["~:unnamed","~:tags","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^6P","^6Q","^6W","^6T","^6K","^6R","^6U","^6N","^6S","^6O","^6M","^6L","^6V"]],"^1:",["^ ","^Z",["^J",[]]],"^1;",["^ "],"^1<",["^X","^W","^Q","^R","^S","^U"]],"^N","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^2E",[["^6[","~:static-fns"],true,["^6[","~:shadow-tweaks"],null,["^6[","~:source-map-inline"],null,["^6[","~:elide-asserts"],false,["^6[","~:optimize-constants"],null,["^6[","^1A"],null,["^6[","~:external-config"],null,["^6[","~:tooling-config"],null,["^6[","~:emit-constants"],null,["^6[","~:load-tests"],null,["^6[","~:form-size-threshold"],null,["^6[","~:data-readers"],null,["^6[","~:infer-externs"],"~:auto",["^6[","^1C"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6[","~:fn-invoke-direct"],null,["^6[","~:source-map"],"/dev/null"]]]