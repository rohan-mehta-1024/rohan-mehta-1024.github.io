["^ ","~:output",["^ ","~:js","goog.provide('re_frame.std_interceptors');\nre_frame.std_interceptors.debug = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$debug_before(context){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Handling re-frame event:\",re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], 0));\n\nreturn context;\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$debug_after(context){\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar orig_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new_db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes in:\",event], 0));\n} else {\nvar vec__37688_37792 = clojure.data.diff(orig_db,new_db);\nvar only_before_37793 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__37688_37792,(0),null);\nvar only_after_37794 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__37688_37792,(1),null);\nvar db_changed_QMARK__37795 = (((!((only_before_37793 == null)))) || ((!((only_after_37794 == null)))));\nif(db_changed_QMARK__37795){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"group\",\"group\",582596132),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"db clojure.data/diff for:\",event], 0));\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only before:\",only_before_37793], 0));\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only after :\",only_after_37794], 0));\n\nre_frame.loggers.console(new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes resulted from:\",event], 0));\n}\n}\n\nreturn context;\n})], 0));\nre_frame.std_interceptors.trim_v = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"trim-v\",\"trim-v\",-1274938640),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$trimv_before(context){\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),cljs.core.subvec,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(1)], 0)),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"untrimmed-event\",\"re-frame.std-interceptors/untrimmed-event\",-840935075),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)));\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$trimv_after(context){\nreturn re_frame.interceptor.assoc_coeffect(re_frame.utils.dissoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"untrimmed-event\",\"re-frame.std-interceptors/untrimmed-event\",-840935075)], null)),new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"untrimmed-event\",\"re-frame.std-interceptors/untrimmed-event\",-840935075)));\n})], 0));\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n * \n *   These handlers take two arguments;  `db` and `event`, and they return `db`.\n * \n *    (fn [db event]\n *       ....)\n * \n *   So, the interceptor wraps the given handler:\n *   1. extracts two `:coeffects` keys: db and event\n *   2. calls handler-fn\n *   3. stores the db result back into context's `:effects`\n */\nre_frame.std_interceptors.db_handler__GT_interceptor = (function re_frame$std_interceptors$db_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"db-handler\",\"db-handler\",579530098),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$db_handler__GT_interceptor_$_db_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__37704 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__37705 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__37705);\n\ntry{try{var map__37710 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__37710__$1 = (((((!((map__37710 == null))))?(((((map__37710.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__37710.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__37710):map__37710);\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__37710__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__37710__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null,db,event)));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__37421__auto___37804 = re_frame.interop.now();\nvar duration__37422__auto___37805 = (end__37421__auto___37804 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__37422__auto___37805,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__37421__auto___37804);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__37704);\n}})():(function (){var map__37715 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__37715__$1 = (((((!((map__37715 == null))))?(((((map__37715.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__37715.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__37715):map__37715);\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__37715__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__37715__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null,db,event)));\n})());\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__37423__auto___37808 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37423__auto___37808);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n * \n *   These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n * \n *    (fn [coeffects event]\n *       {:db ...\n *        :dispatch ...})\n * \n * Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n *   1. extracts `:coeffects`\n *   2. call handler-fn giving coeffects\n *   3. stores the result back into the `:effects`\n */\nre_frame.std_interceptors.fx_handler__GT_interceptor = (function re_frame$std_interceptors$fx_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"fx-handler\",\"fx-handler\",-549783097),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$fx_handler__GT_interceptor_$_fx_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__37723 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__37724 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__37724);\n\ntry{try{var map__37745 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__37745__$1 = (((((!((map__37745 == null))))?(((((map__37745.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__37745.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__37745):map__37745);\nvar coeffects = map__37745__$1;\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__37745__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null,coeffects,event)));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__37421__auto___37842 = re_frame.interop.now();\nvar duration__37422__auto___37843 = (end__37421__auto___37842 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__37422__auto___37843,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__37421__auto___37842);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__37723);\n}})():(function (){var map__37747 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__37747__$1 = (((((!((map__37747 == null))))?(((((map__37747.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__37747.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__37747):map__37747);\nvar coeffects = map__37747__$1;\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__37747__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null,coeffects,event)));\n})());\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__37423__auto___37855 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37423__auto___37855);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n *   These advanced handlers take one argument: `context` and they return a modified `context`.\n *   Example:\n * \n *    (fn [context]\n *       (enqueue context [more interceptors]))\n */\nre_frame.std_interceptors.ctx_handler__GT_interceptor = (function re_frame$std_interceptors$ctx_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"ctx-handler\",\"ctx-handler\",-1777672230),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$ctx_handler__GT_interceptor_$_ctx_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__37749 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__37750 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__37750);\n\ntry{try{return (handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null,context));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__37421__auto___37865 = re_frame.interop.now();\nvar duration__37422__auto___37866 = (end__37421__auto___37865 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__37422__auto___37866,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__37421__auto___37865);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__37749);\n}})():(handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null,context)));\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__37423__auto___37869 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__37423__auto___37869);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\nre_frame.std_interceptors.path = (function re_frame$std_interceptors$path(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___37882 = arguments.length;\nvar i__4737__auto___37883 = (0);\nwhile(true){\nif((i__4737__auto___37883 < len__4736__auto___37882)){\nargs__4742__auto__.push((arguments[i__4737__auto___37883]));\n\nvar G__37884 = (i__4737__auto___37883 + (1));\ni__4737__auto___37883 = G__37884;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar path = cljs.core.flatten(args);\nvar db_store_key = new cljs.core.Keyword(\"re-frame-path\",\"db-store\",\"re-frame-path/db-store\",655758490);\nif(cljs.core.empty_QMARK_(path)){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"path\\\" interceptor given no params\"], 0));\n} else {\n}\n\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"path\",\"path\",-188191168),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function (context){\nvar original_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nreturn re_frame.interceptor.assoc_coeffect(cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,db_store_key,cljs.core.conj,original_db),new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(original_db,path));\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function (context){\nvar db_store = db_store_key.cljs$core$IFn$_invoke$arity$1(context);\nvar original_db = cljs.core.peek(db_store);\nvar new_db_store = cljs.core.pop(db_store);\nvar context_SINGLEQUOTE_ = re_frame.interceptor.assoc_coeffect(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,db_store_key,new_db_store),new cljs.core.Keyword(null,\"db\",\"db\",993250759),original_db);\nvar db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\nreturn context_SINGLEQUOTE_;\n} else {\nreturn re_frame.interceptor.assoc_effect(context_SINGLEQUOTE_,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(original_db,path,db));\n}\n})], 0));\n}));\n\n(re_frame.std_interceptors.path.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.std_interceptors.path.cljs$lang$applyTo = (function (seq37758){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq37758));\n}));\n\nre_frame.std_interceptors.enrich = (function re_frame$std_interceptors$enrich(f){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"enrich\",\"enrich\",-2108921925),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$enrich_$_enrich_after(context){\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null,db,event)));\n})], 0));\n});\nre_frame.std_interceptors.after = (function re_frame$std_interceptors$after(f){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"after\",\"after\",594996914),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$after_$_after_after(context){\nvar db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\n(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null,db,event));\n\nreturn context;\n})], 0));\n});\nre_frame.std_interceptors.on_changes = (function re_frame$std_interceptors$on_changes(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___37885 = arguments.length;\nvar i__4737__auto___37886 = (0);\nwhile(true){\nif((i__4737__auto___37886 < len__4736__auto___37885)){\nargs__4742__auto__.push((arguments[i__4737__auto___37886]));\n\nvar G__37887 = (i__4737__auto___37886 + (1));\ni__4737__auto___37886 = G__37887;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);\nreturn re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);\n});\n\n(re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic = (function (f,out_path,in_paths){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"on-changes\",\"on-changes\",1345912602),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$on_change_after(context){\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar old_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar new_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__37775_SHARP_){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(new_db,p1__37775_SHARP_);\n}),in_paths);\nvar old_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__37776_SHARP_){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(old_db,p1__37776_SHARP_);\n}),in_paths);\nvar changed_ins_QMARK_ = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?cljs.core.some(cljs.core.false_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.identical_QMARK_,new_ins,old_ins)):false);\nif(cljs.core.truth_(changed_ins_QMARK_)){\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(new_db,out_path,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,new_ins)));\n} else {\nreturn context;\n}\n})], 0));\n}));\n\n(re_frame.std_interceptors.on_changes.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(re_frame.std_interceptors.on_changes.cljs$lang$applyTo = (function (seq37777){\nvar G__37778 = cljs.core.first(seq37777);\nvar seq37777__$1 = cljs.core.next(seq37777);\nvar G__37779 = cljs.core.first(seq37777__$1);\nvar seq37777__$2 = cljs.core.next(seq37777__$1);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__37778,G__37779,seq37777__$2);\n}));\n\n/**\n * An interceptor which adds registered global interceptors to the context's queue.\n * \n * NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\n */\nre_frame.std_interceptors.inject_global_interceptors = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"inject-global-interceptors\",\"inject-global-interceptors\",-2144129737),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$inject_global_interceptors_before(context){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),(function (p1__37789_SHARP_){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(re_frame.settings.get_global_interceptors(),p1__37789_SHARP_);\n}));\n})], 0));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","contains re-frame supplied, standard interceptors","~:file","re_frame/std_interceptors.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",30],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.std-interceptors","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^T","~$data","~$clojure.data","~$re-frame.trace","^W","~$re-frame.settings","^X","~$cljs.core","^Y","~$interceptor","^T","~$goog","^[","~$trace","^W","~$re-frame.utils","^11","~$settings","^X","~$re-frame.loggers","^13","~$utils","^11","^S","^S","^V","^V","~$re-frame.db","^15"],"~:seen",["^K",["~:require"]],"~:uses",["^ ","~$->interceptor","^T","~$get-effect","^T","~$get-coeffect","^T","~$assoc-coeffect","^T","~$assoc-effect","^T","~$update-coeffect","^T","~$console","^13","~$app-db","^15"],"~:require-macros",["^ ","^W","^W","^10","^W","^Y","^Y"],"~:form",["~#list",["~$ns","^M","contains re-frame supplied, standard interceptors",["^1C",["^17",["^T","~:refer",["^19","^1:","^1;","^1<","^1=","^1>"]],["^13","^1E",["^1?"]],["^X","~:as","^12"],["^15","^1E",["^1@"]],["^V","^1F","^U"],["^S","^1F","^R"],["^11","^1F","^14"],["^W","^1F","^10","~:include-macros",true],["^T","^1F","^Z"]]]]],"~:flags",["^ ","^17",["^K",[]]],"~:js-deps",["^ "],"~:deps",["^[","^Y","^T","^13","^X","^15","^V","^S","^11","^W"]],"^O","^M","~:resource-id",["~:shadow.build.classpath/resource","re_frame/std_interceptors.cljc"],"~:compiled-at",1612899935861,"~:resource-name","re_frame/std_interceptors.cljc","~:warnings",[],"~:source","(ns re-frame.std-interceptors\n  \"contains re-frame supplied, standard interceptors\"\n  (:require\n    [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect update-coeffect]]\n    [re-frame.loggers :refer [console]]\n    [re-frame.settings :as settings]\n    [re-frame.db :refer [app-db]]\n    [clojure.data :as data]\n    [re-frame.cofx :as cofx]\n    [re-frame.utils :as utils]\n    [re-frame.trace :as trace :include-macros true]\n    [re-frame.interceptor :as interceptor]))\n\n\n(def debug\n  (->interceptor\n    :id     :debug\n    :before (fn debug-before\n              [context]\n              (console :log \"Handling re-frame event:\" (get-coeffect context :event))\n              context)\n    :after  (fn debug-after\n              [context]\n              (let [event   (get-coeffect context :event)\n                    orig-db (get-coeffect context :db)\n                    new-db  (get-effect   context :db ::not-found)]\n                (if (= new-db ::not-found)\n                  (console :log \"No app-db changes in:\" event)\n                  (let [[only-before only-after] (data/diff orig-db new-db)\n                        db-changed?    (or (some? only-before) (some? only-after))]\n                    (if db-changed?\n                      (do (console :group \"db clojure.data/diff for:\" event)\n                          (console :log \"only before:\" only-before)\n                          (console :log \"only after :\" only-after)\n                          (console :groupEnd))\n                      (console :log \"No app-db changes resulted from:\" event))))\n                context))))\n\n\n(def trim-v\n  (->interceptor\n    :id      :trim-v\n    :before  (fn trimv-before\n               [context]\n               (-> context\n                   (update-coeffect :event subvec 1)\n                   (assoc-coeffect ::untrimmed-event (get-coeffect context :event))))\n    :after   (fn trimv-after\n               [context]\n               (-> context\n                   (utils/dissoc-in [:coeffects ::untrimmed-event])\n                   (assoc-coeffect :event (get-coeffect context ::untrimmed-event))))))\n\n\n;; -- Interceptor Factories - PART 1 ---------------------------------------------------------------\n;;\n;; These 3 factories wrap the 3 kinds of event handlers.\n;;\n\n(defn db-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`\"\n  [handler-fn]\n  (->interceptor\n    :id     :db-handler\n    :before (fn db-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :event)}\n                      (let [{:keys [db event]} (get-coeffect context)]\n                        (->> (handler-fn db event)\n                             (assoc-effect context :db))))]\n                ;; We merge these tags outside of the :event/handler trace because we want them to be assigned to the parent\n                ;; wrapping trace.\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n(defn fx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`\"\n  [handler-fn]\n(->interceptor\n  :id     :fx-handler\n  :before (fn fx-handler-before\n            [context]\n            (let [new-context\n                  (trace/with-trace\n                    {:op-type   :event/handler\n                     :operation (get-coeffect context :event)}\n                    (let [{:keys [event] :as coeffects} (get-coeffect context)]\n                      (->> (handler-fn coeffects event)\n                           (assoc context :effects))))]\n              (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n              new-context))))\n\n\n(defn ctx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))\"\n  [handler-fn]\n  (->interceptor\n    :id     :ctx-handler\n    :before (fn ctx-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :event)}\n                      (handler-fn context))]\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n;; -- Interceptors Factories -  PART 2 ------------------------------------------------------------\n\n\n(defn path\n  [& args]\n  (let [path (flatten args)\n        db-store-key :re-frame-path/db-store]    ;; this is where, within `context`, we store the original dbs\n    (when (empty? path)\n      (console :error \"re-frame: \\\"path\\\" interceptor given no params\"))\n    (->interceptor\n      :id      :path\n      :before  (fn\n                 [context]\n                 (let [original-db (get-coeffect context :db)]\n                   (-> context\n                       (update db-store-key conj original-db)\n                       (assoc-coeffect :db (get-in original-db path)))))\n      :after   (fn [context]\n                 (let [db-store     (db-store-key context)\n                       original-db  (peek db-store)\n                       new-db-store (pop db-store)\n                       context'     (-> (assoc context db-store-key new-db-store)\n                                        (assoc-coeffect :db original-db))     ;; put the original db back so that things like debug work later on\n                       db           (get-effect context :db ::not-found)]\n                   (if (= db ::not-found)\n                     context'\n                     (->> (assoc-in original-db path db)\n                          (assoc-effect context' :db))))))))\n\n\n\n\n(defn enrich\n  [f]\n  (->interceptor\n    :id :enrich\n    :after (fn enrich-after\n             [context]\n             (let [event (get-coeffect context :event)\n                   db    (if (contains? (get-effect context) :db)\n                           (get-effect context :db) ;; If no db effect is returned, we provide the original coeffect.\n                           (get-coeffect context :db))]\n               (->> (f db event)\n                    (assoc-effect context :db))))))\n\n\n\n(defn after\n  [f]\n  (->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (get-effect context) :db)\n                           (get-effect context :db)\n                           (get-coeffect context :db))\n                   event (get-coeffect context :event)]\n               (f db event) ;; call f for side effects\n               context)))) ;; context is unchanged\n\n(defn  on-changes\n  [f out-path & in-paths]\n  (->interceptor\n    :id    :on-changes\n    :after (fn on-change-after\n             [context]\n             (let [new-db   (get-effect context :db)\n                   old-db   (get-coeffect context :db)\n\n                   ;; work out if any \"inputs\" have changed\n                   new-ins      (map #(get-in new-db %) in-paths)\n                   old-ins      (map #(get-in old-db %) in-paths)\n                   ;; make sure the db is actually set in the effect\n                   changed-ins? (and (contains? (get-effect context) :db)\n                                     (some false? (map identical? new-ins old-ins)))]\n\n               ;; if one of the inputs has changed, then run 'f'\n               (if changed-ins?\n                 (->> (apply f new-ins)\n                      (assoc-in new-db out-path)\n                      (assoc-effect context :db))\n                 context)))))\n\n\n(def inject-global-interceptors\n  \"An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\"\n  (->interceptor\n    :id     :inject-global-interceptors\n    :before (fn inject-global-interceptors-before\n              [context]\n              (update context :queue #(into (settings/get-global-interceptors) %)))))\n","~:reader-features",["^K",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.std-interceptors/debug","re_frame.interceptor.__GT_interceptor","context","re_frame.loggers.console","re_frame.interceptor.get_coeffect","event","orig-db","new-db","re_frame.interceptor.get_effect","cljs.core._EQ_","vec__37688","cljs.core.nth","only-before","only-after","clojure.data/diff","db-changed?","re-frame.loggers/console","re-frame.std-interceptors/trim-v","re_frame.interceptor.update_coeffect","cljs.core/subvec","re-frame.interceptor/assoc-coeffect","re-frame.utils/dissoc-in","re-frame.std-interceptors/db-handler->interceptor","handler-fn","new-context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__37704","re-frame.trace/*current-trace*","*current-trace*-temp-val__37705","re-frame.trace/start-trace","end__37421__auto__","re-frame.interop/now","duration__37422__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","map__37710","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__37715","db","re-frame.interceptor/assoc-effect","new-trace__37423__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.std-interceptors/fx-handler->interceptor","*current-trace*-orig-val__37723","*current-trace*-temp-val__37724","map__37745","map__37747","coeffects","re-frame.std-interceptors/ctx-handler->interceptor","*current-trace*-orig-val__37749","*current-trace*-temp-val__37750","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-frame.std-interceptors/path","seq37758","self__4724__auto__","cljs.core/seq","args","path","cljs.core/flatten","db-store-key","cljs.core/empty?","original-db","cljs.core.get_in","db-store","cljs.core/peek","new-db-store","cljs.core/pop","context'","cljs.core/assoc-in","re-frame.std-interceptors/enrich","f","cljs.core/contains?","re-frame.std-interceptors/after","re-frame.std-interceptors/on-changes","seq37777","G__37778","cljs.core/first","cljs.core/next","G__37779","self__4723__auto__","out-path","in-paths","old-db","new-ins","p1__37775#","cljs.core.map","old-ins","p1__37776#","changed-ins?","cljs.core/some","cljs.core/false?","cljs.core/identical?","re-frame.std-interceptors/inject-global-interceptors","p1__37789#","cljs.core.into","re-frame.settings/get-global-interceptors"]],"~:used-vars",["^K",["~$cljs.core/=","~$re-frame.std-interceptors/debug","~$re-frame.interceptor/->interceptor","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.loggers/console","~$re-frame.std-interceptors/inject-global-interceptors","~$re-frame.std-interceptors/trim-v","~$cljs.core/empty?","~$re-frame.std-interceptors/db-handler->interceptor","~$cljs.core/into","~$cljs.core/conj","~$cljs.core/update","~$re-frame.utils/dissoc-in","~$cljs.core/get-in","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$re-frame.std-interceptors/enrich","~$re-frame.std-interceptors/ctx-handler->interceptor","~$re-frame.interceptor/assoc-coeffect","~$re-frame.std-interceptors/fx-handler->interceptor","~$cljs.core/subvec","~$re-frame.trace/*current-trace*","~$re-frame.std-interceptors/after","~$re-frame.settings/get-global-interceptors","~$re-frame.interceptor/get-coeffect","~$re-frame.interceptor/assoc-effect","~$cljs.core/assoc-in","~$re-frame.std-interceptors/path","~$re-frame.std-interceptors/on-changes"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","dc3011a0ee823c91a565237d17cbc3c0856de8a6","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^K",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1L","reagent/impl/batching.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","~$reagent.debug","~$reagent.impl.util"]]],["^1L","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","~$goog.dom.HtmlElement"]]],["^1L","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","~$goog.labs.userAgent.util","~$goog.string"]]],["^1L","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","~$goog.array","~$goog.asserts"]]],["^1L","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^1L","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1L","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Y","^2W","~$goog.object","~$goog.string.internal"]]],["^1L","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Z","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^32"]]],["^1L","re_frame/loggers.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","~$clojure.set"]]],["^1L","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Z"]]],["^2L","node_modules/prop-types/checkPropTypes.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","3180f5f58c360a2e36c5ff354213b3ff22f43d1b","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^2Q","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1L","reagent/impl/util.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","~$clojure.string"]]],["^1L","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2W","~$goog.reflect","^2X"]]],["^1L","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^1L","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Z","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2[","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1L","re_frame/registrar.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","~$re-frame.interop","^13","^X"]]],["^1L","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^30"]]],["^1L","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^2L","node_modules/scheduler/cjs/scheduler.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","7d8513ea2b82a7b8f00a1fd322704005205046bc","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^2Q"]]],["^1L","reagent/ratom.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","^2U","^2T","~$reagent.impl.batching","^39","^31"]]],["^2L","node_modules/scheduler/cjs/scheduler.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","19e07f39891e78ec50904d00e33146e92404379f","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^2Q"]]],["^1L","re_frame/interop.cljs"],["0e1666916193eaabc7012c4a18450a0d00336095","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1L","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","~$goog.disposable.IDisposable"]]],["^1L","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^2L","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","d9f1d6c2a711a6903adf603db43d9f9e19057146","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^2Q"]]],["^2L","node_modules/react/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^2Q","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1L","shadow/js.js"],["5d2e4e955ab1a108e2ebc0c9b87ba78f8be4edbc","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^1L","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^1L","reagent/impl/template.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","^B","^3;","~$clojure.walk","^2U","~$reagent.impl.component","^3E","^3I","^2T","^31"]]],["^1L","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Z"]]],["^2L","node_modules/react-dom/cjs/react-dom.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","d5ed1c931c99ccc1a772592a9e96c018d814f7fd","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^2Q","^B","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1600470677000,1600470677000,1593530297000],["^2L","node_modules/react/cjs/react.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","0c9d0acaa1ab1e24333c71607d0fa0609193e7d7","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^2Q","^3O","~$module$node_modules$prop_types$checkPropTypes"]]],["^1L","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Z","^3?"]]],["^1L","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","~$goog.events.ListenableKey"]]],["^1L","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Z","~$goog.html.trustedtypes","^35","^36","^37","^38"]]],["^1L","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Y","~$goog.events.Listener","^31"]]],["^1L","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^1L","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^2L","node_modules/scheduler/cjs/scheduler-tracing.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","0b00a799c88b303e4c3e8fe2628f7bde50128f0d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^2Q"]]],["^1L","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^1L","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Y","^2Z","~$goog.html.SafeUrl","^37","^38","^32"]]],["^1L","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Z","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^3V","^34","~$goog.html.uncheckedconversions","^37","^32"]]],["^1L","reagent/impl/component.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","^31","^B","^2U","^3E","^3I","^2T"]]],["^1L","clojure/walk.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y"]]],["^1L","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1L","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Y","^2Z","~$goog.dom.TagName","~$goog.dom.tags","^3Z","^3[","~$goog.html.SafeStyleSheet","^3V","^34","^3T","^35","^36","^3<","^31","^37","^38","^32"]]],["^1L","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^31"]]],["^1L","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^2L","node_modules/scheduler/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","408126fc2241739168bcaf5965ae56a7df143144","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^2Q","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1L","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Y","^2W","^2X"]]],["^1L","re_frame/settings.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","^3D","^13"]]],["^1L","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Y","^2Z","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^43","~$goog.dom.safe","^3Y","^40","~$goog.math.Coordinate","~$goog.math.Size","^31","^2X","~$goog.string.Unicode","^30"]]],["^1L","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","~$goog.debug.Error","^49"]]],["^1L","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Y","^2Z","^2X","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1L","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^2L","node_modules/object-assign/index.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","519ffd5a4c91b67302cc9947b794966d629860cd","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^2Q"]]],["^1L","re_frame/db.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","^3D"]]],["^1L","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^1L","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^1L","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",[]]],["^1L","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Y","^31"]]],["^1L","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","^2X","~$goog.string.StringBuffer"]]],["^1L","re_frame/cofx.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","^15","^T","~$re-frame.registrar","^13"]]],["^2L","node_modules/react/cjs/react.production.min.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","a25ef7d1b1992294ca65e96d70e1be7f70977b13","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^2Q","^3O"]]],["^1L","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Z"]]],["^1L","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^4:","^40","^37","^32"]]],["^1L","re_frame/interceptor.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","^13","^3D","^W","^39"]]],["^1L","clojure/data.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","^39"]]],["^1L","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^1L","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^32"]]],["^1L","reagent/core.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","^B","~$reagent.impl.template","^3N","^2U","^3E","^3I","^2T","~$reagent.dom"]]],["^1L","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Y","~$goog.debug.errorcontext","^30"]]],["^1L","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^1L","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","~$goog.math"]]],["^1L","re_frame/std_interceptors.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","^T","^13","^X","^15","^V","^S","^11","^W"]]],["^1L","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^1L","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Y","^2Z","^3X","^4I"]]],["^1L","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^3@","~$goog.dom","^43","^4:","^3X","^3Y","^34","^3<","^3=","^37"]]],["^1L","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Z","^3Y","^3Z","^3[","^45","^3V","^34","^37","^32"]]],["^1L","re_frame/utils.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","^13"]]],["^1L","reagent/dom.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","^D","^2U","^4F","^3E","^3I"]]],["^2L","node_modules/prop-types/lib/ReactPropTypesSecret.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","4eec230c5b56ef580ea9c3e7ae6358ba1f8bdbec","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^2Q"]]],["^1L","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","~$goog.Disposable","~$goog.events.EventId"]]],["^1L","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^["]]],["^1L","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","~$goog.math.Long","~$goog.math.Integer","^2X","^31","^2Y","~$goog.Uri","^4D"]]],["^1L","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Z","^3T","^37","^38"]]],["^1L","reagent/debug.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y"]]],["^1L","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Y","^2Z","^3[","^31","^37","^38","^32"]]],["^1L","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","~$goog.debug","^2[","~$goog.events.Event","~$goog.events.EventType","^3?","^30"]]],["^1L","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^3?"]]],["^1L","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^30"]]],["^2L","node_modules/scheduler/tracing.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","4a7a89de5eaa5548bfc85da9e5243b3c7e444a34","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^2Q","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^2L","node_modules/react-dom/cjs/react-dom.development.js"],["42468ad1f4c2050927ea1a8e0a075a1c29678378","f2fbccf6e656451ce34a93ff0fea3e3187aa4ad8","19dc160595b3eb8999f04fe10db88fd747daa853","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^2Q","^B","^3O","^3P","^3R","~$module$node_modules$scheduler$tracing"]]],["^1L","clojure/set.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y"]]],["^1L","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Y","^2Z","^2X"]]],["^1L","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^2Z","^38"]]],["^1L","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^4L"]]],["^1L","re_frame/trace.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2M",["^ ","^2N",null,"^2O",["^K",[]],"^2P",["^[","^Y","^3D","^13","^3X"]]]]],"~:clj-info",["^ ","jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/interop.clj",1592409480000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1566593954000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/re-frame/re-frame/1.1.1/re-frame-1.1.1.jar!/re_frame/interop.clj",1600471688000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/debug.clj",1592409480000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/core.clj",1592409480000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1600470675000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/re-frame/re-frame/1.1.1/re-frame-1.1.1.jar!/re_frame/trace.cljc",1600471688000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1566593952000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1593530297000,"jar:file:/Users/Rohan%20Mehta/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/ratom.clj",1592409480000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","contains re-frame supplied, standard interceptors","^7","re_frame/std_interceptors.cljc","^8",1,"^9",5,"^:",1,"^;",30],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",null,"^J",["^K",[]],"^L","^M","^P",null,"^Q",["^ ","^R","^S","^T","^T","^U","^V","^W","^W","^X","^X","^Y","^Y","^Z","^T","^[","^[","^10","^W","^11","^11","^12","^X","^13","^13","^14","^11","^S","^S","^V","^V","^15","^15"],"^16",["^K",["^17"]],"^18",["^ ","^19","^T","^1:","^T","^1;","^T","^1<","^T","^1=","^T","^1>","^T","^1?","^13","^1@","^15"],"~:defs",["^ ","~$on-changes",["^ ","~:protocol-inline",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",206,"^9",8,"^:",206,"^;",18,"~:arglists",["^1C",["~$quote",["^1C",[["~$f","~$out-path","~$&","~$in-paths"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^1C",["~$f","^5P","^5Q"]]],"^5N",["^1C",[["~$f","^5P","~$&","^5Q"]]],"~:arglists-meta",["^1C",[null]]]],"^L","^2I","^7","re_frame/std_interceptors.cljc","^;",18,"^5R",["^ ","^5S",true,"^5T",2,"^5U",2,"^5V",[["^1C",["~$f","^5P","^5Q"]]],"^5N",["^1C",[["~$f","^5P","~$&","^5Q"]]],"^5W",["^1C",[null]]],"^5V",[["^1C",["~$f","^5P","^5Q"]]],"~:protocol-impl",null,"^5T",2,"^5W",["^1C",[null]],"^9",1,"^5S",true,"~:methods",[["^ ","^5T",2,"^5S",true,"~:tag","~$cljs.core/IMap"]],"^8",206,"~:ret-tag","~$any","^:",206,"^5U",2,"~:fn-var",true,"^5N",["^1C",[["~$f","^5P","~$&","^5Q"]]]],"~$enrich",["^ ","^5M",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",178,"^9",7,"^:",178,"^;",13,"^5N",["^1C",["^5O",["^1C",[["~$f"]]]]]],"^L","^2=","^7","re_frame/std_interceptors.cljc","^;",13,"^5V",["^1C",[["~$f"]]],"^5X",null,"^5W",["^1C",[null,null]],"^9",1,"^5S",false,"^8",178,"^60","^5[","^:",178,"^5U",1,"^62",true,"^5N",["^1C",["^5O",["^1C",[["~$f"]]]]]],"~$path",["^ ","^5M",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",149,"^9",7,"^:",149,"^;",11,"^5N",["^1C",["^5O",["^1C",[["~$&","~$args"]]]]],"^5R",["^ ","^5S",true,"^5T",0,"^5U",0,"^5V",[["^1C",["^65"]]],"^5N",["^1C",[["~$&","^65"]]],"^5W",["^1C",[null]]]],"^L","^2H","^7","re_frame/std_interceptors.cljc","^;",11,"^5R",["^ ","^5S",true,"^5T",0,"^5U",0,"^5V",[["^1C",["^65"]]],"^5N",["^1C",[["~$&","^65"]]],"^5W",["^1C",[null]]],"^5V",[["^1C",["^65"]]],"^5X",null,"^5T",0,"^5W",["^1C",[null]],"^9",1,"^5S",true,"^5Y",[["^ ","^5T",0,"^5S",true,"^5Z","^5["]],"^8",149,"^60","^61","^:",149,"^5U",0,"^62",true,"^5N",["^1C",[["~$&","^65"]]]],"~$ctx-handler->interceptor",["^ ","^5M",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",123,"^9",7,"^:",123,"^;",31,"^5N",["^1C",["^5O",["^1C",[["~$handler-fn"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"^L","^2>","^7","re_frame/std_interceptors.cljc","^;",31,"^5V",["^1C",[["^67"]]],"^5X",null,"^5W",["^1C",[null,null]],"^9",1,"^5S",false,"^8",123,"^60","^5[","^:",123,"^5U",1,"^62",true,"^5N",["^1C",["^5O",["^1C",[["^67"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"~$debug",["^ ","^L","^1Y","^7","re_frame/std_interceptors.cljc","^8",15,"^9",1,"^:",15,"^;",11,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",15,"^9",6,"^:",15,"^;",11],"^5Z","^5["],"~$trim-v",["^ ","^L","^23","^7","re_frame/std_interceptors.cljc","^8",40,"^9",1,"^:",40,"^;",12,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",40,"^9",6,"^:",40,"^;",12],"^5Z","^5["],"~$after",["^ ","^5M",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",193,"^9",7,"^:",193,"^;",12,"^5N",["^1C",["^5O",["^1C",[["~$f"]]]]]],"^L","^2C","^7","re_frame/std_interceptors.cljc","^;",12,"^5V",["^1C",[["~$f"]]],"^5X",null,"^5W",["^1C",[null,null]],"^9",1,"^5S",false,"^8",193,"^60","^5[","^:",193,"^5U",1,"^62",true,"^5N",["^1C",["^5O",["^1C",[["~$f"]]]]]],"~$fx-handler->interceptor",["^ ","^5M",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",92,"^9",7,"^:",92,"^;",30,"^5N",["^1C",["^5O",["^1C",[["^67"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"^L","^2@","^7","re_frame/std_interceptors.cljc","^;",30,"^5V",["^1C",[["^67"]]],"^5X",null,"^5W",["^1C",[null,null]],"^9",1,"^5S",false,"^8",92,"^60","^5[","^:",92,"^5U",1,"^62",true,"^5N",["^1C",["^5O",["^1C",[["^67"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"~$db-handler->interceptor",["^ ","^5M",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",60,"^9",7,"^:",60,"^;",30,"^5N",["^1C",["^5O",["^1C",[["^67"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"^L","^25","^7","re_frame/std_interceptors.cljc","^;",30,"^5V",["^1C",[["^67"]]],"^5X",null,"^5W",["^1C",[null,null]],"^9",1,"^5S",false,"^8",60,"^60","^5[","^:",60,"^5U",1,"^62",true,"^5N",["^1C",["^5O",["^1C",[["^67"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"~$inject-global-interceptors",["^ ","^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",230,"^9",6,"^:",230,"^;",32],"^L","^22","^7","re_frame/std_interceptors.cljc","^;",32,"^9",1,"^8",230,"^:",230,"^5Z","^5[","^6","An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector."]],"^1A",["^ ","^W","^W","^10","^W","^Y","^Y"],"~:cljs.analyzer/constants",["^ ","^16",["^K",["~:path","~:tags","~:group","~:db","~:fx-handler","~:re-frame.std-interceptors/not-found","~:queue","~:operation","~:start","~:duration","~:debug","~:trim-v","~:event/handler","~:db-handler","~:event","~:after","~:id","~:effects","~:inject-global-interceptors","~:error","~:coeffects","~:re-frame-path/db-store","~:end","~:on-changes","~:groupEnd","~:ctx-handler","~:enrich","~:before","~:op-type","~:log","~:re-frame.std-interceptors/untrimmed-event"]],"~:order",["^6O","^6I","^6Z","^70","^6M","^6N","^6B","^6D","^6A","^6W","^6J","^71","^6S","^6L","^6[","^6F","^6K","^6G","^6H","^6U","^6@","^6P","^6C","^6X","^6T","^6R","^6?","^6Y","^6V","^6Q","^6E"]],"^1H",["^ ","^17",["^K",[]]],"^1I",["^ "],"^1J",["^[","^Y","^T","^13","^X","^15","^V","^S","^11","^W"]],"^O","^M","~:ns-specs",["^ "],"~:ns-spec-vars",["^K",[]],"~:compiler-options",["^2K",[["^75","~:static-fns"],true,["^75","~:shadow-tweaks"],null,["^75","~:source-map-inline"],null,["^75","~:elide-asserts"],false,["^75","~:optimize-constants"],null,["^75","^1O"],null,["^75","~:external-config"],null,["^75","~:tooling-config"],null,["^75","~:emit-constants"],null,["^75","~:load-tests"],null,["^75","~:form-size-threshold"],null,["^75","~:data-readers"],null,["^75","~:infer-externs"],"~:auto",["^75","^1Q"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^75","~:fn-invoke-direct"],null,["^75","~:source-map"],"/dev/null"]]]