["^ ","~:foreign-libs",[],"~:externs",[],"~:resources",[["^ ","~:js-str-offsets",[],"~:classpath",true,"~:js-esm",false,"~:cache-key",["d14a54800f7309b0f5efeee8f32d9a9730407fd0"],"~:js-imports",[],"~:js-invalid-requires",[],"~:goog-provides",[],"~:js-language","es3","~:goog-module",null,"~:ns","~$module$delayed_scroll_restoration_polyfill$index","~:output-name","module$delayed_scroll_restoration_polyfill$index.js","~:resource-id",["~:shadow.build.classpath/resource","delayed-scroll-restoration-polyfill/index.js"],"~:resource-name","delayed-scroll-restoration-polyfill/index.js","~:type","~:js","~:js-requires",[],"~:source","/* @preserve\n *\n * delayed-scroll-restoration-polyfill 0.1.0\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2013-2017 Petka Antonov\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\nif (window.history.pushState) {\n\n    // Calculating width of browser's scrollbar\n    var getScrollbarWidth = function getScrollbarWidth() {\n        var outer = document.createElement(\"div\");\n        outer.style.visibility = \"hidden\";\n        outer.style.width = \"100px\";\n        outer.style.msOverflowStyle = \"scrollbar\";\n\n        document.body.appendChild(outer);\n\n        var widthNoScroll = outer.offsetWidth;\n        // force scrollbars\n        outer.style.overflow = \"scroll\";\n\n        // add innerdiv\n        var inner = document.createElement(\"div\");\n        inner.style.width = \"100%\";\n        outer.appendChild(inner);\n\n        var widthWithScroll = inner.offsetWidth;\n\n        // remove divs\n        outer.parentNode.removeChild(outer);\n\n        return widthNoScroll - widthWithScroll;\n    };\n\n    var SCROLL_RESTORATION_TIMEOUT_MS = 3000;\n    var TRY_TO_SCROLL_INTERVAL_MS = 50;\n\n    var originalPushState = window.history.pushState;\n    var originalReplaceState = window.history.replaceState;\n\n    // Store current scroll position in current state when navigating away.\n    window.history.pushState = function () {\n        var newStateOfCurrentPage = Object.assign({}, window.history.state, {\n            __scrollX: window.scrollX,\n            __scrollY: window.scrollY\n        });\n        originalReplaceState.call(window.history, newStateOfCurrentPage, '');\n\n        originalPushState.apply(window.history, arguments);\n    };\n\n    // Make sure we don't throw away scroll position when calling \"replaceState\".\n    window.history.replaceState = function (state) {\n        var newState = Object.assign({}, {\n            __scrollX: window.history.state && window.history.state.__scrollX,\n            __scrollY: window.history.state && window.history.state.__scrollY\n        }, state);\n\n        for (var _len = arguments.length, otherArgs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            otherArgs[_key - 1] = arguments[_key];\n        }\n\n        originalReplaceState.apply(window.history, [newState].concat(otherArgs));\n    };\n\n    var timeoutHandle = null;\n    var scrollBarWidth = null;\n\n    // Try to scroll to the scrollTarget, but only if we can actually scroll\n    // there. Otherwise keep trying until we time out, then scroll as far as\n    // we can.\n    var tryToScrollTo = function tryToScrollTo(scrollTarget) {\n        // Stop any previous calls to \"tryToScrollTo\".\n        clearTimeout(timeoutHandle);\n\n        var body = document.body;\n        var html = document.documentElement;\n        if (!scrollBarWidth) {\n            scrollBarWidth = getScrollbarWidth();\n        }\n\n        // From http://stackoverflow.com/a/1147768\n        var documentWidth = Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);\n        var documentHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n\n        if (documentWidth + scrollBarWidth - window.innerWidth >= scrollTarget.x && documentHeight + scrollBarWidth - window.innerHeight >= scrollTarget.y || Date.now() > scrollTarget.latestTimeToTry) {\n            window.scrollTo(scrollTarget.x, scrollTarget.y);\n        } else {\n            timeoutHandle = setTimeout(function () {\n                return tryToScrollTo(scrollTarget);\n            }, TRY_TO_SCROLL_INTERVAL_MS);\n        }\n    };\n\n    // Try scrolling to the previous scroll position on popstate\n    var onPopState = function onPopState() {\n        var state = window.history.state;\n\n        if (state && Number.isFinite(state.__scrollX) && Number.isFinite(state.__scrollY)) {\n            setTimeout(function () {\n                return tryToScrollTo({\n                    x: state.__scrollX,\n                    y: state.__scrollY,\n                    latestTimeToTry: Date.now() + SCROLL_RESTORATION_TIMEOUT_MS\n                });\n            });\n        }\n    };\n\n    window.addEventListener('popstate', onPopState, true);\n}","~:last-modified",1598711653603,"~:requires",["~#set",[]],"~:pom-info",["^ ","~:group-id","~$kee-frame","~:artifact-id","^K","~:version","0.4.0","~:name","kee-frame","~:description","A micro-framework on top of re-frame","~:url","https://github.com/ingesolvoll/kee-frame","~:id","^K","~:coordinate",["^K","0.4.0"]],"~:goog-requires",[],"~:inspect-info",["^ ","^3",[],"^5",false,"^7",[],"^8",[],"^9",[],"^:","es3","^;",null,"^D",[],"^S",[],"~:uses-global-buffer",false,"~:uses-global-process",false],"^P",["~#url","jar:file:/Users/Rohan Mehta/.m2/repository/kee-frame/kee-frame/0.4.0/kee-frame-0.4.0.jar!/delayed-scroll-restoration-polyfill/index.js"],"~:provides",["^H",["^="]],"^U",false,"~:from-jar",true,"~:deps",[],"^V",false]],"~:data-readers",null,"~:shadow.build.classpath/CACHE-TIMESTAMP",1600470677000]