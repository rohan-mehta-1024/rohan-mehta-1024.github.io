{"version":3,"sources":["breaking_point/core.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx","p__38582","vec__38583","cljs.core.nth","map__38586","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","_","breakpoints","debounce-ms","opts","re-frame.core/reg-cofx","coeffect","screen-width","or__4126__auto__","G__38589","js/window","G__38591","js/document","G__38592","screen-height","G__38594","G__38596","G__38597","cljs.core.assoc","p__38598","map__38599","breaking-point.core/set-screen-dimensions","db","cljs.core/assoc-in","re_frame.core.inject_cofx","p__38601","vec__38602","breaking-point.core/get-screen-width","cljs.core.get_in","breaking-point.core/get-screen-height","breaking-point.core/->get-screen","cljs.core.reduce","p__38605","vec__38606","prev-breakpoint","screen-key","breakpoint","cljs.core/reduced","cljs.core.partition_all","p__38610","vec__38611","breaking-point.core/get-orientation","breaking-point.core/register-subs","re_frame.core.reg_sub","orientation","cljs.core._EQ_","screen-keys","G__38614","cljs.core.map_indexed","cljs.core/vector","cljs.core.filter","p__38615","vec__38616","i","k","cljs.core/even?","cljs.core.mapv","cljs.core/second","seq__38620","cljs.core/seq","chunk__38621","count__38622","i__38623","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core.keyword","cljs.core/name","screen","p__38625","map__38626","breaking-point.core/set-breakpoints","re-frame.core/dispatch","re-frame.core/reg-fx"],"sourcesContent":["(ns breaking-point.core\n  (:require\n   [re-frame.core :as rf]\n   [re-frame-fx.dispatch]\n   ))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; PUBLIC API\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(rf/reg-event-fx\n ::set-breakpoints\n (fn [_ [_ {:keys [breakpoints ;; required\n                   debounce-ms ;; optional\n                   ]\n            :as   opts}]]\n   {::set-breakpoints opts}))\n\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Implementation\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; COFX\n\n(rf/reg-cofx\n ::screen-dimensions\n (fn [coeffect]\n   (let [screen-width  (or (some-> js/window\n                                   .-innerWidth)\n                           (some-> js/document\n                                   .-documentElement\n                                   .-clientWidth)\n                           (some-> js/document\n                                   .-body\n                                   .-clientWidth))\n         screen-height (or (some-> js/window\n                                   .-innerHeight)\n                           (some-> js/document\n                                   .-documentElement\n                                   .-clientHeight)\n                           (some-> js/document\n                                   .-body\n                                   .-clientHeight))]\n     (assoc coeffect\n            :screen-width screen-width\n            :screen-height screen-height))))\n\n\n;; Events\n\n(defn set-screen-dimensions\n  [{:keys [db\n           screen-width\n           screen-height]} _]\n  {:db (-> db\n           (assoc-in [::breakpoints :screen-width] screen-width)\n           (assoc-in [::breakpoints :screen-height] screen-height))})\n\n(rf/reg-event-fx ::set-screen-dimensions\n                 [(rf/inject-cofx ::screen-dimensions)]\n                 set-screen-dimensions)\n\n(rf/reg-event-fx ::set-screen-dimensions-debounced\n                 (fn [_ [_ debounce-ms]]\n                   {:dispatch-debounce [{:id      ::calcaulate-width-after-resize\n                                         :timeout debounce-ms\n                                         :action  :dispatch\n                                         :event   [::set-screen-dimensions]}]}))\n\n\n;; Subs\n\n(defn get-screen-width [db _]\n  (get-in db [::breakpoints :screen-width]))\n\n(defn get-screen-height [db _]\n  (get-in db [::breakpoints :screen-height]))\n\n\n(defn ->get-screen [breakpoints]\n  (fn get-screen\n    [screen-width _]\n    (when screen-width\n      (reduce\n       (fn [prev-breakpoint [screen-key breakpoint]]\n         (if (or (nil? breakpoint)\n                 (and (< screen-width breakpoint)\n                      (>= screen-width prev-breakpoint)))\n           (reduced screen-key)\n           breakpoint))\n       0\n       (partition-all 2 breakpoints)))))\n\n\n(defn get-orientation\n  [[screen-width\n    screen-height] _]\n  (if (> screen-height\n         screen-width)\n    :portrait\n    :landscape))\n\n\n(defn register-subs [breakpoints]\n  (rf/reg-sub ::screen-width get-screen-width)\n  (rf/reg-sub ::screen-height get-screen-height)\n\n  (rf/reg-sub ::screen\n              :<- [::screen-width]\n              (->get-screen breakpoints))\n\n  (rf/reg-sub ::orientation\n              :<- [::screen-width]\n              :<- [::screen-height]\n              get-orientation)\n\n  (rf/reg-sub ::portrait?\n              :<- [::orientation]\n              (fn [orientation _]\n                (= orientation :portrait)))\n\n  (rf/reg-sub ::landscape?\n              :<- [::orientation]\n              (fn [orientation _]\n                (= orientation :landscape)))\n\n  (let [screen-keys (some->> breakpoints\n                             (map-indexed vector)\n                             (filter (fn [[i k]]\n                                       (even? i)))\n                             (mapv second))]\n    (doseq [screen-key screen-keys]\n      (rf/reg-sub (keyword \"breaking-point.core\"\n                           (str (name screen-key) \"?\"))\n                  :<- [::screen]\n                  (fn [screen _]\n                    (= screen\n                       screen-key))))))\n\n\n;; FX\n\n(defn set-breakpoints [{:keys [breakpoints\n                               debounce-ms]\n                        :as   opts}]\n  (register-subs breakpoints)\n  (rf/dispatch [::set-screen-dimensions])\n  (.addEventListener js/window \"resize\"\n                     #(if debounce-ms\n                        (rf/dispatch [::set-screen-dimensions-debounced debounce-ms])\n                        (rf/dispatch [::set-screen-dimensions]))\n                     true))\n\n(rf/reg-fx\n ::set-breakpoints\n set-breakpoints)\n"]}