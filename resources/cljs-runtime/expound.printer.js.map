{"version":3,"sources":["expound/printer.cljc"],"mappings":";AAcA,AAAA,AAAKA;AACL,AAAA,AAAKC;AAEL,AAAAC,AAAA,AAAA,AAAA,AAAA,AACE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEQ,AAAAC,AAAA,AAAA,AAAA;AACV,AAAAF,AAAA,AAAA,AAAA,AAAA,AACE,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACKC;AAEP,AAAAJ,AAAA,AAAA,AAAA,AAAA,AACE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEgB,AAAAI,AAAA,AAAA,AACC,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACc,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAJ/B,AAAA,AAGiB,AAAA,AACc,AAAA,AAAA,AAAA,AAAA,AAAA;AACjC,AAAAP,AAAA,AAAA,AAAA,AAAA,AAAuC,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACS,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGKQ,AACH,AAAAR,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEU,AAAAC,AAAA,AAAA,AAAA;AAE5D,AAAA,AAEA,AAAA,AAAgBQ,AAAWC;AAA3B,AACE,AAACC,AAAMC,AAAI,AAACC,AAAIC,AAAMJ;;AAExB,AAAA,AAAgBK,AAAkBC,AAAKC;AAAvC,AACE,AAAA,AAACN,AAAMC,AAAM,AAAA,AAAAM,AAACL;AAAD,AAAM,AAACJ,AAAU,AAACU,AAAmB,AAAK,AAAAD,AAACE,AAAMH;AAAMD;;AAEtE,AAAA,AAAgBK,AAAgBC;AAAhC,AACE,AAAA,AAACX,AAAMC,AACA,AAAA,AAAAW,AAACV;AAAD,AAAM,AAACC,AAAM,AAACK,AAAmB,AAAAI;AAAUD;;AAEpD,AAAA,AAAgBE,AAAoBC,AAAcC;AAAlD,AAEO,AAACb,AACA,AAAKc;AAAL,AACE,AAACd,AACA,AAAKS;AAAL,AACE,AAACM,AACA,AAAKX,AAAEY;AAAP,AACE,AAAAC,AAAQ,AAAA,AAAA,AAAU,AAACV,AAAIK,AAAcR;AAArCc,AAA6CF;AAA7C,AAAA,AAAAC,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;AACHV;AACHK;AATJD;;AAWP,AAAA,AAAgBO,AAAeX,AAAIY,AAAKC,AAAOC;AAA/C,AACE,AAAKF,AAAKC,AACL,AAACE,AAAY,AAAKF,AAAOC,AAAOD,AAAQb,AACxCa,AAAOD;;AAEd,AAAA,AAAgBI,AAAOC;AAAvB,AACE,AAAMC,AAAO,AAACC,AAAM,AAACA,AAAMF;AACrBG,AAAiB,AAAA,AAAAC,AAAC9B;AAAD,AAAM,AAACF,AAAMiC,AAAI,AAAA,AAACC,AAAO,AAAO,AAAAF;AAAeH;AAChEM,AAAwB,AAAA,AAAAC,AAAClC;AAAD,AAAM,AAACF,AAAMiC,AAAI,AAAA,AAACC,AAAO,AAAO,AAAAE;AAAeP;AACvEQ,AAAe,AAAA,AAAA,AAAA,AAACf,AAAca;AAC9BG,AAAY,AAAA,AAAA,AAAA,AAAChB,AAAcS;AAC3BQ,AACyB,AAACrC,AACA,AAAKsC;AAAL,AACE,AAACtC,AAAI,AAAKS;AAAL,AAAU,AAAA,AAAA,AAAA,AAACW,AAAcX;AAAkB6B;AAHnDZ;AAL/B,AAWG,AAAA,AAAA,AAACa,AAASJ,AAAiB,AAAA,AAACH,AAAQI,AACpC,AAACI,AAAOC,AAAOJ,AACf,AAACK,AACD,AAACF,AAAOG;;AAEb,AAAA,AAAgBC,AAAUC,AAAWpC;AAArC,AACE,AAAMqC,AAAmB,AAACC,AAAK,AAAK/B;AAAL,AAAQ,AAACV,AAAmB,AAAKU;AAAKP;AAArE,AACE,AAAAuC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAR,AAAAM;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAC,AAAAH;AAAA,AAAAI,AA62E+C,AAAAgF,AAAApF;AA72E/CK,AAAA,AAAArD,AAAAoD;AAAAE,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAH;AAAA,AAAA,AAAAI,AAAAL,AAAAI,AAAMS;AAAN,AAAA,AAAA,AAAAP,AAAAJ,AACE,AAAAP,AAAA;AAAAoB;AAAA,AAAA,AAAAlB,AAAA,AAAA;;AAAA,AAAA,AAAAkB,AAAAA;;AAAA,AAAA,AAAAjB,AAAA,AAAAR,AAAAyB;AAAA,AAAA,AAAAjB;AAAA,AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAA,AAAAC,AAAAgB;AAAA,AAAAf,AA42E6C,AAAAgF,AAAAjE;AA52E7Cd,AAAA,AAAArD,AAAAoD;AAAAgB,AAAA,AAAAb,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAgB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAhB;AAAA,AAAA,AAAAI,AAAAL,AAAAiB,AAAMM;AAAN,AAAA,AAAA,AAAAjB,AAAAU,AACE,AAAA,AAAA,AAACQ,AAAO/B,AAAoB8B,AAAQV;;AADtC,AAAA,AAAAI,AAAA;;;;AAAA;;;;;AAAA,AAAAV,AAAA,AAAAC,AAAAQ,AAAA,AAAAE,AAAA,AAAAR,AAAAK;;AAAA,AAAAR,AAAA,AAAAC,AAAAQ,AAAA;;;AAAA,AAAA,AAAAzC,AAAAwC,AAAMQ;AAAN,AAAA,AAAAZ,AAAA,AAAAO,AAAA,AAAAN,AAAAG,AACE,AAAA,AAAA,AAACS,AAAO/B,AAAoB8B,AAAQV;;;AADtC;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAlB,AAAc,AAACmB,AAAM,AAAClE,AAAMQ;;;AAD9B,AAAA,AAAAgD,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAd;;AAAA,AAAAW,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAA3B,AAAAqB,AAAMiB;AAAN,AAAA,AAAAF,AACE,AAAAhB,AAAA;AAAAwB;AAAA,AAAA,AAAAtB,AAAA,AAAA;AAAA,AAAA,AAAAsB,AAAAA;;AAAA,AAAA,AAAArB,AAAA,AAAAR,AAAA6B;AAAA,AAAA,AAAArB;AAAA,AAAA,AAAAqB,AAAArB;AAAA,AAAA,AAAA,AAAAC,AAAAoB;AAAA,AAAAnB,AA42E6C,AAAAgF,AAAA7D;AA52E7ClB,AAAA,AAAArD,AAAAoD;AAAAoB,AAAA,AAAAjB,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAoB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAApB;AAAA,AAAA,AAAAI,AAAAL,AAAAqB,AAAME;AAAN,AAAA,AAAA,AAAAjB,AAAAc,AACE,AAAA,AAAA,AAACI,AAAO/B,AAAoB8B,AAAQV;;AADtC,AAAA,AAAAQ,AAAA;;;;AAAA;;;;;AAAA,AAAAd,AAAA,AAAAC,AAAAY,AAAA,AAAAE,AAAA,AAAAZ,AAAAS;;AAAA,AAAAZ,AAAA,AAAAC,AAAAY,AAAA;;;AAAA,AAAA,AAAA7C,AAAA4C,AAAMI;AAAN,AAAA,AAAAZ,AAAA,AAAAW,AAAA,AAAAV,AAAAO,AACE,AAAA,AAAA,AAACK,AAAO/B,AAAoB8B,AAAQV;;;AADtC;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAlB,AAAc,AAACmB,AAAM,AAAClE,AAAMQ;AAD9B,AAAAqD,AAAA,AAAAG,AAAAhB;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAD,AAAc,AAACmB,AAAMtB;;AAIzB,AAAA,AAAgBiC,AAAWC,AAAY5E;AAAvC,AACE,AAACY,AAAY,AAAKiE,AAAIvE;AAAT,AAAc,AAACmC,AAAS,AAACqC,AAAIF,AAAYC,AAAKvE;AAAMN;;AAEnE,AAAA,AAAgB+E,AAAqBC,AAAYC;AAAjD,AACE,AAAU,AAACC,AAAOD;AAAlB;;AAAA,AACE,AAAMjF,AAAK,AAAA,AAACmF,AAAMH,AAAa,AAAA,AAAAI,AAACvF;AAAD,AAAM,AAAAuF,AAACvF,AAAMmF;AAAaC;AACnDL,AAAY,AAAChC,AAAKvC,AAAeL;AACjCS,AAAc,AAACG,AACA,AAAKX,AAAEoF;AAAP,AAAU,AAACtF,AAAiBC,AAAKC;AACjC,AAACwB,AAAMzB;AAJ5B,AAOGA,AACA,AAAC2E,AAAUC,AACX,AAACpE,AAAmBC;;;AAE3B,AAAA,AAAM6E,AAAWN,AAAYC;AAA7B,AACE,AAAA,AAEC,AAACtF,AAAMiC,AACA,AAAC/B,AACA,AAAK0F;AAAL,AAAW,AAAA,AAAKA;AAChB,AAACjE,AAAM,AAACyD,AAAoBC,AAAYC;;AAEnD,AAAAlG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAyG,AAAA,AAAAC,AAAA,AAAA,AACQ,AAAAzG,AAAA,AAAA,AAAA,AAAA,AACU,AAAA2G,AAAK,AAAAtG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAuG,AAAWF;AAAX,AAAA,AAAAnG,AAAAqG;AAAL,AAAA,AAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AACJ,AAAAvG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAwG,AAAWC;AAAX,AAAA,AAAAvG,AAAAsG;AAHnB,AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAAA,AAEW,AAAA,AAAA,AAAA,AAAA,AAAA;AACnB,AAAA,AAAA,AAAAK,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFhB;AADJ,AAEG,AAACkB,AAAY,AAACC,AAAK,AAAC3E,AAAMwD,AAAWA;;;AAFxC,AAAA,AAAA,AAAMgB,AAGFjB,AAAYC;AAHhB,AAIG,AAACoB,AAAM,AAACf,AAAUN,AAAYC;;;AAJjC,AAAA,AAAA,AAAMgB;;AAAN,AASA,AAAA,AAAMK,AAAUC;AAAhB,AACOA,AACA,AAACC,AAASjH,AAAMiD,AAChB,AAACiE,AAAOjH;;AAEf,AAAA,AAAMkH,AAAYC;AAAlB,AACE,AAAA,AAACC,AAAI,AAAC9G,AAAM6G;;AAEd,AAAA,AAAME,AAAiBC;AAAvB,AACE,AAAMP,AAAK,AAAAQ,AAAQD;AAARC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAAYC;AAAZ,AAAA,AAAA,AAAAD,AAAA;AAAA;;AAAA,AAAAA,AAAiBE;;;AACtBC,AAAU,AAAA,AAACC,AAAiCZ;AADlD,AAIE,AAAI,AAAAa,AAAKb;AAAL,AAAA,AAAAa;AACK,AAAA,AAACC,AAAiBH;;AADvBE;;;AAEF,AAGK,AAACX,AACA,AAAKa,AAEN,AAACzH,AAAI2H,AACLC;AAHC,AACE,AAAK,AAACF,AAAQD,AAAG,AAAA,AAACV,AAAM,AAACnF,AAAM6F;AALlC,AAAA,AAAUJ,AACV,AAAA,AAACrH,AACD,AAAC2G,AAASjH,AAAMiD;;AAJvB;;;AAYJ,AAAA,AAAMkF,AAAWC,AAAKC;AAAtB,AACE,AAAAC,AAAA,AAAArF,AAAUoF;AAAVE,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQI;AAAR,AAAA,AACE,AAAQ,AAAA,AAAA,AAAO,AAAA,AAAcA;AAA7B;AAAA,AAAA,AAAA,AAAAlC,AAAA,AAAA,AAAA,AAAA,AAAiCmC;;;AADnC;AAAA,AAAAR;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAhF,AAAA,AAAAR,AAAAqF;AAAA,AAAA,AAAA7E;AAAA,AAAA,AAAA6E,AAAA7E;AAAA,AAAA,AAAA,AAAAC,AAAA4E;AAAA,AAAAI,AAAA,AAAAC,AAAAL;AAAA,AAAA,AAAA,AAAAjE,AAAAiE;AAAAI;AAAA,AAAAnI,AAAAmI;AAAA;;;;;;;AAAA,AAAA,AAAAxG,AAAAoG,AAAQO;AAAR,AAAA,AACE,AAAQ,AAAA,AAAA,AAAO,AAAA,AAAcA;AAA7B;AAAA,AAAA,AAAA,AAAAlC,AAAA,AAAA,AAAA,AAAA,AAAiCmC;;;AADnC;AAAA,AAAA,AAAAF,AAAAN;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAEA,AAAMS,AAAK,AAAA,AAACzI,AAAiB+H;AACvBW,AAAM,AAAI,AAACC,AAAOrJ,AAAmBwI,AAC7BA,AACA,AAAAc,AAAe,AAAC9I,AAAM+I,AAAU,AAAC7I,AAAIgH,AAAgByB;AAArD,AAAA,AAAAG;AAAA,AAAAA,AAASF;AAAT,AACEA;;AACAZ;;;AALhB,AAME,AAACgB,AACA,AAAKC,AAAEC;AAAP,AACE,AAACC,AAAMF,AACAC,AACA,AAAI,AAAC1J,AAAmB0J,AACtBA,AACA,AAAAE,AAAI,AACK,AAAA,AAAAC,AAACvC,AACDhF;AADA,AAAS,AAACmF,AAAE,AAACqC,AAAKJ,AAAG,AAAAG,AAACC;AADtBV;AAAT,AAAA,AAAAQ;AAAAA;;AAAA;;;AANZ,AAWCpB;;AAEL,AAAA,AAAAuB,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAA,AAAA9I,AAAA+I,AAAA,AAAA,AAA6BE;AAA7B,AAAAjJ,AAAA+I,AAAA,AAAA,AAAoCG;AAApC,AACE,AAAAC,AAAMF;AAANE,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAEE,AAAA,AAAKD;;;AAFP;AAKE,AAAC3J,AAAM8J,AACA,AAACC,AAAO,AAACT,AAAK,AAAA,AAAKK,AACnB,AAACzJ,AAAIuJ,AAAqB,AAAA,AAAUE;;;;AAP7C,AAAA,AAAApD,AAAA,AAAA,AAAAqD;;;;AASF,AAAA,AAAMI,AAAapD;AAAnB,AACE,AAAAqD,AAAqB,AAAA,AAACzC,AAA0C,AAAA,AAAC/G,AAAImG;AAArE,AAAAnG,AAAAwJ,AAAA,AAAA,AAAOP;AAAP,AAAAjJ,AAAAwJ,AAAA,AAAA,AAAcN;AAAd,AACE,AAAAO,AAAMR;AAANQ,AAAA,AAAA,AAAAA,AAAAL,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA;AAAA;AAEE,AAAA,AAAKP;;;AAFP;AAKE,AAAA,AAACF,AAAsBC,AAAOC;;;;AALhC,AAAA,AAAApD,AAAA,AAAA,AAAA2D;;;;AASJ,AAAA,AAAMC,AAAeC;AAArB,AACeA,AACA,AAAA,AAAA,AAACC,AACD,AAAA,AAAA,AAACA;;AAGhB,AAAA,AAAMC,AAAeF;AAArB,AACeA,AACA,AAAA,AAAA,AAACC,AACD,AAAA,AAAA,AAACA;;AAGhB,AAAA,AAAME,AAAWC;AAAjB,AASS,AAAMC,AAAS,AAAA,AAACC,AAAa,AAAC7C,AAAO,AAAA,AAAC8C,AAEA,AAACC,AAAOJ,AASjD,AAACL,AACD,AAACE,AACD,AAACA;AATQQ,AAAK,AAAA,AAACnJ,AAAgB,AAACkB,AAAQ6H;AAC/BK,AAAM,AAACzD,AAAKoD;AALlB,AAME,AAAI,AAAClF,AAAOsF;AACV1L;;AACA,AAAA,AACC,AAAC4L,AAAQF,AACT,AAACE,AAAQD;;AAEjB,AAAA,AACA,AAAA;;AAGH,AAAA,AAAA,AAAA1E,AAAM/E;AAAN,AAAA,AAAA2J,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA3J,AAAA,AAAA,AAAA,AAAA8J;;;AAAA,AAAA,AAAA,AAAA,AAAM9J,AAAQmK,AAAMC;AAApB,AACE,AAACzL,AAAM0L,AAAmBF,AAAIC;;;AADhC,AAAA,AAAA,AAAMpK;;AAAN;AAAA,AAAA,AAAA,AAAAgK,AAAMhK;AAAN,AAAA,AAAAiK,AAAA,AAAAxJ,AAAAuJ;AAAAA,AAAA,AAAA7C,AAAA6C;AAAA,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAAD,AAAAD;;;AAAA,AAIH,AAAAjM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAyG,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAAAzG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAU0G,AACX4F;AACP;;;AAAA,AAAMC,AAEHjE;AAFH,AAGE,AAAI,AAACkE,AAAIlE;AACP,AAAC4C,AAAU5C;;AACX,AAAA,AAAA,AAACmE,AAAanE;;;AAElB,AAAA,AAAMoE,AAAaC;AAAnB,AACE,AAAI,AAACC,AAAWD;AACd,AAACJ,AAAW,AAACtE,AAAO0E;;AACpBA;;;AAEJ,AAAA,AAAME,AAAqBC;AAA3B,AACE,AAAMC,AAAS,AAACL,AAAYI;AACtBE,AAAS,AAAC/B,AAAc,AAACH,AACA,AAAA,AAAI,AAAA,AAAMiC,AAERA;AAJjC,AAMEC;;AAEJ,AAAA,AAAMC,AAAkBrE;AAAxB,AACE,AAAMD,AAAK,AAACrB,AAAS,AAAA,AAAA4F,AAACrM;AAAD,AAAM,AAAC8J,AAAY,AAAA,AAAAuC;AAAWtE;AAAnD,AACE,AAAI,AAAA,AAAK,AAAC1C,AAAO,AAAA,AAAc,AAACzD,AAAMmG,AAC7B,AAACuE,AAAKC,AAAgBzE;AAD/B;;AASO,AAAA,AAAA4E,AAACC;AAAD,AAAU,AAAAD,AAAA,AAACzH;AADX,AAACjF,AAAI,AAAAwM;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAjM,AAAAkM,AAAA,AAAA,AAAMzD;AAAN,AAAAzI,AAAAkM,AAAA,AAAA,AAAQzL;AAAR,AAAA,AAAA,AAAA,AAAmBgI,AAAS,AAACgD,AAAoBhL;AADtD,AAAC6G,AAAUC,AAAKC;;;AAI3B,AAAA,AAAM6E,AAAiB7E;AAAvB,AACE,AAAA,AAAA8E,AAAA,AAAAC,AAICQ;AAJD,AAAA,AAAAP,AAAAC;AAAAC,AAAAC;AAAAC,AAAA;AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAR,AAAAQ;;AAAA,AAAA,AAAAL,AAAAG;;AAAA,AAAAD,AAAAE;;AAAA,AAAA,AACC,AAAChB,AAAiBrE,AAClB,AAAA,AAAA,AAAA,AAACzB;AAFF,AAAA,AAAA4G,AAAAD;;AAAA,AAAAD,AAAAD;;AAAA,AAAAF;;;AAMF,AAAA,AAAMU,AAAoBxF;AAA1B,AACE,AAAMyF,AAAa,AAACC,AAAS,AAACzN,AAAI,AAAA,AAAC0N,AAAK5D,AAAmB/B;AAA3D,AACE,AAAI,AAACY,AAAOhJ,AAAS6N;AACnB,AAAA,AAAChM,AAAiB,AAAA,AAAAmM,AAAC3N;AAAD,AAAM,AAAA2N,AAAA,AAACC;AAA2B,AAACC,AAAKL;;AAC1D,AAAA,AACK,AAAA,AAACI,AAAW,AAAClC,AACA,AAAI,AAAC7E,AAAW2G,AACd,AAAC5L,AAAM4L,AACP,AAAA,AAAA,AAAC1N,AAAM8J,AAEA4D;;;AAEjC,AAAAtO,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAyG,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAAAzG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAUsM,AACXA;AACP;;;;AAAA,AAAMqC,AAGH5D;AAHH,AAIE,AAAM6D,AAAQ7D,AACA5J,AACA,AAAA,AAACN,AAAIgO,AACL,AAAA,AAACxM;AAHf,AAIE,AAAI,AAAA,AAACuF,AAAW,AAACI,AAAK+C;AACpB,AAAA,AAAK6D;;AACLA;;;AAEN,AAAA7O,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAyG,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAAAzG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAC0B,AAAA2G,AAAA,AAAA,AAAKmI,AAChB,AAAAnI,AAAA,AAAA,AAAKmI,AAChBxC,AACLA;AACP,AAAA;;;;;AAAA,AAAAvF,AAAMiI;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA9H,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAM8H,AAIFjE;AAJJ,AAKG,AAACkE,AAAOpP,AAAakL;;;AALxB,AAAA,AAAA,AAAMiE,AAMFE,AAAanE;AANjB,AAOG,AAACkE,AAAOC,AAAaA,AAAanE;;;AAPrC,AAAA,AAAA,AAAMiE,AAQFG,AAAkBC,AAAkBrE;AARxC,AASG,AAAAsE,AAAqB,AAAClO,AAAmB,AAAK4J;AAA9CuE,AAAA,AAAA9L,AAAA6L;AAAAE,AAAA,AAAA9M,AAAA6M;AAAAA,AAAA,AAAAnG,AAAAmG;AAAAC,AAAOhJ;AAAP+I,AAAc5O;AAAd,AAEO,AAAA,AAAA8O,AAAC3O,AACD,AAAA,AAACsF,AAAM,AAAK,AAACxF,AAAMiC,AAAI,AAAA,AAACC,AAAOsM,AAAwB5I,AACvD,AAAA,AAAClE;AAFD,AAAM,AAAAmN,AAAK,AAAC7O,AAAMiC,AAAI,AAAA,AAACC,AAAOuM;AAD9B1O;;;AAVV,AAAA,AAAA,AAAMsO;;AAAN,AAeA,AAAA,AAAMS,AAA0CC,AAAU3E;AAA1D,AAIW,AAAA,AAAA,AAACC,AAAeD;;AAE3B,AAAA,AAAM4E,AAAYpI;AAAlB,AACE,AACE,AAACT,AAAKS;AACN,AAACqI,AAAO,AAACxI,AAAKG,AAAM,AAAA,AAAC1E;;AAFvB,AAIE,AAAC0F,AAAQhB;AACT,AAACsI,AAAI,AAAA,AAAChN,AAAO,AAAC/B,AAAMyG;;AALtB,AAOE,AAACuI,AAAKvI;AACNA;;AARF,AAUE,AAAI,AAACwI,AAAMxI,AACP,AAACyI,AAAKzI;AACV,AAAC5G,AAAM8J,AAAK,AAAA,AAAC5H,AAAO,AAAC/B,AAAMyG;;AAZ7B,AAAA;;;;;;;AAiBF,AAAAxH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAyG,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAAA1G,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA2BiQ,AACdvJ;AAErB,AAAA,AAAMwJ,AAAcC,AAAmB5I,AAAK6I;;AAA5C,AACE,AAAAC,AAAgBD;AAAhBE,AAAA,AAAA9M,AAAA6M;AAAAE,AAAA,AAAA9N,AAAA6N;AAAAA,AAAA,AAAAnH,AAAAmH;AAAAC,AAAO1G;AAAPyG,AAAWE;AACLA,AAAI,AAAAzG,AAAIyG;AAAJ,AAAA,AAAAzG;AAAAA;;AAAA;;;AACJ0G,AAAe,AAAIN,AAAmB5I,AAAK,AAACoI,AAAWpI;AAF7D,AAGE,AACE,AAACrB,AAAOkK;AADV;;AAAA,AAIE,AAAK,AAACtJ,AAAKS,AAAM,AAACmJ,AAAW7G;AACzB4G,AACA,AAACE,AAAO,AAAA,AAAM9G,AACd,AAACC,AAAM,AAAA8G,AAAcT;AAAdU,AAAiC,AAAA,AAAMhH;AAAvCiH,AAA0CN;AAA1C,AAAA,AAAAI,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACZ,AAAAA,AAAAA;AAAR;;AAPN,AAUE,AAAK,AAACpJ,AAAKS,AAAM,AAACwJ,AAAYlH;AAC9B,AAAOsG;AAAmB,AAAC/O,AAAI,AAACoC,AAAI+D,AAAM,AAAA,AAAMsC;AAAI2G;;;;;;AAXtD,AAaE,AAACQ,AAAazJ;AACd,AAACuC,AAAM2G,AACA5G,AACA,AAAAoH,AAAcd;AAAde,AAAiC,AAACpL,AAAIyB,AAAKsC;AAA3CsH,AAA8CX;AAA9C,AAAA,AAAAS,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACjB,AAAAA,AAAAA;;;AAhBV,AAkBE,AAAK,AAACkB,AAAKvH,AAAG,AAACmG,AAAKzI;AACpB,AAAC5G,AAAM8J,AAASgG,AACAZ,AACA,AAAA,AAAC/F,AAAMD,AAAE,AAAAwH,AAAclB;AAAdmB,AAAiC,AAAClQ,AAAImG,AAAKsC;AAA3C0H,AAA8Cf;AAA9C,AAAA,AAAAa,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACrB,AAAAA,AAAAA;;;AArB5B,AAuBE,AAAK,AAACkB,AAAKvH,AAAG,AAACiG,AAAKvI;AACpB,AAAA,AAACpB,AAAasK,AACAZ,AACA,AAAA,AAAC/F,AAAMD,AAAE,AAAA2H,AAAcrB;AAAdsB,AAAiC,AAACrQ,AAAI,AAACoC,AAAI+D,AAAMsC;AAAjD6H,AAAoDlB;AAApD,AAAA,AAAAgB,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACxB,AAAAA,AAAAA;;;AA1B1B,AA4BE,AAAK,AAACkB,AAAKvH,AAAG,AAACkG,AAAMxI;AACrB,AAAA,AAAA,AAACpB,AAAasK,AACAZ,AACA,AAAA,AAAC/F,AAAMD,AAAE,AAAA8H,AAAcxB;AAAdyB,AAAiC,AAACxQ,AAAI,AAACoC,AAAI+D,AAAMsC;AAAjDgI,AAAoDrB;AAApD,AAAA,AAAAmB,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAAC3B,AAAAA,AAAAA;;;AA/B1B,AAiCE,AAAK,AAACkB,AAAKvH,AAAG,AAAStC;AACvB,AAAClF,AAAY,AAAA,AAACyH,AAAM,AAAC+F,AAAItI,AAAMsC;;AAlCjC,AAqCE,AAAO,AAAA,AAAA,AAAA,AAAA,AAACiI,AACevK,AACF6I;;;;;;;;;;;;;AAG3B,AAAA,AAAM2B,AACHC,AAAOC;AADV,AAEE,AAAMC,AAAU,AAACvR,AAAMC,AAAI,AAAA,AAAAuR,AAACtR;AAAD,AAAM,AAAO,AAAAsR;AAAS,AAAChR,AAAmB8Q;AAArE,AACE,AAAChD,AAAO,AAAO,AAAK+C,AACZ,AAACrR,AAAMiC,AAAI,AAAA,AAACC,AAAOqP;;AAE/B;;;;AAAA,AAAME,AAGHC,AAAKC;AAHR,AAIE,AAAAC,AAA0CD;AAA1CC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA5R,AAAA8R,AAAAF,AAAAA;AAAAhL,AAAA,AAAAzB,AAAAyM,AAAA;AAAAnC,AAAA,AAAAtK,AAAAyM,AAAA;AAAAG,AACkEL;AADlEK,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA/R,AAAA8R,AAAAC,AAAAA;AAAA,AAAA5M,AAAA4M,AAAA,AAAA,AACcvC;AACR2C,AAAY,AAACvG,AAAW,AAACwG,AAAexL,AAAK6I;AAC7C4C,AAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AACTC,AAAM,AAACC,AAAW,AAAA,AAAA,AAAYF;AAC9BjI,AAAE,AAAAoI,AAAUE;AAAVD,AAAA;AAAA,AAAA,AAAAA,AAAUC;;AAAV,AAAA,AAAwC,AAAC9G,AAAW,AAAA,AAAA,AAAA,AAAA,AAAC+G,AAAyD,AAACpD,AAAaC,AAAmB5I,AAAK6I;AAApJ,AAAA,AAAA+C,AAAUE;;AALlBV,AAM4B,AAACrH,AAAQ2H,AAAMlI;AAN3C6H,AAAA,AAAApP,AAAAmP;AAAAE,AAAA,AAAApQ,AAAAmQ;AAAAA,AAAA,AAAAzJ,AAAAyJ;AAAAC,AAMOtM;AANPsM,AAAA,AAAApQ,AAAAmQ;AAAAA,AAAA,AAAAzJ,AAAAyJ;AAAAC,AAMYb;AANZY,AAMqBW;AACfC,AAAqBjN,AACA,AAACyE,AAAe,AAACkI,AAAWF,AAAU,AAACvD,AACA,AAACyD,AAAWF,AACZ,AAAA,AAAC/D,AAAS,AAACnO,AAAMkR,AAAQ,AAAA,AAACvD,AAAWqE,AAC5E,AAAA,AAAU,AAAA,AAACrE,AAAW,AAACsD,AAAeC,AAAOc;AAXxE,AAcE,AAACnE,AAAuB,AAAC3D,AAAeD,AAAExE,AAAK,AAACkJ,AAAmBlJ,AAAKiN","names":["expound.printer/indent-level","expound.printer/anon-fn-str","cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/rep+impl","cljs.spec.alpha/or-spec-impl","cljs.core/qualified-keyword?","cljs.spec.alpha/rep-impl","cljs.spec.alpha.every_impl","G__39669","cljs.core/coll?","cljs.core/keyword?","expound.printer/str-width","lines","cljs.core.apply","cljs.core/max","cljs.core.map","cljs.core/count","expound.printer/max-column-width","rows","i","p1__39671#","clojure.string/split-lines","cljs.core.nth","expound.printer/max-row-height","row","p1__39673#","expound.printer/indented-multirows","column-widths","multi-rows","multi-row","cljs.core.map_indexed","v","G__39679","G__39680","expound.printer/format","expound.printer/formatted-row","edge","spacer","middle","clojure.string.join","expound.printer/table","multirows","header","cljs.core/first","columns-dividers","p1__39682#","cljs.core/str","cljs.core.repeat","header-columns-dividers","p1__39683#","header-divider","row-divider","formatted-multirows","multirow","cljs.core.concat","cljs.core.mapcat","cljs.core/vector","cljs.core/butlast","cljs.core/seq","expound.printer/multirow","row-height","split-row-contents","cljs.core.mapv","iter__4529__auto__","s__39685","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__39687","cljs.core/chunk-buffer","i__39686","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__39684","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","row-idx","cljs.core.range","s__39689","b__39691","i__39690","iter__39688","s__39693","b__39695","i__39694","iter__39692","col-idx","cljs.core.get_in","expound.printer/multirows","row-heights","idx","cljs.core.get","expound.printer/formatted-multirows","column-keys","map-rows","cljs.core/empty?","cljs.core.into","p1__39696#","_","expound.printer/table-str","line","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.core/any?","cljs.spec.alpha/maybe-impl","G__39702","G__39703","cljs.core/map?","var_args","G__39705","expound.printer/print-table","js/Error","expound.printer.print_table","cljs.core/keys","cljs.core.print","expound.printer/keywords","form","cljs.core/tree-seq","cljs.core.filter","expound.printer/singleton?","xs","cljs.core._EQ_","expound.printer/specs-from-form","via","G__39710","cljs.core/last","cljs.spec.alpha/form","conformed","cljs.spec.alpha/conform","and__4115__auto__","cljs.core.not_EQ_","x","cljs.core/vector?","cljs.core/second","cljs.core/set","expound.printer/key->spec","keys","problems","seq__39717","chunk__39718","count__39719","i__39720","c__4556__auto__","cljs.core/chunk-first","cljs.core/next","p","expound.util/assert-message","vias","specs","cljs.core/every?","temp__5733__auto__","clojure.set/union","cljs.core.reduce","m","k","cljs.core.assoc","or__4126__auto__","p1__39711#","cljs.core/name","p__39725","vec__39726","expound.printer/summarize-key-clause","branch","match","G__39729","cljs.core/Keyword","cljs.core/list","cljs.core.symbol","expound.printer/missing-key","vec__39730","G__39733","expound.printer/elide-core-ns","s","clojure.string/replace","expound.printer/elide-spec-ns","expound.printer/pprint-fn","f","fn-parts","clojure.string.split","cljs.core/re-find","cljs.core.pr_str","ns-n","fn-n","cljs.core/demunge","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","seq39735","G__39736","self__4723__auto__","fmt","args","goog.string/format","cljs.core/string?","expound.printer/pprint-str","cljs.core/fn?","cljs.pprint.write","expound.printer/expand-spec","spec","cljs.spec.alpha/get-spec","expound.printer/simple-spec-or-name","spec-name","expanded","spec-str","expound.printer/print-spec-keys*","p1__39737#","cljs.core/some","cljs.core/simple-keyword?","p__39739","vec__39740","p1__39738#","cljs.core.sort_by","expound.printer/print-spec-keys","sb__4667__auto__","goog.string/StringBuffer","*print-newline*-orig-val__39743","cljs.core/*print-newline*","*print-fn*-orig-val__39744","cljs.core/*print-fn*","*print-newline*-temp-val__39745","*print-fn*-temp-val__39746","x__4668__auto__","clojure.string/trim","expound.printer/print-missing-keys","keys-clauses","cljs.core.distinct","cljs.core.comp","p1__39747#","expound.ansi.color","cljs.core.sort","expound.printer/no-trailing-whitespace","s'","clojure.string/trimr","cljs.core/nat-int?","G__39755","expound.printer/indent","expound.printer.indent","indent-level","first-line-indent","rest-lines-indent","vec__39757","seq__39758","first__39759","p1__39753#","expound.printer/escape-replacement","_pattern","expound.printer/blank-form","cljs.core/zipmap","cljs.core/vec","cljs.core/set?","cljs.core/list?","cljs.core/seq?","cljs.core/boolean?","expound.printer/summary-form","show-valid-values?","in","vec__39761","seq__39762","first__39763","rst","displayed-form","expound.paths/kps?","cljs.core.dissoc","G__39764","G__39765","G__39766","expound.paths/kvps?","cljs.core/associative?","G__39767","G__39768","G__39769","cljs.core/int?","G__39770","G__39771","G__39772","G__39773","G__39774","G__39775","G__39776","G__39777","G__39778","cljs.core.ex_info","expound.printer/highlight-line","prefix","replacement","max-width","p1__39779#","expound.printer/highlighted-value","opts","problem","map__39787","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","map__39788","vec__39789","seq__39790","first__39791","printed-val","expound.paths/value-in","relevant","regex","cljs.core/re-pattern","*print-namespace-maps*-orig-val__39796","*print-namespace-maps*-temp-val__39797","cljs.core/*print-namespace-maps*","clojure.walk/prewalk-replace","_more","highlighted-line"],"sourcesContent":["(ns ^:no-doc expound.printer\n  (:require [clojure.string :as string]\n            [clojure.spec.alpha :as s]\n            [clojure.pprint :as pprint]\n            [clojure.set :as set]\n            [expound.util :as util]\n            [expound.ansi :as ansi]\n            [expound.paths :as paths]\n            [clojure.walk :as walk]\n            #?(:cljs [goog.string.format]) ; https://github.com/bhb/expound/issues/183\n            #?(:cljs [goog.string])        ; https://github.com/bhb/expound/issues/183\n            #?(:clj [clojure.main :as main]))\n  (:refer-clojure :exclude [format]))\n\n(def indent-level 2)\n(def anon-fn-str \"<anonymous function>\")\n\n(s/def :expound.spec/spec-conjunction\n  (s/cat\n   :op #{'or 'and}\n   :specs (s/+ :expound.spec/kw-or-conjunction)))\n(s/def :expound.spec/kw-or-conjunction\n  (s/or\n   :kw qualified-keyword?\n   :conj :expound.spec/spec-conjunction))\n(s/def :expound.spec/key-spec\n  (s/cat :keys #{'clojure.spec.alpha/keys\n                 'cljs.spec.alpha/keys}\n         :clauses (s/*\n                   (s/cat :qualifier #{:req-un :req :opt-un :opt}\n                          :specs (s/coll-of :expound.spec/kw-or-conjunction)))))\n(s/def :expound.spec/contains-key-pred (s/or\n                                        :simple (s/cat\n                                                 :contains #{`contains? 'contains?}\n                                                 :arg #{'%}\n                                                 :kw keyword?)\n                                        :compound (s/cat\n                                                   :op #{`or `and}\n                                                   :clauses (s/+ :expound.spec/contains-key-pred))))\n\n(declare format)\n\n(defn ^:private str-width [lines]\n  (apply max (map count lines)))\n\n(defn ^:private max-column-width [rows i]\n  (apply max 0 (map #(str-width (string/split-lines (str (nth % i)))) rows)))\n\n(defn ^:private max-row-height [row]\n  (apply max 0\n         (map #(count (string/split-lines (str %))) row)))\n\n(defn ^:private indented-multirows [column-widths multi-rows]\n  (->> multi-rows\n       (map\n        (fn [multi-row]\n          (map\n           (fn [row]\n             (map-indexed\n              (fn [i v]\n                (format (str \"%-\" (nth column-widths i) \"s\") v))\n              row))\n           multi-row)))))\n\n(defn ^:private formatted-row [row edge spacer middle]\n  (str edge spacer\n       (string/join (str spacer middle spacer) row)\n       spacer edge))\n\n(defn ^:private table [multirows]\n  (let [header (first (first multirows))\n        columns-dividers (map #(apply str (repeat (count (str %)) \"-\")) header)\n        header-columns-dividers (map #(apply str (repeat (count (str %)) \"=\")) header)\n        header-divider (formatted-row header-columns-dividers \"|\" \"=\" \"+\")\n        row-divider (formatted-row columns-dividers \"|\" \"-\" \"+\")\n        formatted-multirows (->> multirows\n                                 (map\n                                  (fn [multirow]\n                                    (map (fn [row] (formatted-row row \"|\" \" \" \"|\")) multirow))))]\n\n    (->>\n     (concat [[header-divider]] (repeat [row-divider]))\n     (mapcat vector formatted-multirows)\n     (butlast) ;; remove the trailing row-divider\n     (mapcat seq))))\n\n(defn ^:private multirow [row-height row]\n  (let [split-row-contents (mapv (fn [v] (string/split-lines (str v))) row)]\n    (for [row-idx (range row-height)]\n      (for [col-idx (range (count row))]\n        (get-in split-row-contents [col-idx row-idx] \"\")))))\n\n(defn ^:private multirows [row-heights rows]\n  (map-indexed (fn [idx row] (multirow (get row-heights idx) row)) rows))\n\n(defn ^:private formatted-multirows [column-keys map-rows]\n  (when-not (empty? map-rows)\n    (let [rows (into [column-keys] (map #(map % column-keys) map-rows))\n          row-heights (mapv max-row-height rows)\n          column-widths (map-indexed\n                         (fn [i _] (max-column-width rows i))\n                         (first rows))]\n\n      (->>\n       rows\n       (multirows row-heights)\n       (indented-multirows column-widths)))))\n\n(defn table-str [column-keys map-rows]\n  (str\n   \"\\n\"\n   (apply str\n          (map\n           (fn [line] (str line \"\\n\"))\n           (table (formatted-multirows column-keys map-rows))))))\n\n(s/fdef print-table\n  :args (s/cat\n         :columns (s/? (s/coll-of any?))\n         :map-rows (s/coll-of map?)))\n(defn print-table\n  ([map-rows]\n   (print-table (keys (first map-rows)) map-rows))\n  ([column-keys map-rows]\n   (print (table-str column-keys map-rows))))\n\n;;;; private\n\n\n(defn keywords [form]\n  (->> form\n       (tree-seq coll? seq)\n       (filter keyword?)))\n\n(defn singleton? [xs]\n  (= 1 (count xs)))\n\n(defn specs-from-form [via]\n  (let [form (some-> via last s/form)\n        conformed (s/conform :expound.spec/key-spec form)]\n    ;; The containing spec might not be\n    ;; a simple 'keys' call, in which case we give up\n    (if (and form\n             (not= ::s/invalid conformed))\n      (->> (:clauses conformed)\n           (map :specs)\n           (tree-seq coll? seq)\n           (filter\n            (fn [x]\n              (and (vector? x) (= :kw (first x)))))\n           (map second)\n           set)\n      #{})))\n\n(defn key->spec [keys problems]\n  (doseq [p problems]\n    (assert (some? (:expound/via p)) util/assert-message))\n  (let [vias (map :expound/via problems)\n        specs (if (every? qualified-keyword? keys)\n                keys\n                (if-let [specs (apply set/union (map specs-from-form vias))]\n                  specs\n                  keys))]\n    (reduce\n     (fn [m k]\n       (assoc m\n              k\n              (if (qualified-keyword? k)\n                k\n                (or (->> specs\n                         (filter #(= (name k) (name %)))\n                         first)\n                    \"<can't find spec for unqualified spec identifier>\"))))\n     {}\n     keys)))\n\n(defn summarize-key-clause [[branch match]]\n  (case branch\n    :simple\n    (:kw match)\n\n    :compound\n    (apply list\n           (symbol (name (:op match)))\n           (map summarize-key-clause (:clauses match)))))\n\n(defn missing-key [form]\n  (let [[branch match] (s/conform :expound.spec/contains-key-pred (nth form 2))]\n    (case branch\n      :simple\n      (:kw match)\n\n      :compound\n      (summarize-key-clause [branch match]))))\n\n;;;; public\n\n(defn elide-core-ns [s]\n  #?(:cljs (-> s\n               (string/replace \"cljs.core/\" \"\")\n               (string/replace \"cljs/core/\" \"\"))\n     :clj (string/replace s \"clojure.core/\" \"\")))\n\n(defn elide-spec-ns [s]\n  #?(:cljs (-> s\n               (string/replace \"cljs.spec.alpha/\" \"\")\n               (string/replace \"cljs/spec/alpha\" \"\"))\n     :clj (string/replace s \"clojure.spec.alpha/\" \"\")))\n\n(defn pprint-fn [f]\n  (-> #?(:clj\n         (let [[_ ns-n f-n] (re-matches #\"(.*)\\$(.*?)(__[0-9]+)?\" (str f))]\n           (if (re-matches #\"^fn__\\d+\\@.*$\" f-n)\n             anon-fn-str\n             (str\n              (main/demunge ns-n) \"/\"\n              (main/demunge f-n))))\n         :cljs\n         (let [fn-parts (string/split (second (re-find\n                                               #\"object\\[([^\\( \\]]+).*(\\n|\\])?\"\n                                               (pr-str f)))\n                                      #\"\\$\")\n               ns-n (string/join \".\" (butlast fn-parts))\n               fn-n  (last fn-parts)]\n           (if (empty? ns-n)\n             anon-fn-str\n             (str\n              (demunge ns-n) \"/\"\n              (demunge fn-n)))))\n      (elide-core-ns)\n      (string/replace #\"--\\d+\" \"\")\n      (string/replace #\"@[a-zA-Z0-9]+\" \"\")))\n\n#?(:cljs\n   (defn format [fmt & args]\n     (apply goog.string/format fmt args))\n   :clj (def format clojure.core/format))\n\n(s/fdef pprint-str\n  :args (s/cat :x any?)\n  :ret string?)\n(defn pprint-str\n  \"Returns the pretty-printed string\"\n  [x]\n  (if (fn? x)\n    (pprint-fn x)\n    (pprint/write x :stream nil)))\n\n(defn expand-spec [spec]\n  (if (s/get-spec spec)\n    (pprint-str (s/form spec))\n    spec))\n\n(defn simple-spec-or-name [spec-name]\n  (let [expanded (expand-spec spec-name)\n        spec-str (elide-spec-ns (elide-core-ns\n                                 (if (nil? expanded)\n                                   \"nil\"\n                                   expanded)))]\n\n    spec-str))\n\n(defn print-spec-keys* [problems]\n  (let [keys (keywords (map #(missing-key (:pred %)) problems))]\n    (if (and (empty? (:expound/via (first problems)))\n             (some simple-keyword? keys))\n      ;; The containing spec is not present in the problems\n      ;; and at least one key is not namespaced, so we can't figure out\n      ;; the spec they intended.\n      nil\n\n      (->> (key->spec keys problems)\n           (map (fn [[k v]] {\"key\" k \"spec\" (simple-spec-or-name v)}))\n           (sort-by #(get % \"key\"))))))\n\n(defn print-spec-keys [problems]\n  (->>\n   (print-spec-keys* problems)\n   (print-table [\"key\" \"spec\"])\n   with-out-str\n   string/trim))\n\n(defn print-missing-keys [problems]\n  (let [keys-clauses (distinct (map (comp missing-key :pred) problems))]\n    (if (every? keyword? keys-clauses)\n      (string/join \", \" (map #(ansi/color % :correct-key) (sort keys-clauses)))\n      (str \"\\n\\n\"\n           (ansi/color (pprint-str\n                        (if (singleton? keys-clauses)\n                          (first keys-clauses)\n                          (apply list\n                                 'and\n                                 keys-clauses))) :correct-key)))))\n\n(s/fdef no-trailing-whitespace\n  :args (s/cat :s string?)\n  :ret string?)\n(defn no-trailing-whitespace\n  \"Given an potentially multi-line string, returns that string with all\n  trailing whitespace removed.\"\n  [s]\n  (let [s' (->> s\n                string/split-lines\n                (map string/trimr)\n                (string/join \"\\n\"))]\n    (if (= \\newline (last s))\n      (str s' \"\\n\")\n      s')))\n\n(s/fdef indent\n  :args (s/cat\n         :first-line-indent-level (s/? nat-int?)\n         :indent-level (s/? nat-int?)\n         :s string?)\n  :ret string?)\n(defn indent\n  \"Given an potentially multi-line string, returns that string indented by\n   'indent-level' spaces. Optionally, can indent first line and other lines\n   different amounts.\"\n  ([s]\n   (indent indent-level s))\n  ([indent-level s]\n   (indent indent-level indent-level s))\n  ([first-line-indent rest-lines-indent s]\n   (let [[line & lines] (string/split-lines (str s))]\n     (->> lines\n          (map #(str (apply str (repeat rest-lines-indent \" \")) %))\n          (into [(str (apply str (repeat first-line-indent \" \")) line)])\n          (string/join \"\\n\")))))\n\n(defn escape-replacement [#?(:clj pattern :cljs _pattern) s]\n  #?(:clj (if (string? pattern)\n            s\n            (string/re-quote-replacement s))\n     :cljs (string/replace s #\"\\$\" \"$$$$\")))\n\n(defn blank-form [form]\n  (cond\n    (map? form)\n    (zipmap (keys form) (repeat :expound.problems/irrelevant))\n\n    (vector? form)\n    (vec (repeat (count form) :expound.problems/irrelevant))\n\n    (set? form)\n    form\n\n    (or (list? form)\n        (seq? form))\n    (apply list (repeat (count form) :expound.problems/irrelevant))\n\n    :else\n    :expound.problems/irrelevant))\n\n(s/fdef summary-form\n  :args (s/cat :show-valid-values? boolean?\n               :form any?\n               :highlighted-path :expound/path))\n(defn summary-form [show-valid-values? form in]\n  (let [[k & rst] in\n        rst (or rst [])\n        displayed-form (if show-valid-values? form (blank-form form))]\n    (cond\n      (empty? in)\n      :expound.problems/relevant\n\n      (and (map? form) (paths/kps? k))\n      (-> displayed-form\n          (dissoc (:key k))\n          (assoc (summary-form show-valid-values? (:key k) rst)\n                 :expound.problems/irrelevant))\n\n      (and (map? form) (paths/kvps? k))\n      (recur show-valid-values? (nth (seq form) (:idx k)) rst)\n\n      (associative? form)\n      (assoc displayed-form\n             k\n             (summary-form show-valid-values? (get form k) rst))\n\n      (and (int? k) (seq? form))\n      (apply list (-> displayed-form\n                      vec\n                      (assoc k (summary-form show-valid-values? (nth form k) rst))))\n\n      (and (int? k) (set? form))\n      (into #{} (-> displayed-form\n                    vec\n                    (assoc k (summary-form show-valid-values? (nth (seq form) k) rst))))\n\n      (and (int? k) (list? form))\n      (into '() (-> displayed-form\n                    vec\n                    (assoc k (summary-form show-valid-values? (nth (seq form) k) rst))))\n\n      (and (int? k) (string? form))\n      (string/join (assoc (vec form) k :expound.problems/relevant))\n\n      :else\n      (throw (ex-info \"Cannot find path segment in form. This can be caused by using conformers to transform values, which is not supported in Expound\"\n                      {:form form\n                       :in in})))))\n\n;; FIXME - this function is not intuitive.\n(defn highlight-line\n  [prefix replacement]\n  (let [max-width (apply max (map #(count (str %)) (string/split-lines replacement)))]\n    (indent (count (str prefix))\n            (apply str (repeat max-width \"^\")))))\n\n(defn highlighted-value\n  \"Given a problem, returns a pretty printed\n   string that highlights the problem value\"\n  [opts problem]\n  (let [{:keys [:expound/form :expound/in]} problem\n        {:keys [show-valid-values?] :or {show-valid-values? false}} opts\n        printed-val (pprint-str (paths/value-in form in))\n        relevant (str \"(\" :expound.problems/relevant \"|(\" :expound.problems/kv-relevant \"\\\\s+\" :expound.problems/kv-relevant \"))\")\n        regex (re-pattern (str \"(.*)\" relevant \".*\"))\n        s (binding [*print-namespace-maps* false] (pprint-str (walk/prewalk-replace {:expound.problems/irrelevant '...} (summary-form show-valid-values? form in))))\n        [line prefix & _more] (re-find regex s)\n        highlighted-line (-> line\n                             (string/replace (re-pattern relevant) (escape-replacement\n                                                                    (re-pattern relevant)\n                                                                    (indent 0 (count prefix) (ansi/color printed-val :bad-value))))\n                             (str \"\\n\" (ansi/color (highlight-line prefix printed-val)\n                                                   :pointer)))]\n    ;;highlighted-line\n    (no-trailing-whitespace (string/replace s line (escape-replacement line highlighted-line)))))\n"]}