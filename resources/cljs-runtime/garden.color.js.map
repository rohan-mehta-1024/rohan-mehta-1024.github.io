{"version":3,"sources":["garden/color.cljc"],"mappings":"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AA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA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","names":["this__4380__auto__","k__4381__auto__","this__4382__auto__","k44246","else__4383__auto__","G__44251","cljs.core/Keyword","red","green","blue","hue","saturation","lightness","alpha","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__44256","vec__44257","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__44245","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this44247","other44248","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__44269","cljs.core/keyword-identical?","expr__44270","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","self__","args44250","cljs.core/aclone","garden.color/CSSColor","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__44249","extmap__4419__auto__","G__44278","cljs.core/record?","garden.color/->CSSColor","garden.color/map->CSSColor","this","k","missing","garden.color/as-color","var_args","G__44281","garden.color/rgb","js/Error","p__44282","vec__44283","r","g","b","vs","p1__44279#","cljs.core/every?","garden.util/between?","G__44286","cljs.core.ex_info","garden.color.rgb","G__44288","garden.color/rgba","p__44289","vec__44290","a","G__44293","garden.color.rgba","G__44296","garden.color/hsl","p__44297","vec__44298","h","s","l","vec__44301","p1__44294#","cljs.core.map","G__44304","cljs.core/mod","garden.color.hsl","G__44306","garden.color/hsla","p__44307","vec__44308","G__44311","garden.color.hsla","garden.color/rgb?","color","cljs.core/map?","garden.color/hsl?","garden.color/hsla?","garden.color/color?","x","garden.color/hex-re","garden.color/hex?","cljs.core/boolean","cljs.core/re-matches","garden.color/hex->rgb","temp__5735__auto__","vec__44314","_","hex","cljs.core.apply","cljs.core/str","p1__44312#","cljs.core.mapcat","cljs.core/re-seq","p1__44313#","garden.util.string__GT_int","p__44317","map__44318","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","garden.color/rgb->hex","v","garden.util.format","garden.util.int__GT_string","clojure.string/replace","hex-part","garden.color/trim-one","p__44321","map__44322","garden.color/rgb->hsl","vec__44324","p1__44320#","mx","x__4214__auto__","y__4215__auto__","mn","x__4217__auto__","y__4218__auto__","d","pred__44327","expr__44328","cljs.core/=","p__44331","map__44332","garden.color/hsl->rgb","vec__44334","m2","m1","p1__44330#","G__44337","G__44338","G__44339","garden.color/hue->rgb","G__44340","G__44341","G__44342","garden.color/hsl->hex","garden.color/hex->hsl","garden.color/percent-clip","cljs.core.partial","garden.util/clip","garden.color/zero-to-one-clip","garden.color/rgb-clip","garden.color/as-hex","garden.color/as-rgb","garden.color/as-hsl","garden.color/as-hsla","current-alpha","garden.color/restrict-rgb","m","cljs.core/select-keys","garden.color/make-color-operation","op","o","cljs.core.comp","G__44343","cljs.core.merge_with","more","color-op","garden$color$make_color_operation_$_color_op","garden.color/color+","cljs.core/+","garden.color/color-","cljs.core/-","garden.color/color*","cljs.core/*","cljs.core//","garden.color/color-div","garden.color/update-hsla-field","field","f","cljs.core.update","garden.color/rotate-hue","amount","p1__44344#","garden.color/saturate","garden.color/desaturate","garden.color/lighten","garden.color/darken","garden.color/transparentize","garden.color/opacify","garden.color/invert","G__44345","G__44350","garden.color/mix","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq44347","G__44348","cljs.core/first","cljs.core/next","G__44349","self__4723__auto__","color-1","color-2","c1","c2","G__44351","garden.util/average","garden.color.mix","garden.color/complement","args__4742__auto__","argseq__4743__auto__","garden.color/hue-rotations","seq44352","G__44353","amounts","G__44355","garden.color/analogous","garden.color.analogous","clockwise?","sign","garden.color.hue_rotations","garden.color/triad","G__44357","garden.color/split-complement","garden.color.split_complement","distance-from-complement","garden.color/abs","G__44359","garden.color/tetrad","garden.color.tetrad","angle","G__44361","garden.color/shades","garden.color.shades","step","c","iter__4529__auto__","s__44363","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__44365","cljs.core/chunk-buffer","i__44364","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44362","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","i","cljs.core.range","garden.color/color-name->hex","garden.color/ex-info-color-name","n","cljs.core.pr_str","cljs.core/set","cljs.core/keys","garden.color/color-name->color","cljs.core/memoize","garden.color/from-name","temp__5733__auto__","cljs.core.keyword","G__44367","garden.color/scale-color-value","value","garden.color.scale_color_value","min-val","max-val","garden.color/scale-lightness","garden.color/scale-saturation","garden.color/scale-alpha","p1__44368#","p2__44369#","garden.color/decrown-hex","garden.color/crown-hex","cljs.core/re-find","garden.color/expand-hex","clojure.string.join","cljs.core/vector","cljs.core.repeat","garden.color/hex->long","js/parseInt","garden.color/long->hex","long","garden.color/weighted-mix","weight","vec__44371","vec__44374","weight-1","weight-2","p1__44370#","long-1","long-2","cljs.core/chunk-first"],"sourcesContent":["(ns garden.color\n  \"Utilities for color creation, conversion, and manipulation.\"\n  (:refer-clojure :exclude [complement])\n  #?(:cljs\n     (:require-macros\n      [garden.color :refer [defcolor-operation]]))\n  (:require\n   [clojure.string :as string]\n   [garden.util :as util])\n  #?(:clj\n     (:import clojure.lang.IFn)))\n\n;; Many of the functions in this namespace were ported or inspired by\n;; the implementations included with Sass\n;; (http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html).\n;; Some additional functions have been added such as `triad` and\n;; `tetrad` for generating sets of colors.\n\n;; Converts a color to a hexadecimal string (implementation below).\n(declare as-hex)\n\n(defrecord CSSColor [red green blue hue saturation lightness alpha]\n  IFn\n  #?(:clj\n      (invoke [this] this))\n  #?(:clj\n      (invoke [this k]\n              (get this k)))\n  #?(:clj\n      (invoke [this k missing]\n              (get this k missing)))\n  #?(:cljs\n      (-invoke [this] this))\n  #?(:cljs\n      (-invoke [this k]\n               (get this k)))\n  #?(:cljs\n      (-invoke [this k missing]\n               (get this k missing)))\n  #?(:clj\n      (applyTo [this args]\n               (clojure.lang.AFn/applyToHelper this args))))\n\n(def as-color map->CSSColor)\n\n(defn rgb\n  \"Create an RGB color.\"\n  ([[r g b :as vs]]\n     (if (every? #(util/between? % 0 255) vs)\n       (as-color {:red r :green g :blue b})\n       (throw\n        (ex-info \"RGB values must be between 0 and 255\" {}))))\n  ([r g b]\n     (rgb [r g b])))\n\n(defn rgba\n  \"Create an RGBA color.\"\n  ([[r g b a]]\n     (if (util/between? a 0 1)\n       (as-color (assoc (rgb [r g b]) :alpha a))\n       (throw\n        (ex-info \"Alpha value must be between 0 and 1\" {}))))\n  ([r g b a]\n     (rgba [r g b a])))\n\n(defn hsl\n  \"Create an HSL color.\"\n  ([[h s l]]\n     ;; Handle CSSUnits.\n     (let [[h s l] (map #(get % :magnitude %) [h s l])]\n       (if (and (util/between? s 0 100)\n                (util/between? l 0 100))\n         (as-color {:hue (mod h 360) :saturation s :lightness l})\n         (throw\n          (ex-info \"Saturation and lightness must be between 0(%) and 100(%)\" {})))))\n  ([h s l]\n     (hsl [h s l])))\n\n(defn hsla\n  \"Create an HSLA color.\"\n  ([[h s l a]]\n     (if (util/between? a 0 1)\n       (as-color (assoc (hsl [h s l]) :alpha a))\n       (throw\n        (ex-info \"Alpha value must be between 0 and 1\" {}))))\n  ([h s l a]\n     (hsla [h s l a])))\n\n(defn rgb?\n  \"Return true if color is an RGB color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:red :green :blue})))\n\n(defn hsl?\n  \"Return true if color is an HSL color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:hue :saturation :lightness})))\n\n(defn hsla?\n  \"Return true if color is an HSLA color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:hue :saturation :lightness :alpha})))\n\n(defn color?\n  \"Return true if x is a color.\"\n  [x]\n  (or (rgb? x) (hsl? x)))\n\n(def ^{:doc \"Regular expression for matching a hexadecimal color.\n             Matches hexadecimal colors of length three or six possibly\n             lead by a \\\"#\\\". The color portion is captured.\"}\n  ;; Quantifier must be in this order or JavaScript engines will match\n  ;; 3 chars even when 6 are provided (failing re-matches).\n  hex-re #\"#?([\\da-fA-F]{6}|[\\da-fA-F]{3})\")\n\n(defn hex?\n  \"Returns true if x is a hexadecimal color.\"\n  [x]\n  (boolean (and (string? x) (re-matches hex-re x))))\n\n(defn hex->rgb\n  \"Convert a hexadecimal color to an RGB color map.\"\n  [s]\n  (when-let [[_ hex] (re-matches hex-re s)]\n    (let [hex (if (= 3 (count hex))\n                (apply str (mapcat #(list % %) hex))\n                hex)]\n      (->> (re-seq #\"[\\da-fA-F]{2}\" hex)\n           (map #(util/string->int % 16))\n           (rgb)))))\n\n(defn rgb->hex\n  \"Convert an RGB color map to a hexadecimal color.\"\n  [{r :red g :green b :blue}]\n  (letfn [(hex-part [v]\n            (-> (util/format \"%2s\" (util/int->string v 16))\n                (string/replace \" \" \"0\")))]\n    (apply str \"#\" (map hex-part [r g b]))))\n\n(defn trim-one [x]\n  (if (< 1 x) 1 x))\n\n(defn rgb->hsl\n  \"Convert an RGB color map to an HSL color map.\"\n  [{:keys [red green blue] :as color}]\n  (if (hsl? color)\n    color\n    (let [[r g b] (map #(/ % 255) [red green blue])\n          mx (max r g b)\n          mn (min r g b)\n          d (- mx mn)\n          h (condp = mx\n              mn 0\n              r (* 60 (/ (- g b) d))\n              g (+ (* 60 (/ (- b r) d)) 120)\n              b (+ (* 60 (/ (- r g) d)) 240))\n          l (trim-one (/ (+ mx mn) 2))\n          s (trim-one\n              (cond\n                (= mx mn) 0\n                (< l 0.5) (/ d (* 2 l))\n                :else (/ d (- 2 (* 2 l)))))]\n      (hsl (mod h 360) (* 100 s) (* 100 l)))))\n\n(declare hue->rgb)\n\n;; SEE: http://www.w3.org/TR/css3-color/#hsl-color.\n(defn hsl->rgb\n  \"Convert an HSL color map to an RGB color map.\"\n  [{:keys  [hue saturation lightness] :as color}]\n  (if (rgb? color)\n    color\n    (let [h (/ hue 360.0)\n          s (/ saturation 100.0)\n          l (/ lightness 100.0)\n          m2 (if (<= l 0.5)\n               (* l (inc s))\n               (- (+ l s) (* l s)))\n          m1 (- (* 2 l) m2)\n          [r g b] (map #(int (+ 0.5 (* % 0xff)))\n                       [(hue->rgb m1 m2 (+ h (/ 1.0 3)))\n                        (hue->rgb m1 m2 h)\n                        (hue->rgb m1 m2 (- h (/ 1.0 3)))])]\n      (rgb [r g b]))))\n\n(defn- hue->rgb\n  [m1 m2 h]\n  (let [h (cond\n           (< h 0) (inc h)\n           (> h 1) (dec h)\n           :else h)]\n    (cond\n     (< (* 6 h) 1) (+ m1 (* (- m2 m1) h 6))\n     (< (* 2 h) 1) m2\n     (< (* 3 h) 2) (+ m1 (* (- m2 m1) (- (/ 2.0 3) h) 6))\n     :else m1)))\n\n(defn hsl->hex\n  \"Convert an HSL color map to a hexadecimal string.\"\n  [color]\n  (-> color hsl->rgb rgb->hex))\n\n(defn hex->hsl\n  \"Convert a hexadecimal color to an HSL color.\"\n  [color]\n  (-> color hex->rgb rgb->hsl))\n\n(def percent-clip\n  (partial util/clip 0 100))\n\n(def ^{:arglists '([n])\n       :private true}\n  zero-to-one-clip\n  (partial util/clip 0.0 1.0))\n\n(def rgb-clip\n  (partial util/clip 0 255))\n\n(defn as-hex\n  \"Convert a color to a hexadecimal string.\"\n  [x]\n  (cond\n   (hex? x) x\n   (rgb? x) (rgb->hex x)\n   (hsl? x) (hsl->hex x)\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-rgb\n  \"Convert a color to a RGB.\"\n  [x]\n  (cond\n   (rgb? x) x\n   (hsl? x) (hsl->rgb x)\n   (hex? x) (hex->rgb x)\n   (number? x) (rgb (map rgb-clip [x x x]))\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-hsl\n  \"Convert a color to a HSL.\"\n  [x]\n  (cond\n   (hsl? x) x\n   (rgb? x) (rgb->hsl x)\n   (hex? x) (hex->hsl x)\n   (number? x) (hsl [x (percent-clip x) (percent-clip x)])\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-hsla\n  \"Converts a color to HSLA. Assumes an alpha value of 1.00 unless one is\n  currently set on color.\"\n  [color]\n  (let [current-alpha (get color :alpha 1.00)]\n    (if (hsla? color)\n      color\n      (-> color as-hsl (assoc :alpha current-alpha)))))\n\n(defn- restrict-rgb\n  [m]\n  (select-keys m [:red :green :blue]))\n\n(defn- make-color-operation\n  [op]\n  (fn color-op\n    ([a] a)\n    ([a b]\n       (let [o (comp rgb-clip op)\n             a (restrict-rgb (as-rgb a))\n             b (restrict-rgb (as-rgb b))]\n         (as-color (merge-with o a b))))\n    ([a b & more]\n       (reduce color-op (color-op a b) more))))\n\n#?(:clj\n   (defmacro ^:private defcolor-operation [name operator]\n     `(def ~name (make-color-operation ~operator))))\n\n(defcolor-operation\n  ^{:doc \"Add the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color+ +)\n\n(defcolor-operation\n  ^{:doc \"Subtract the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color- -)\n\n(defcolor-operation\n  ^{:doc \"Multiply the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color* *)\n\n(defcolor-operation\n  ^{:doc \"Divide the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color-div /)\n\n(defn- update-hsla-field\n  [color field f v]\n  (let [v (:magnitude v v)]\n    (-> color as-hsla (update field f v))))\n\n(defn rotate-hue\n  \"Rotates the hue value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :hue (comp #(mod % 360) +) amount))\n\n(defn saturate\n  \"Increase the saturation value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :saturation (comp percent-clip +) amount))\n\n(defn desaturate\n  \"Decrease the saturation value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :saturation (comp percent-clip -) amount))\n\n(defn lighten\n  \"Increase the lightness value a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :lightness (comp percent-clip +) amount))\n\n(defn darken\n  \"Decrease the lightness value a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :lightness (comp percent-clip -) amount))\n\n(defn transparentize\n  \"Decreases the alpha value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :alpha (comp zero-to-one-clip -) amount))\n\n(defn opacify\n  \"Increases the alpha value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :alpha (comp zero-to-one-clip +) amount))\n\n(defn invert\n  \"Return the inversion of a color.\"\n  [color]\n  (as-color (merge-with - {:red 255 :green 255 :blue 255} (as-rgb color))))\n\n(defn mix\n  \"Mix two or more colors by averaging their RGB channels.\"\n  ([color-1 color-2]\n     (let [c1 (restrict-rgb (as-rgb color-1))\n           c2 (restrict-rgb (as-rgb color-2))]\n       (as-color (merge-with util/average c1 c2))))\n  ([color-1 color-2 & more]\n     (reduce mix (mix color-1 color-2) more)))\n\n;;;; Color wheel functions.\n\n(defn complement\n  \"Return the complement of a color.\"\n  [color]\n  (rotate-hue color 180))\n\n(defn- hue-rotations\n  ([color & amounts]\n     (map (partial rotate-hue color) amounts)))\n\n(defn analogous\n  \"Given a color return a triple of colors which are 0, 30, and 60\n  degrees clockwise from it. If a second falsy argument is passed the\n  returned values will be in a counter-clockwise direction.\"\n  ([color]\n     (analogous color true))\n  ([color clockwise?]\n     (let [sign (if clockwise? + -)]\n       (hue-rotations color 0 (sign 30) (sign 60)))))\n\n(defn triad\n  \"Given a color return a triple of colors which are equidistance apart\n  on the color wheel.\"\n  [color]\n  (hue-rotations color 0 120 240))\n\n(defn split-complement\n  \"Given a color return a triple of the color and the two colors on\n  either side of it's complement.\"\n  ([color]\n     (split-complement color 130))\n  ([color distance-from-complement]\n     (let [d (util/clip 1 179 distance-from-complement)]\n         (hue-rotations color 0 d (- d)))))\n\n(defn- abs\n  [x]\n  (if (neg? x) (- x) x))\n\n(defn tetrad\n  \"Given a color return a quadruple of four colors which are\n  equidistance on the color wheel (ie. a pair of complements). An\n  optional angle may be given for color of the second complement in the\n  pair (this defaults to 90 when only color is passed).\"\n  ([color]\n     (tetrad color 90))\n  ([color angle]\n     (let [a (util/clip 1 90 (abs (:magnitude angle angle)))\n           color-2 (rotate-hue color a)]\n       [(rotate-hue color 0)\n        (complement color)\n        color-2\n        (complement color-2)])))\n\n(defn shades\n  \"Given a color return a list of shades from lightest to darkest by\n  a step. By default the step is 10. White and black are excluded from\n  the returned list.\"\n  ([color]\n     (shades color 10))\n  ([color step]\n     (let [c (as-hsl color)]\n       (for [i (range 1 (int (/ 100.0 step)))]\n         (assoc c :lightness (* i step))))))\n\n;; ---------------------------------------------------------------------\n;; CSS color name conversion\n\n(def color-name->hex\n  {:aquamarine \"#7fffd4\"\n   :aliceblue \"#f0f8ff\"\n   :antiquewhite \"#faebd7\"\n   :aqua \"#00ffff\"\n   :azure \"#f0ffff\"\n   :beige \"#f5f5dc\"\n   :bisque \"#ffe4c4\"\n   :black \"#000000\"\n   :blanchedalmond \"#ffebcd\"\n   :blue \"#0000ff\"\n   :blueviolet \"#8a2be2\"\n   :brown \"#a52a2a\"\n   :burlywood \"#deb887\"\n   :cadetblue \"#5f9ea0\"\n   :chartreuse \"#7fff00\"\n   :chocolate \"#d2691e\"\n   :coral \"#ff7f50\"\n   :cornflowerblue \"#6495ed\"\n   :cornsilk \"#fff8dc\"\n   :crimson \"#dc143c\"\n   :cyan \"#00ffff\"\n   :darkblue \"#00008b\"\n   :darkcyan \"#008b8b\"\n   :darkgoldenrod \"#b8860b\"\n   :darkgray \"#a9a9a9\"\n   :darkgreen \"#006400\"\n   :darkgrey \"#a9a9a9\"\n   :darkkhaki \"#bdb76b\"\n   :darkmagenta \"#8b008b\"\n   :darkolivegreen \"#556b2f\"\n   :darkorange \"#ff8c00\"\n   :darkorchid \"#9932cc\"\n   :darkred \"#8b0000\"\n   :darksalmon \"#e9967a\"\n   :darkseagreen \"#8fbc8f\"\n   :darkslateblue \"#483d8b\"\n   :darkslategray \"#2f4f4f\"\n   :darkslategrey \"#2f4f4f\"\n   :darkturquoise \"#00ced1\"\n   :darkviolet \"#9400d3\"\n   :deeppink \"#ff1493\"\n   :deepskyblue \"#00bfff\"\n   :dimgray \"#696969\"\n   :dimgrey \"#696969\"\n   :dodgerblue \"#1e90ff\"\n   :firebrick \"#b22222\"\n   :floralwhite \"#fffaf0\"\n   :forestgreen \"#228b22\"\n   :fuchsia \"#ff00ff\"\n   :gainsboro \"#dcdcdc\"\n   :ghostwhite \"#f8f8ff\"\n   :gold \"#ffd700\"\n   :goldenrod \"#daa520\"\n   :gray \"#808080\"\n   :green \"#008000\"\n   :greenyellow \"#adff2f\"\n   :honeydew \"#f0fff0\"\n   :hotpink \"#ff69b4\"\n   :indianred \"#cd5c5c\"\n   :indigo \"#4b0082\"\n   :ivory \"#fffff0\"\n   :khaki \"#f0e68c\"\n   :lavender \"#e6e6fa\"\n   :lavenderblush \"#fff0f5\"\n   :lawngreen \"#7cfc00\"\n   :lemonchiffon \"#fffacd\"\n   :lightblue \"#add8e6\"\n   :lightcoral \"#f08080\"\n   :lightcyan \"#e0ffff\"\n   :lightgoldenrodyellow \"#fafad2\"\n   :lightgray \"#d3d3d3\"\n   :lightgreen \"#90ee90\"\n   :lightgrey \"#d3d3d3\"\n   :lightpink \"#ffb6c1\"\n   :lightsalmon \"#ffa07a\"\n   :lightseagreen \"#20b2aa\"\n   :lightskyblue \"#87cefa\"\n   :lightslategray \"#778899\"\n   :lightslategrey \"#778899\"\n   :lightsteelblue \"#b0c4de\"\n   :lightyellow \"#ffffe0\"\n   :lime \"#00ff00\"\n   :limegreen \"#32cd32\"\n   :linen \"#faf0e6\"\n   :magenta \"#ff00ff\"\n   :maroon \"#800000\"\n   :mediumaquamarine \"#66cdaa\"\n   :mediumblue \"#0000cd\"\n   :mediumorchid \"#ba55d3\"\n   :mediumpurple \"#9370db\"\n   :mediumseagreen \"#3cb371\"\n   :mediumslateblue \"#7b68ee\"\n   :mediumspringgreen \"#00fa9a\"\n   :mediumturquoise \"#48d1cc\"\n   :mediumvioletred \"#c71585\"\n   :midnightblue \"#191970\"\n   :mintcream \"#f5fffa\"\n   :mistyrose \"#ffe4e1\"\n   :moccasin \"#ffe4b5\"\n   :navajowhite \"#ffdead\"\n   :navy \"#000080\"\n   :oldlace \"#fdf5e6\"\n   :olive \"#808000\"\n   :olivedrab \"#6b8e23\"\n   :orange \"#ffa500\"\n   :orangered \"#ff4500\"\n   :orchid \"#da70d6\"\n   :palegoldenrod \"#eee8aa\"\n   :palegreen \"#98fb98\"\n   :paleturquoise \"#afeeee\"\n   :palevioletred \"#db7093\"\n   :papayawhip \"#ffefd5\"\n   :peachpuff \"#ffdab9\"\n   :peru \"#cd853f\"\n   :pink \"#ffc0cb\"\n   :plum \"#dda0dd\"\n   :powderblue \"#b0e0e6\"\n   :purple \"#800080\"\n   :red \"#ff0000\"\n   :rosybrown \"#bc8f8f\"\n   :royalblue \"#4169e1\"\n   :saddlebrown \"#8b4513\"\n   :salmon \"#fa8072\"\n   :sandybrown \"#f4a460\"\n   :seagreen \"#2e8b57\"\n   :seashell \"#fff5ee\"\n   :sienna \"#a0522d\"\n   :silver \"#c0c0c0\"\n   :skyblue \"#87ceeb\"\n   :slateblue \"#6a5acd\"\n   :slategray \"#708090\"\n   :slategrey \"#708090\"\n   :snow \"#fffafa\"\n   :springgreen \"#00ff7f\"\n   :steelblue \"#4682b4\"\n   :tan \"#d2b48c\"\n   :teal \"#008080\"\n   :thistle \"#d8bfd8\"\n   :tomato \"#ff6347\"\n   :turquoise \"#40e0d0\"\n   :violet \"#ee82ee\"\n   :wheat \"#f5deb3\"\n   :white \"#ffffff\"\n   :whitesmoke \"#f5f5f5\"\n   :yellow \"#ffff00\"\n   :yellowgreen \"#9acd32\"})\n\n(defn- ex-info-color-name\n  \"Helper function for from-name. Returns an instance of ExceptionInfo\n  for unknown colors.\"\n  [n]\n  (ex-info\n   (str \"Unknown color \" (pr-str n) \" see (:expected (ex-data e)) for a list of color names\")\n   {:given n\n    :expected (set (keys color-name->hex))}))\n\n(def\n  ^{:private true\n    :doc \"Helper function for from-name.\"}\n  color-name->color\n  (memoize (fn [k] (color-name->hex k))))\n\n(defn from-name\n  \"Given a CSS color name n return an instance of CSSColor.\"\n  [n]\n  (if-let [h (color-name->color (keyword n))]\n    h\n    (throw (ex-info-color-name n))))\n\n(defn- scale-color-value\n  ([value amount]\n    (scale-color-value value amount 0 100))\n  ([value amount min-val max-val]\n    (util/clip min-val max-val (* value (+ 1 (/ amount 100))))))\n\n\n(defn scale-lightness\n  \"Scales the lightness of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards.\"\n  [color amount]\n  (update-hsla-field color :lightness scale-color-value amount))\n\n(defn scale-saturation\n  \"Scales the saturation of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards.\"\n  [color amount]\n  (update-hsla-field color :saturation scale-color-value amount))\n\n(defn scale-alpha\n  \"Scales the alpha of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards.\"\n  [color amount]\n  (update-hsla-field color :alpha #(zero-to-one-clip (* %1 (+ 1 (/ %2 100)))) amount))\n\n(defn- decrown-hex [hex]\n  (string/replace hex #\"^#\" \"\"))\n\n(defn- crown-hex [hex]\n  (if (re-find #\"^#\" hex)\n    hex\n    (str \"#\" hex)))\n\n(defn- expand-hex\n  \"(expand-hex \\\"#abc\\\") -> \\\"aabbcc\\\"\n   (expand-hex \\\"333333\\\") -> \\\"333333\\\"\"\n  [hex]\n  (as-> (decrown-hex hex) _\n        (cond\n         (= 3 (count _)) (string/join (mapcat vector _ _))\n         (= 1 (count _)) (string/join (repeat 6 _))\n         :else _)))\n\n(defn- hex->long\n  \"(hex->long \\\"#abc\\\") -> 11189196\"\n  [hex]\n  (-> hex\n      (string/replace #\"^#\" \"\")\n      (expand-hex)\n      #?(:clj (Long/parseLong 16)\n         :cljs (js/parseInt 16))))\n\n(defn- long->hex\n  \"(long->hex 11189196) -> \\\"aabbcc\\\"\"\n  [long]\n  #?(:clj (Integer/toHexString long)\n     :cljs (.toString long 16)))\n\n(defn weighted-mix\n  \"`weight` is number 0 to 100 (%).\n   At 0, it weighs color-1 at 100%.\n   At 100, it weighs color-2 at 100%.\n   Returns hex string.\"\n  [color-1 color-2 weight]\n  (let [[weight-1 weight-2] (map #(/ % 100) [(- 100 weight) weight])\n        [long-1 long-2] (map (comp hex->long as-hex)\n                             [color-1 color-2])]\n    (-> (+ (* long-1 weight-1) (* long-2 weight-2))\n        (long->hex)\n        (expand-hex)\n        (crown-hex))))\n"]}