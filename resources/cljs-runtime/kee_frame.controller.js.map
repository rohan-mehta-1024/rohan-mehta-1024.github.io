{"version":3,"sources":["kee_frame/controller.cljc"],"mappings":"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","names":["kee-frame.controller/process-params","params","route","cljs.core/vector?","cljs.core.get_in","cljs.core/ifn?","kee-frame.controller/validate-and-dispatch!","dispatch","cljs.core/map?","re-frame.core/dispatch","cljs.spec.alpha.valid_QMARK_","expound.alpha.expound","cljs.core.ex_info","cljs.spec.alpha/explain-data","kee-frame.controller/debug-enabled?","map__41683","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","controllers?","kee-frame.state/debug-config","and__4115__auto__","kee-frame.state/debug?","kee-frame.controller/start!","id","ctx","start","re_frame.core.console","cljs.core.conj","kee-frame.controller/stop!","stop","p__41689","map__41690","kee-frame.controller/process-controller","last-params","current-params","ocr-41719","cljs.core.match/backtrack","e41729","js/Error","e__40585__auto__","e41731","e41732","e41730","cljs.core._EQ_","kee-frame.controller/apply-route","controllers","cljs.core.map","p__41733","vec__41734","cljs.core.nth","controller","cljs.core.assoc","cljs.core.into"],"sourcesContent":["(ns ^:no-doc kee-frame.controller\n  (:require\n   [re-frame.core :as rf]\n   #?(:cljs\n      [cljs.core.match :refer [match]])\n   #?(:clj\n      [clojure.core.match :refer [match]])\n   [kee-frame.state :as state]\n   [kee-frame.spec :as spec]\n   [kee-frame.fsm.alpha :as fsm]\n   [clojure.spec.alpha :as s]\n   [expound.alpha :as e]))\n\n(defn process-params [params route]\n  (cond\n    (vector? params) (get-in route params)\n    (ifn? params) (params route)))\n\n(defn validate-and-dispatch! [dispatch]\n  (when dispatch\n    (if (map? dispatch)\n      (rf/dispatch [::fsm/start dispatch])\n      (do\n        (when-not (s/valid? ::spec/event-vector dispatch)\n          (e/expound ::spec/event-vector dispatch)\n          (throw (ex-info \"Invalid dispatch value\"\n                          (s/explain-data ::spec/event-vector dispatch))))\n        (rf/dispatch dispatch)))))\n\n(defn debug-enabled? []\n  (let [{:keys [controllers?]\n         :or   {controllers? true}} @state/debug-config]\n    (and @state/debug?\n         controllers?)))\n\n(defn start! [id ctx start params]\n  (when start\n    (when (debug-enabled?)\n      (rf/console :log \"Starting controller \" id \" with params \" params))\n    (cond\n      (vector? start) (rf/dispatch (conj start params))\n      (ifn? start) (validate-and-dispatch! (start ctx params)))))\n\n(defn stop! [id ctx stop]\n  (when stop\n    (when (debug-enabled?)\n      (rf/console :log \"Stopping controller \" id))\n    (cond\n      (vector? stop) (rf/dispatch stop)\n      (ifn? stop) (validate-and-dispatch! (stop ctx)))))\n\n(defn process-controller [id {:keys [last-params params start stop]} ctx route]\n  (let [current-params (process-params params route)]\n    (match [last-params current-params (= last-params current-params)]\n           [_ _ true] nil\n           [nil _ false] (start! id ctx start current-params)\n           [_ nil false] (stop! id ctx stop)\n           [_ _ false] (do (stop! id ctx stop)\n                           (start! id ctx start current-params)))\n    current-params))\n\n(defn apply-route [controllers ctx route]\n  (->> controllers\n       (map (fn [[id controller]]\n              [id (assoc controller :last-params (process-controller id controller ctx route))]))\n       (into {})))"]}