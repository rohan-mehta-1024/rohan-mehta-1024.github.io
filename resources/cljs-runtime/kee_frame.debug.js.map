{"version":3,"sources":["kee_frame/debug.cljc"],"mappings":";AAMA,AAAA,AAAAA,AAAMG;AAAN,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAuBG;AAAvB,AACE,AAAAC,AAAA,AAAAC,AAC8BO;AAD9BR,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAE,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAAJ,AAAAA;AAAA,AAAAK,AAAAL,AAAA,AAAcM;AAAd,AAAAD,AAAAL,AAAA,AAAA,AAAwBO;AAAxB,AAEE,AAAAE,AAAA,AAAAR,AAAMS;AAAN,AAAA,AAAAD;AAAA,AAAAA,AACKF;AADL,AAAA,AAAAE;AAEK,AAACE,AAAI,AAAAF,AAAKH;AAAL,AAAA,AAAAG;AACK,AAACH,AAAAA,AAAAA,AAAUP,AAAAA;;AADhBU;;;;AAFVA;;;AAAAA;;;AAKJ,AAAA,AAAMG,AAAmBC;AAAzB,AACE,AAAA,AAAA,AAAA,AAACC,AAES,AACGC;AADH,AAEE,AAAMC,AAAM,AAAA,AAACC,AAAaF;AAA1B,AACE,AAAM,AAACjB,AAAekB;AAAtB,AACE,AAAA,AAAA,AAACE,AAA+BF;;AADlC;;AAEAD;AAPd,AAQS,AACGA;AADH,AAEE,AAAMC,AAAM,AAAA,AAACC,AAAaF;AACpBI,AAAQ,AAAA,AAACF,AAAaF;AACtBK,AAAO,AAAA,AAAA,AAACC,AAAWN;AACnBO,AAAQ,AAAA,AAACC,AAAO,AAACF,AAAWN;AAHlC,AAKE,AAAM,AAAAN,AAAK,AAACX,AAAekB;AAArB,AAAA,AAAAP;AAA4B,AAACe,AAAIF;;AAAjCb;;;AAAN,AACE,AAAA,AAAA,AAAA,AAACS,AAA6C,AAACO,AAAMT,AAAYM;;AADnE;;AAGA,AAAM,AAAAb,AAAK,AAACX,AAAekB;AAArB,AAAA,AAAAP;AAA4B,AAAA,AAACiB,AAAKN;;AAAlCX;;;AAAN,AACE,AAAAkB,AAA+B,AAACG,AAAUX,AAAQC;AAAlD,AAAAvB,AAAA8B,AAAA,AAAA,AAAOC;AAAP,AAAA/B,AAAA8B,AAAA,AAAA,AAAmBE;AACbE,AAAY,AAAI,AAAA,AAAA,AAAOH,AAAa,AAAA,AAAA,AAAOC;AADjD,AAEE,AAAME;AAAN,AACE,AAAA,AAAA,AAACb,AAA2C,AAACO,AAAMT;;AACnD,AAAA,AAAA,AAACE,AAA4BU;;AAC7B,AAAA,AAAA,AAACV,AAA4BW;;AAC7B,AAAA,AAACG;;AAJH;;AAHJ;;AAQAjB","names":["p__42978","vec__42979","cljs.core.nth","kee-frame.debug/debug-enabled?","event-key","map__42982","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","blacklist","events?","kee-frame.state/debug-config","and__4115__auto__","kee-frame.state/debug?","cljs.core/not","kee-frame.debug/debug-interceptor","debug?","re_frame.interceptor.__GT_interceptor","context","event","re_frame.interceptor.get_coeffect","re_frame.core.console","orig-db","new-db","re_frame.interceptor.get_effect","effects","cljs.core.dissoc","cljs.core/seq","cljs.core/first","cljs.core.not_EQ_","vec__42986","only-before","only-after","clojure.data/diff","db-changed?","re-frame.core/console"],"sourcesContent":["(ns ^:no-doc kee-frame.debug\n  (:require [re-frame.core :refer [console]]\n            [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect]]\n            [clojure.data :as data]\n            [kee-frame.state :as state]))\n\n(defn debug-enabled? [[event-key]]\n  (let [{:keys [blacklist events?]\n         :or   {events? true}} @state/debug-config]\n    (and @state/debug?\n         events?\n         (not (and blacklist\n                   (blacklist event-key))))))\n\n(defn debug-interceptor [debug?]\n  (->interceptor\n    :id :debug\n    :before (fn debug-before\n              [context]\n              (let [event (get-coeffect context :event)]\n                (when (debug-enabled? event)\n                  (console :log \"Handling event \" event))\n                context))\n    :after (fn debug-after\n             [context]\n             (let [event (get-coeffect context :event)\n                   orig-db (get-coeffect context :db)\n                   new-db (get-effect context :db ::not-found)\n                   effects (dissoc (get-effect context) :db)]\n\n               (when (and (debug-enabled? event) (seq effects))\n                 (console :log \"Side effects caused by event \" (first event) \": \" effects))\n\n               (when (and (debug-enabled? event) (not= new-db ::not-found))\n                 (let [[only-before only-after] (data/diff orig-db new-db)\n                       db-changed? (or (some? only-before) (some? only-after))]\n                   (when db-changed?\n                     (console :group \"db clojure.data/diff for:\" (first event))\n                     (console :log \"only before:\" only-before)\n                     (console :log \"only after :\" only-after)\n                     (console :groupEnd))))\n               context))))"]}