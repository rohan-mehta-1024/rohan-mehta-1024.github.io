{"version":3,"sources":["kee_frame/interceptors.cljc"],"mappings":";AAIA,AAAA,AAAMA,AACHC,AAAGC;AADN,AAEE,AAAA,AAACC,AAAyCF,AAAGC;;AAE/C,AAAA,AAAME,AACHH;AADH,AAEE,AAAA,AAAA,AAACI,AAAMC,AACAC,AAEAC,AAAOP;;AAEhB;;;AAAKQ,AAEH,AAAA,AAAuBC,AAAMC;AAA7B,AACU,AAAMC,AAAE,AAACC,AAAMH;AAAf,AACE,AAACI,AAAKF,AAAE,AAACG,AAAOJ,AAAGD;;AAF/B,AAGmCM;AAHnC,AAIU,AAAMC,AAAQ,AAACC,AAAK,AAAA,AAACC;AAArB,AACE,AAAA,AAACC,AAAOJ,AAAeK,AAAaJ;;AALhD,AAME,AAAA,AAAA,AAAA,AAACK,AAEQC","names":["kee-frame.interceptors/reg-global-interceptor","id","interceptor","re-frame.registrar/register-handler","kee-frame.interceptors/clear-global-interceptor","cljs.core.swap_BANG_","re-frame.registrar/kind->id->handler","cljs.core/update-in","cljs.core/dissoc","kee-frame.interceptors/add-global-interceptors","queue","xs","q","cljs.core/empty","cljs.core.into","cljs.core.concat","context","globals","cljs.core/vals","re_frame.registrar.get_handler","cljs.core.update","cut-in-queue","re_frame.core.__GT_interceptor","add-global-interceptors*"],"sourcesContent":["(ns kee-frame.interceptors\n  (:require [re-frame.core :as f]\n            [re-frame.registrar :as reg]))\n\n(defn reg-global-interceptor\n  [id interceptor]\n  (reg/register-handler :global-interceptor id interceptor))\n\n(defn clear-global-interceptor\n  [id]\n  (swap! reg/kind->id->handler\n         update-in\n         [:global-interceptor]\n         dissoc id))\n\n(def add-global-interceptors\n  \"Adds global interceptors to the beginning of queue.\"\n  (letfn [(cut-in-queue [queue xs]\n            (let [q (empty queue)]\n              (into q (concat xs queue))))\n          (add-global-interceptors* [context]\n            (let [globals (vals (reg/get-handler :global-interceptor))]\n              (update context :queue cut-in-queue globals)))]\n    (f/->interceptor\n     :id :add-global-interceptors\n     :before add-global-interceptors*)))\n\n"]}