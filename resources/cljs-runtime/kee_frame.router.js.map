{"version":3,"sources":["kee_frame/router.cljc"],"mappings":"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","names":["kee-frame.router/default-chain-links","effects","cljs.core.get_in","dispatch","cljs.core/assoc-in","kee-frame.router/url","data","cljs.core/deref","kee-frame.state/router","cljs.core.ex_info","kee-frame.api/data->url","kee-frame.router/goto","kee-frame.api/navigate!","kee-frame.state/navigator","kee-frame.router/nav-handler","router","route-change-event","path","temp__5733__auto__","route","kee-frame.api/url->data","re-frame.core/dispatch","or__4126__auto__","re_frame.core.console","re-frame.core/console","cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.core/keyword?","cljs.spec.alpha/rep-impl","cljs.spec.alpha.every_impl","cljs.spec.alpha.tuple_impl","G__43150","cljs.core/map?","i__12717__auto__","v__12718__auto__","cljs.core.nth","cljs.core/any?","kee-frame.router/assert-route-data","cljs.spec.alpha.valid_QMARK_","expound.alpha.expound","cljs.spec.alpha/explain-data","kee-frame.router/url-not-found","routes","kee-frame.router/route-match-not-found","url","kee-frame.router/match-data","hash?","vec__43152","_","path-params","cljs.core.apply","reitit.core/match-by-name","temp__5739__auto__","q","h","kee-frame.router/match-url","vec__43155","vec__43158","path+query","fragment","clojure.string/replace","clojure.string.split","query","G__43161","reitit.core/match-by-path","cljs.core.assoc","this__4380__auto__","k__4381__auto__","this__4382__auto__","k43163","else__4383__auto__","G__43167","cljs.core/Keyword","not-found","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__43168","vec__43169","k__4403__auto__","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__43162","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this43164","other43165","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","cljs.core/PROTOCOL_SENTINEL","this__4387__auto__","k__4388__auto__","pred__43178","cljs.core/keyword-identical?","expr__43179","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","kee-frame.router/ReititRouter","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__43166","extmap__4419__auto__","G__43184","cljs.core/record?","kee-frame.router/->ReititRouter","kee-frame.router/map->ReititRouter","G__43177","p__43186","map__43187","cljs.core/hash-map","kee-frame.router/bootstrap-routes","hash-routing?","scroll","initialized?","cljs.core/boolean","reitit.core.router","cljs.core/reset!","re-frame.core/reg-fx","kee-frame.scroll/start!","p1__43185#","kee-frame.interop/make-navigator","kee-frame.api/dispatch-current!","re_frame.core.reg_event_db","p__43190","vec__43191","db","initial","cljs.core.merge","kee-frame.router/debug-enabled?","map__43194","routes?","kee-frame.state/debug-config","and__4115__auto__","kee-frame.state/debug?","kee-frame.router/reg-route-event","re_frame.core.reg_event_fx","re-frame.core/debug","p__43196","p__43197","map__43198","vec__43199","ctx","kee-frame.scroll/monitor-requests!","cljs.core.swap_BANG_","kee-frame.state/controllers","kee-frame.controller/apply-route","p__43203","map__43204","kee-frame.router/start!","initial-db","app-db-spec","debug?","root-component","chain-links","screen","debug-config","config","kee-frame.interop/set-log-level!","kee-frame.state/app-db-spec","re-chain.core/configure!","re-frame.core/dispatch-sync","cljs.core/boolean?","kee-frame.state/breakpoints-initialized?","kee-frame.interop/set-breakpoint-subs","kee-frame.interop/set-breakpoints","re_frame.core.reg_sub","kee-frame.interop/render-root","kee-frame.router/make-route-component","component","cljs.core/fn?","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","kee-frame.router/switch-route","seq43206","G__43207","cljs.core/first","cljs.core/next","self__4723__auto__","f","pairs","cljs.core/even?","re_frame.core.subscribe","dispatch-value","G__43208","G__43212","vec__43213","seq__43214","first__43215","vec__43216","seq__43217","first__43218","first-pair","rest-pairs","cljs.core.partition","vec__43219","value"],"sourcesContent":["(ns ^:no-doc kee-frame.router\n  (:require [kee-frame.interop :as interop]\n            [re-frame.core :as rf]\n            [re-chain.core :as chain]\n            [kee-frame.api :as api :refer [dispatch-current! navigate! url->data data->url]]\n            [kee-frame.interop :as interop]\n            [kee-frame.state :as state]\n            [kee-frame.scroll :as scroll]\n            [kee-frame.controller :as controller]\n            [reitit.core :as reitit]\n            [clojure.string :as str]\n            [clojure.spec.alpha :as s]\n            [kee-frame.spec :as spec]\n            [expound.alpha :as e]))\n\n(def default-chain-links [{:effect-present? (fn [effects] (:http-xhrio effects))\n                           :get-dispatch    (fn [effects] (get-in effects [:http-xhrio :on-success]))\n                           :set-dispatch    (fn [effects dispatch] (assoc-in effects [:http-xhrio :on-success] dispatch))}])\n\n(defn url [data]\n  (when-not @state/router\n    (throw (ex-info \"No router defined for this app\" {:router @state/router})))\n  (data->url @state/router data))\n\n(defn goto [data]\n  (navigate! @state/navigator (url data)))\n\n(defn nav-handler [router route-change-event]\n  (fn [path]\n    (if-let [route (url->data router path)]\n      (rf/dispatch [(or route-change-event ::route-changed) route])\n      (do (rf/console :group \"No route match found\")\n          (rf/console :error \"No match found for path \" path)\n          (rf/console :groupEnd)))))\n\n(s/def ::reitit-route-data (s/cat :route-name keyword? :path-params (s/* (s/map-of keyword? any?))))\n\n(defn assert-route-data [data]\n  (when-not (s/valid? ::reitit-route-data data)\n    (e/expound ::reitit-route-data data)\n    (throw (ex-info \"Bad route data input\" (s/explain-data ::reitit-route-data data)))))\n\n(defn url-not-found [routes data]\n  (throw (ex-info \"Could not find url for the provided data\"\n                  {:routes routes\n                   :data   data})))\n\n(defn route-match-not-found [routes url]\n  (throw (ex-info \"No match for URL in routes\"\n                  {:url    url\n                   :routes routes})))\n\n(defn match-data [routes route hash?]\n  (let [[_ path-params] route]\n    (str (when hash? \"/#\") (:path (apply reitit/match-by-name routes route))\n         (when-some [q (:query-string path-params)] (str \"?\" q))\n         (when-some [h (:hash path-params)] (str \"#\" h)))))\n\n(defn match-url [routes url]\n  (let [[path+query fragment] (-> url (str/replace #\"^/#/\" \"/\") (str/split #\"#\" 2))\n        [path query] (str/split path+query #\"\\?\" 2)]\n    (some-> (reitit/match-by-path routes path)\n            (assoc :query-string query :hash fragment))))\n\n(defrecord ReititRouter [routes hash? not-found]\n  api/Router\n  (data->url [_ data]\n    (assert-route-data data)\n    (or (match-data routes data hash?)\n        (url-not-found routes data)))\n  (url->data [_ url]\n    (or (match-url routes url)\n        (some->> not-found (match-url routes))\n        (route-match-not-found routes url))))\n\n(defn bootstrap-routes [{:keys [routes router hash-routing? scroll route-change-event not-found]}]\n  (let [initialized? (boolean @state/navigator)\n        router (or router (->ReititRouter (reitit/router routes) hash-routing? not-found))]\n    (reset! state/router router)\n    (rf/reg-fx :navigate-to goto)\n\n    (when-not initialized?\n      (when scroll (scroll/start!))\n      (reset! state/navigator\n              (interop/make-navigator {:nav-handler  (nav-handler router route-change-event)\n                                       :path-exists? #(boolean (url->data router %))})))\n    (dispatch-current! @state/navigator)))\n\n(rf/reg-event-db :init (fn [db [_ initial]] (merge initial db)))\n\n\n(defn debug-enabled? []\n  (let [{:keys [routes?]\n         :or   {routes? true}}  @state/debug-config]\n    (and @state/debug?\n         routes?)))\n\n(defn reg-route-event [scroll]\n  (rf/reg-event-fx ::route-changed\n                   (when (debug-enabled?) [rf/debug])\n                   (fn [{:keys [db] :as ctx} [_ route]]\n                     (when scroll\n                       (scroll/monitor-requests! route))\n                     (swap! state/controllers controller/apply-route ctx route)\n                     (merge {:db (assoc db :kee-frame/route route)}\n                            (when scroll\n                              {:dispatch-later [{:ms       50\n                                                 :dispatch [::scroll/poll route 0]}]})))))\n\n(defn start! [{:keys [routes initial-db router app-db-spec debug? root-component chain-links\n                      screen scroll debug-config]\n               :or   {debug? false\n                      scroll true}\n               :as   config}]\n  (interop/set-log-level! debug-config)\n  (reset! state/app-db-spec app-db-spec)\n  (reset! state/debug? debug?)\n  (reset! state/debug-config debug-config)\n  (chain/configure! (concat default-chain-links\n                            chain-links))\n\n  (reg-route-event scroll)\n  (when (and routes router)\n    (throw (ex-info \"Both routes and router specified. If you want to use these routes, pass them to your router constructor.\"\n                    {:routes routes\n                     :router router})))\n  (when (or routes router)\n    (bootstrap-routes config))\n\n  (when initial-db\n    (rf/dispatch-sync [:init initial-db]))\n\n  (when screen\n    (let [config (when-not (boolean? screen) screen)]\n      (if @state/breakpoints-initialized?\n        (interop/set-breakpoint-subs config)\n        (do (interop/set-breakpoints config)\n            (reset! state/breakpoints-initialized? true)))))\n\n  (rf/reg-sub :kee-frame/route (fn [db] (:kee-frame/route db nil)))\n  (interop/render-root root-component))\n\n(defn make-route-component [component route]\n  (if (fn? component)\n    [component route]\n    component))\n\n(defn switch-route [f & pairs]\n  (when-not (even? (count pairs))\n    (throw (ex-info \"switch-route accepts an even number of args\" {:pairs       pairs\n                                                                   :pairs-count (count pairs)})))\n  (let [route (rf/subscribe [:kee-frame/route])\n        dispatch-value (f @route)]\n    (loop [[first-pair & rest-pairs] (partition 2 pairs)]\n      (if first-pair\n        (let [[value component] first-pair]\n          (if (= value dispatch-value)\n            (make-route-component component @route)\n            (recur rest-pairs)))\n        (throw (ex-info \"Could not find a component to match route. Did you remember to include a case for nil?\"\n                        {:route          @route\n                         :dispatch-value dispatch-value\n                         :pairs          pairs}))))))"]}