{"version":3,"sources":["kee_frame/spec.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/or-spec-impl","cljs.core/vector?","cljs.core/fn?","cljs.spec.alpha/map-spec-impl","G__41620","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha/cat-impl","cljs.core/keyword?","cljs.spec.alpha/rep-impl","cljs.core/any?","p1__41637#","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","kee-frame.api/Router","cljs.spec.alpha/nilable-impl","cljs.core/boolean?","cljs.spec.alpha.every_impl","G__41643","cljs.core/set?","G__41644","cljs.core/number?","G__41657","G__41685","G__41713","kee-frame.spec/log-spec-error","new-db","spec","re_frame.core.console","expound.alpha.expound","kee-frame.spec/rollback","context","db-spec","re-frame.interceptor/assoc-effect","re_frame.interceptor.get_coeffect","kee-frame.spec/spec-interceptor","db-spec-atom","re_frame.interceptor.__GT_interceptor","re_frame.interceptor.get_effect","and__4115__auto__","cljs.core/deref","cljs.spec.alpha.valid_QMARK_"],"sourcesContent":["(ns ^:no-doc kee-frame.spec\n  (:require [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect]]\n            [re-frame.core :refer [console]]\n            [clojure.spec.alpha :as s]\n            [re-chain.core :as chain]\n            [expound.alpha :as e]\n            [kee-frame.api :as api]))\n\n(s/def ::params (s/or :path-vector vector? :fn fn?))\n(s/def ::start (s/or :vector ::event-vector :fn fn?))\n(s/def ::stop (s/or :vector ::event-vector :fn fn?))\n\n(s/def ::controller (s/keys :req-un [::params ::start]\n                            :opt-un [::stop]))\n\n(s/def ::event-vector (s/cat :event-key keyword? :event-args (s/* any?)))\n\n(s/def ::routes any?)\n(s/def ::router #(satisfies? api/Router %))\n(s/def ::hash-routing? (s/nilable boolean?))\n(s/def ::root-component (s/nilable vector?))\n(s/def ::initial-db (s/nilable map?))\n(s/def ::app-db-spec (s/nilable keyword?))\n(s/def ::blacklist (s/coll-of keyword? :kind set?))\n(s/def ::skip-events? boolean?)\n(s/def ::skip-controllers? boolean?)\n(s/def ::skip-routes? boolean?)\n(s/def ::skip-overwrites? boolean?)\n(s/def ::debug?  boolean?)\n(s/def ::debug-config (s/nilable (s/keys :opt-un [::blacklist ::events? ::controllers? ::routes? ::overwrites?])))\n(s/def ::chain-links ::chain/links)\n(s/def ::breakpoints vector?)\n(s/def ::debounce-ms number?)\n(s/def ::scroll (s/nilable (s/or :boolean boolean?\n                                 :config (s/keys :opt-un [:scroll/timeout]))))\n(s/def ::screen (s/nilable (s/or :boolean boolean?\n                                 :config (s/keys :req-un [::breakpoints ::debounce-ms]))))\n\n(s/def ::start-options (s/keys :opt-un [::routes ::router ::hash-routing? ::root-component ::initial-db\n                                        ::app-db-spec ::debug? ::debug-config ::chain-links ::screen ::scroll]))\n\n(defn log-spec-error [new-db spec]\n  (console :group \"*** Spec error when updating DB, rolling back ***\")\n  (e/expound spec new-db)\n  (console :groupEnd \"*****************************\"))\n\n(defn rollback [context new-db db-spec]\n  (do\n    (log-spec-error new-db db-spec)\n    (assoc-effect context :db (get-coeffect context :db))))\n\n(defn spec-interceptor [db-spec-atom]\n  (->interceptor\n    :id :spec\n    :after (fn [context]\n             (let [new-db (get-effect context :db)]\n               (if (and @db-spec-atom new-db (not (s/valid? @db-spec-atom new-db)))\n                 (rollback context new-db @db-spec-atom)\n                 context)))))"]}