{"version":3,"sources":["personal_website/views/all_posts_html.cljs"],"mappings":"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","names":["personal-website.views.all-posts-html/generate-and-inject-style-tag","page-head","js/document","style-tag","personal-website.views.all-posts-html/update-page-title","input-css","style-tag-selector","style-tag-query","personal-website.views.all-posts-html/update-page-css","previous","personal-website.views.all-posts-html/date-mapping","personal-website.views.all-posts-html/format-date","date","split-date","clojure.string.split","cljs.core.get","G__32436","personal-website.views.all-posts-html/get-posts","post-type","cljs.core._EQ_","personal-website.content.projects.syn-bio.syn-bio/posts","personal-website.content.projects.comp-sci.comp-sci/posts","personal-website.content.writings.blog-posts.posts/posts","personal-website.content.writings.essays.essays/posts","personal-website.content.writings.short-stories.stories/posts","personal-website.content.writings.poetry.poems/posts","personal-website.content.writings.papers.papers/posts","personal-website.content.readings.books.books/posts","personal-website.views.all-posts-html/list-posts","posts","preview-fn","x","personal-website.views.preview-html/preview","cljs.core.map","cljs.core/cons","cljs.core.into","cljs.core.conj","personal-website.views.all-posts-html/display","route-data","params","prefix","personal-website.views.header-html/header","personal-website.views.search-html/search-html","typeset-fn","js/setTimeout","js/MathJax","call-typeset","cljs.core/empty?","personal-website.views.footer-html/footer","title","$","cljs.core/name","clojure.string/capitalize","clojure.string.join","page-title","cljs.core/vals","post-title","fexpr__32438","G__32439","personal-website.utils/unformat-title","cssify","G__32440","garden.core.css","G__32441"],"sourcesContent":["(ns personal-website.views.all-posts-html\n  (:require [garden.core :refer [css]]\n            [personal-website.views.header-html :refer [header]]\n            [personal-website.views.footer-html :refer [footer]]\n            [personal-website.views.preview-html :refer [preview]]\n            [personal-website.views.search-html :refer [search-html]]\n            [personal-website.utils :as utils]\n            [personal-website.content.projects.syn-bio.syn-bio :as syn-bio]\n            [personal-website.content.projects.comp-sci.comp-sci :as comp-sci]\n            [personal-website.content.writings.blog-posts.posts :as blog-posts]\n            [personal-website.content.writings.essays.essays :as essays]\n            [personal-website.content.writings.short-stories.stories :as stories]\n            [personal-website.content.writings.poetry.poems :as poems]\n            [personal-website.content.writings.papers.papers :as papers]\n            [personal-website.content.readings.books.books :as books]))\n\n\n(defn generate-and-inject-style-tag []\n  \"Injects a style tag with the id 'injected-css' into the page's head tag\"\n  (let [page-head (.-head js/document)\n        style-tag (.createElement js/document \"title\")]\n      (.appendChild page-head style-tag)))\n\n\n(defn update-page-title [input-css]\n \"Updates #injected-css with provided argument - if page does not have #injected-css, then\n  creates it via call to generate-and-inject-style-tag\"\n (let [style-tag-selector \"title\"\n       style-tag-query (.querySelector js/document style-tag-selector)\n       style-tag (if (nil? style-tag-query)\n                      (generate-and-inject-style-tag)\n                      style-tag-query)]\n      (aset style-tag \"innerHTML\" input-css)))\n\n(defn update-page-css [input-css]\n \"Updates #injected-css with provided argument - if page does not have #injected-css, then\n  creates it via call to generate-and-inject-style-tag\"\n (let [style-tag-selector \"#injected-css\"\n       style-tag-query (.querySelector js/document style-tag-selector)\n       style-tag (if (nil? style-tag-query)\n                      (generate-and-inject-style-tag)\n                      style-tag-query)\n      previous (.-innerHTML style-tag)]\n      (aset style-tag \"innerHTML\" (str previous input-css))))\n\n\n(def date-mapping {\"1\" \"Jan\"\n                   \"2\" \"Feb\"\n                   \"3\" \"Mar\"\n                   \"4\" \"Apr\"\n                   \"5\" \"May\"\n                   \"6\" \"Jun\"\n                   \"7\" \"Jul\"\n                   \"8\" \"Aug\"\n                   \"9\" \"Sep\"\n                   \"10\" \"Oct\"\n                   \"11\" \"Nov\"\n                   \"12\" \"Dec\"})\n\n(defn format-date [date]\n  (let [split-date (clojure.string/split date \"/\")]\n    (-> split-date\n        (get 0)\n        date-mapping\n        (str \" \"  (split-date 1) \", \" (split-date 2)  \" by Rohan Mehta\"))))\n\n(defn get-posts [post-type]\n  (cond\n    (= post-type :syn-bio) syn-bio/posts\n    (= post-type :comp-sci) comp-sci/posts\n    (= post-type :blog-posts) blog-posts/posts\n    (= post-type :essays)     essays/posts\n    (= post-type :stories)    stories/posts\n    (= post-type :poems)      poems/posts\n    (= post-type :papers)     papers/posts\n    (= post-type :books)      books/posts))\n\n(defn list-posts [posts]\n  (let [preview-fn (fn [x] (preview x false))]\n    (->> (map preview-fn posts)\n         (cons {:id \"post-container-3\"})\n         (cons :div)\n         (into [])\n         (conj [:div {:id \"post-container-2\"} \"Posts\"])\n         (conj [:div {:id \"post-container-1\"}]))))\n\n\n\n(defn display [route-data]\n  (let [posts (-> route-data :data :name get-posts)\n        params (-> route-data :path-params)\n        prefix (conj [:div] (header) (search-html))\n        typeset-fn (fn [] (js/setTimeout (fn [] (.typesetPromise js/MathJax)) 1000))\n        call-typeset (typeset-fn)]\n    (if (empty? posts)\n      [:div (header)\n       [:div {:style {:text-align \"center\"\n                      :margin-top \"350px\"\n                      :font-size \"28px\"\n                      :font-family \"WorkSansBold\"\n                      :min-height \"100vh\"}}\n       \"This page is currently empty.\"]\n       (footer)]\n\n      (if (-> params :id (= \"all\"))\n        (let [title (as-> route-data $\n                        (:data $) (:name $) (name $) (clojure.string/split $ \"_\")\n                        (map clojure.string/capitalize $)\n                        (clojure.string/join \" \" $))\n              page-title (update-page-title title)]\n          (as-> (vals posts) $\n                (list-posts $)\n                (conj prefix $)\n                (conj $ [:div {:id \"commento\"}])\n                (conj $ (footer))))\n\n        (let [post-title ((posts (utils/unformat-title (params :id))) :title)\n              page-title (update-page-title post-title)\n              cssify (-> :id params utils/unformat-title posts :css css update-page-css)]\n          (as-> posts $\n                ($ (utils/unformat-title (params :id)))\n                [:div {:id \"post-content-container\"}\n                 [:h1 {:id \"post-title\"} ($ :title)]\n                 [:h4 {:id \"post-byline\"} (format-date ($ :date))]\n                 [:div {:id \"post-intro-container\"}\n                  [:blockquote {:id \"post-intro-text\"} ($ :show)]]\n                 [:div {:id \"post-content\"} ($ :content)]]\n                (conj prefix $)\n                ;(conj $ [:script {:defer true :src \"https://cdn.commento.io/js/commento.js\"}])\n                (conj $ [:div {:id \"commento\"}])\n                (conj $ (footer))))))))\n"]}