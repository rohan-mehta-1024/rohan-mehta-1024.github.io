{"version":3,"sources":["personal_website/views/header_html.cljs"],"mappings":"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","names":["personal-website.views.header-html/subpage-data","personal-website.views.header-html/format-url","sub-subpage","first-el","fexpr__34445","in-first?","p1__34444#","cljs.core/some","cljs.core._EQ_","$","clojure.string/lower-case","clojure.string.split","clojure.string.join","personal-website.views.header-html/scroll-to-top","js-obj","cljs.core/clj->js","scroll","js/window","js/setTimeout","personal-website.views.header-html/tooltips","sub-subpages","iter__4529__auto__","s__34447","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__34449","cljs.core/chunk-buffer","i__34448","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__34446","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","placeholder?","show?","el","class","link","cljs.core.into","personal-website.views.header-html/subpage-skeleton","text","id","re-frame.core/dispatch","cljs.core.get_in","personal-website.views.header-html/subpages","s__34451","b__34453","i__34452","vec__34454","cljs.core.nth","iter__34450","vec__34457","cljs.core/deref","re_frame.core.subscribe","personal-website.views.header-html/hamburger-button","personal-website.views.header-html/close-all-others","given-idx","mapping","seq__34460","chunk__34462","count__34463","i__34464","c__4556__auto__","cljs.core/chunk-first","cljs.core/next","key","and__4115__auto__","cljs.core.not_EQ_","personal-website.views.header-html/side-nav-arrow-subpages","s__34467","b__34469","i__34468","iter__34466","personal-website.views.header-html/side-nav-skeleton","keyworded","cljs.core.keyword","pressed?","personal-website.views.header-html/side-nav","s__34471","b__34473","i__34472","vec__34474","iter__34470","vec__34477","personal-website.views.header-html/header"],"sourcesContent":["(ns personal-website.views.header-html\n  (:require [re-frame.core :as re-frame]\n            [personal-website.db :as db]\n            [personal-website.subs :as subs]))\n\n(def subpage-data\n  [[\"About\"\n    [\"Who I Am\"\n     \"Accomplishments\"\n     \"placeholder\"\n     \"placeholder\"\n     \"placeholder\"\n     \"placeholder\"]]\n   [\"Projects\"\n    [\"Engineering\"\n     \"Synthetic Biology\"\n     \"Computer Science\"\n     \"placeholder\"\n     \"placeholder\"\n     \"placeholder\"]]\n   [\"Writings\"\n    [\"Poetry\"\n     \"Short Stories\"\n     \"Academic Papers\"\n     \"Personal Essays\"\n     \"Blog Posts\"\n     \"placeholder\"]]\n   [\"Readings\"\n    [\"Books & Novels\"\n     \"Articles & Essays\"\n     \"placeholder\"\n     \"placeholder\"\n     \"placeholder\"\n     \"placeholder\"]]])\n\n(defn format-url [sub-subpage]\n  (let [first-el ((subpage-data 0) 1)\n        in-first? (some #(= sub-subpage %) first-el)\n        ]\n    (as-> sub-subpage $\n          (clojure.string/lower-case $)\n          (clojure.string/split $ \" \")\n          (clojure.string/join \"-\" $)\n          (str \"/\" $)\n          (if in-first?\n            (str $ \"\")\n            (str $ \"/all\")))))\n\n  (defn scroll-to-top []\n    (let [js-obj (clj->js {:top 0 :left 0})\n          scroll (fn [] (.scrollTo js/window js-obj))]\n      (js/setTimeout scroll 120)))\n\n\n(defn tooltips [sub-subpages]\n  (->> (for [sub-subpage sub-subpages\n             :let [placeholder? (= sub-subpage \"placeholder\")\n                   show? (if placeholder? \"0%\" \"100%\")\n                   el (if placeholder? :div :a)\n                   class (if placeholder? \"\" \"subpage-tooltip-elements\")\n                   link (if placeholder? \"\" (format-url sub-subpage))]]\n         [el {:style {:opacity show?}\n              :href (format-url sub-subpage)\n              :class class\n              ;:on-click scroll-to-top\n              }\n              sub-subpage])\n       (cons {:class \"subpage-tooltips\"})\n       (cons :ul)\n       (into [])))\n\n(defn subpage-skeleton [text id]\n  [:li {:class \"subpage-container-2\"\n        :onMouseLeave (fn [] (re-frame/dispatch [:homepage/subpage-hover [false id]]))}\n    [:div {:class \"subpage-elements\"\n           :onMouseEnter (fn [] (re-frame/dispatch [:homepage/subpage-hover [true id]]))}\n     text]\n  (->> [(dec id) 1]\n       (get-in subpage-data)\n       tooltips)])\n\n(defn subpages []\n  (as-> (for [[text id] [[\"About\" 1] [\"Projects\" 2] [\"Writings\" 3] [\"Readings\" 4]]]\n         (subpage-skeleton text id)) $\n       (cons {:id \"subpage-container-1\"} $)\n       (cons :ul $)\n       (into [] $)\n       [:nav $ [:img {:src \"/resources/search.svg\"\n                      :id \"search-img-1\"\n                      :on-click (fn [] (if @(re-frame/subscribe [:homepage/search])\n                                         (re-frame/dispatch [:homepage/search-term \"\"]) nil)\n                                         (re-frame/dispatch [:homepage/search]))}]]))\n\n(defn hamburger-button []\n    [:div {:class \"ham-menu\"\n           :on-click (fn [] (re-frame/dispatch [:homepage/hamburger-menu]))}\n     [:div {:class \"lines\"}]\n     [:div {:class \"lines\"}]\n     [:div {:class \"lines\"}]])\n\n\n(defn close-all-others [given-idx mapping]\n    (doseq [key [:2 :3 :4 :5]\n             :when (and (mapping key) (not= key given-idx))]\n      (re-frame/dispatch [:homepage/side-nav-arrow key]))\n  (re-frame/dispatch [:homepage/side-nav-arrow given-idx]))\n\n\n(defn side-nav-arrow-subpages [sub-subpages]\n  (->> (for [sub-subpage sub-subpages\n             :when (not= sub-subpage \"placeholder\")]\n         [:a {:class \"side-nav-subpage-elements\"\n              :href (format-url sub-subpage)\n              :on-click (fn [] (re-frame/dispatch [:homepage/hamburger-menu])\n                               (scroll-to-top))\n              } sub-subpage])\n       (cons {:class \"side-nav-subpage-container\"})\n       (cons :ul)\n       (into [])))\n\n\n\n(defn side-nav-skeleton [text id]\n  (let [keyworded (-> id str keyword)\n        pressed? @(re-frame/subscribe [:homepage/side-nav-arrow])]\n    [[:li {:class \"side-nav-elements\"\n           :on-click (fn [] (close-all-others keyworded pressed?))} text\n     [:div {:class \"side-nav-arrow\"\n            }]]\n    (->> [(dec (dec id)) 1]\n         (get-in subpage-data)\n         side-nav-arrow-subpages)]))\n\n(defn side-nav []\n    (as-> (for [[text id] [[\"About\" 2] [\"Projects\" 3] [\"Writings\" 4] [\"Readings\" 5]]]\n           (->> (side-nav-skeleton text id)\n                (cons {:class \"side-nav-container-2\"})\n                (cons :ul)\n                (into []))) $\n         (cons [:img {:src \"/resources/search.svg\" :id \"search-img-2\"}] $\n               );:class \"side-nav-elements\"\n        ;              :style {:text-align \"center\"\n        ;                      :width \"35px\"}}] $)\n         (cons {:id \"side-nav-container-1\"} $)\n         (cons :ul $)\n         (into [] $)\n         [:div {:id \"side-nav-background\"} $]\n         ))\n\n(defn header []\n  [:header {:id \"page-header\"}\n   [:h1 {:id \"my-name\"}\n    [:a {:href \"/\"\n         :on-click (fn [] (if @(re-frame/subscribe [:homepage/search])\n                                (do\n                                  (re-frame/dispatch [:homepage/search])\n                                  (re-frame/dispatch [:homepage/search-term \"\"]))\n                                nil))} \"Rohan Mehta\"]]\n   (subpages)\n   (side-nav)\n   (hamburger-button)\n   ])\n"]}