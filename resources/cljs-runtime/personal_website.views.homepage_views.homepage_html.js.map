{"version":3,"sources":["personal_website/views/homepage_views/homepage_html.cljs"],"mappings":";AAOA,AAAA,AAAMA;AAAN,AAAA;AAEE,AAAMC,AAAU,AAAQC;AAClBC,AAAU,AAAA,AAAgBD;AADhC,AAEI,AAAA,AAAA,AAAeC;;AACf,AAAcF,AAAUE;;AAE9B,AAAA,AAAMC,AAAmBC;AAAzB,AAAA;AAGC,AAAA,AAAMC;AACAC,AAAgB,AAAgBL,AAAYI;AAC5CH,AAAU,AAAI,AAAA,AAAMI,AACL,AAACP,AACDO;AAJrB,AAKK,AAAA,AAAMJ,AAAsBE;;AAGlC,AAAA,AAAMG;AAAN,AACE,AAAA,AAAAC,AAAMC,AAAY,AAAA,AAAA,AAACC;AACbC,AAAI,AAAA,AAAA,AAAIF;AACRG,AAAE,AAAA,AAACT;AAFT,AAQM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACU,AAAK,AAACC,AACP,AAACD,AAAK,AAACE,AACP,AAACF,AAAK,AAACG,AACP,AAACH,AAAK,AAACI","names":["personal-website.views.homepage-views.homepage-html/generate-and-inject-style-tag","page-head","js/document","style-tag","personal-website.views.homepage-views.homepage-html/update-page-title","input-css","style-tag-selector","style-tag-query","personal-website.views.homepage-views.homepage-html/homepage-html","cljs.core/deref","searching?","re_frame.core.subscribe","pos","x","cljs.core.conj","personal-website.views.header-html/header","personal-website.views.search-html/search-html","personal-website.views.homepage-views.page-content-html/page-content","personal-website.views.footer-html/footer"],"sourcesContent":["(ns personal-website.views.homepage-views.homepage-html\n  (:require [re-frame.core :as re-frame]\n            [personal-website.views.header-html :refer [header]]\n            [personal-website.views.homepage-views.page-content-html :refer [page-content]]\n            [personal-website.views.footer-html :refer [footer]]\n            [personal-website.views.search-html :refer [search-html]]))\n\n(defn generate-and-inject-style-tag []\n  \"Injects a style tag with the id 'injected-css' into the page's head tag\"\n  (let [page-head (.-head js/document)\n        style-tag (.createElement js/document \"style\")]\n      (.setAttribute style-tag \"id\" \"injected-css\")\n      (.appendChild page-head style-tag)))\n\n(defn update-page-title [input-css]\n \"Updates #injected-css with provided argument - if page does not have #injected-css, then\n  creates it via call to generate-and-inject-style-tag\"\n (let [style-tag-selector \"title\"\n       style-tag-query (.querySelector js/document style-tag-selector)\n       style-tag (if (nil? style-tag-query)\n                      (generate-and-inject-style-tag)\n                      style-tag-query)]\n      (aset style-tag \"innerHTML\" input-css)))\n\n\n(defn homepage-html []\n  (let [searching? @(re-frame/subscribe [:homepage/search])\n        pos (if searching? \"absolute\" \"relative\")\n        x (update-page-title \"Rohan Mehta\")]\n    (-> [:div {:style {:id \"super-container\"\n                       :position \"relative\"\n                       :min-height \"100%\"\n                       :width \"100%\"}}]\n\n        (conj (header))\n        (conj (search-html))\n        (conj (page-content))\n        (conj (footer)))))\n"]}