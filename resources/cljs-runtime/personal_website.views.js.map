{"version":3,"sources":["personal_website/views.cljs"],"mappings":";AAWA,AAAA,AAAMA;AAAN,AAAA;AAEE,AAAMC,AAAU,AAAQC;AAClBC,AAAU,AAAA,AAAgBD;AADhC,AAEI,AAAA,AAAA,AAAeC;;AACf,AAAcF,AAAUE;;AAG9B,AAAA,AAAMC,AAAiBC;AAAvB,AAAA;AAGC,AAAA,AAAMC;AACAC,AAAgB,AAAgBL,AAAYI;AAC5CH,AAAU,AAAI,AAAA,AAAMI,AACL,AAACP,AACDO;AAJrB,AAKK,AAAA,AAAMJ,AAAsBE;;AAGlC,AAAA,AAAMG;AAAN,AAAiB,AAAA,AAACC,AAAOC,AAAM,AAACC,AAAiB,AAACC,AAAW,AAACC;;AAC9D,AAAA,AAAMC,AAAYC;AAAlB,AACE,AAAMC,AAAO,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAQC;AAAtB,AACE,AAAA,AAAIH,AAASC,AAAOZ;;AAGvB,AAAA,AAAMe;AAAN,AACG,AAAMC,AAAa,AAACN,AAAW,AAACN;AAC1Ba,AAAW;AAAA,AAAO,AAACC,AAAc;AAAA,AAAM,AAAUC;AAA/B;;AAClBC,AAAa,AAACH;AAFpB,AAAA,AAIGI,AAAe,AAAKC;AAAL,AAAY,AAAA,AAAA,AAAA,AAAIA;AAJlC,AAAA,AAAA,AAAA,AAKgBC,AAEA;AAAA,AAAA,AAAA,AAAA;AAPhB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAQcC,AACCA,AAEEA,AACJA,AACCA,AACFA,AACCA,AAEHD","names":["personal-website.views/generate-and-inject-style-tag","page-head","js/document","style-tag","personal-website.views/update-page-css","input-css","style-tag-selector","style-tag-query","personal-website.views/styles","cljs.core.reduce","cljs.core/into","personal-website.styles.homepage-styles.homepage-stylesheet/homepage-styles","personal-website.styles.all-posts-stylesheet/all-posts","personal-website.styles.footer-stylesheet/footer","personal-website.views/inject-css","text-css","cssify","cljs.core.partial","garden.core/css","personal-website.views/main-panel","injected-css","typeset-fn","js/setTimeout","js/MathJax","call-typeset","kee-frame.core/switch-route","route","personal-website.views.homepage-views.homepage-html/homepage-html","personal-website.views.all-posts-html/display"],"sourcesContent":["(ns personal-website.views\n  (:require [re-frame.core :as re-frame]\n            [kee-frame.core :as k]\n            [garden.core :refer [css]]\n            [personal-website.views.all-posts-html :refer [display]]\n            [personal-website.styles.all-posts-stylesheet :refer [all-posts]]\n            [personal-website.styles.footer-stylesheet :refer [footer]]\n            [personal-website.views.homepage-views.homepage-html :refer [homepage-html]]\n            [personal-website.styles.homepage-styles.homepage-stylesheet :refer [homepage-styles]]))\n\n\n(defn generate-and-inject-style-tag []\n  \"Injects a style tag with the id 'injected-css' into the page's head tag\"\n  (let [page-head (.-head js/document)\n        style-tag (.createElement js/document \"style\")]\n      (.setAttribute style-tag \"id\" \"injected-css\")\n      (.appendChild page-head style-tag)))\n\n\n(defn update-page-css [input-css]\n \"Updates #injected-css with provided argument - if page does not have #injected-css, then\n  creates it via call to generate-and-inject-style-tag\"\n (let [style-tag-selector \"#injected-css\"\n       style-tag-query (.querySelector js/document style-tag-selector)\n       style-tag (if (nil? style-tag-query)\n                      (generate-and-inject-style-tag)\n                      style-tag-query)]\n      (aset style-tag \"innerHTML\" input-css)))\n\n\n(defn styles []  (reduce into [(homepage-styles) (all-posts) (footer)]))\n(defn inject-css [text-css]\n  (let [cssify (partial css {:vendors [\"webkit\"] :auto-prefix #{:transition}})]\n    (-> text-css cssify update-page-css)))\n\n\n (defn main-panel []\n    (let [injected-css (inject-css (styles))\n          typeset-fn (fn [] (js/setTimeout (fn [](.typeset js/MathJax)) 500))\n          call-typeset (typeset-fn)\n          ]\n      [k/switch-route (fn [route] (-> route :data :name))\n         :homepage [homepage-html]\n\n         :who-i-am [(fn [] [:div \"hi this is who i am\"])]\n         :syn-bio display\n         :comp-sci display\n\n         :blog-posts display\n         :essays display\n         :stories display\n         :poems display\n         :papers display\n\n         nil [homepage-html]]))\n"]}