{"version":3,"sources":["personal_website/views/preview_html.cljs"],"mappings":";AAIA,AAAA,AAAMA,AAAaC;AAAnB,AACO,AAAA,AAACC,AAAqBD,AACtB,AAACE,AAAIC,AACL,AAAA,AAACC;;AAER,AAAA,AAAMC,AAAaC;AAAnB,AACE,AAGU,AAACJ,AAAI,AAAKK,AAIVO,AACA,AAAA,AAAA,AAACC,AACDX;AANK,AAAQ,AACE,AAACQ,AAAUC,AAAoBN;AAC/B,AAACM,AAAAA,AAAAA,AAAoBN,AAAAA;;AACrBA;;AANf,AAACL,AAAI,AAAKK,AACV,AAACL,AAAI,AAACM,AAAK,AAAA,AAACC,AAAQC,AACT,AAACD,AAAQE,AAAIR;AAFnB,AAAQ,AAAA,AAACF,AAAqBM;AAAxCD;;AAWP,AAAA,AAAMU,AAAkBC,AAAKjB,AAAKM;AAAlC,AACE,AAAA,AAAAY,AAAMC,AAAM,AAAA,AAAA,AAACC;AACPC,AAAU,AAAA,AAAA,AAAI,AAAA,AAACC,AAAE,AAAA,AAAOH;AACxBI,AAAM,AAAGC;AAFf,AAGA,AAAIH;AACF,AAAI,AAAA,AAAIE;AACN,AAAA,AAAKN,AAAWjB;;AAChB,AAAA,AAAA,AAAKiB,AAAWjB,AAAWM;;;AAC7B,AAAA,AAAA,AAAKW,AAAWjB,AAAWM;;;AAE/B,AAAA,AAAMmB,AAASC,AAAYL;AAA3B,AACE,AAAAM,AAA8DD;AAA9DC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAwDS;AAAxD,AAAAL,AAAAJ,AAAA,AAAcK;AAAd,AAAAD,AAAAJ,AAAA,AAAoBV;AAApB,AAAAc,AAAAJ,AAAA,AAAyBM;AAAzB,AAAAF,AAAAJ,AAAA,AAAiCO;AAAjC,AAAAH,AAAAJ,AAAA,AAAsCrB;AAAtC,AAAAyB,AAAAJ,AAAA,AAA2C3B;AAA3C,AAAA+B,AAAAJ,AAAA,AAAgDQ;AAC1CE,AAAO,AAAA,AAAI,AAAA,AAACf,AAAEtB,AAAoC,AAAA,AAAKA;AACvDsC,AAAS,AAACvC,AAAYC;AACtBM,AAAK,AAACD,AAAYC;AAElBiC,AAAO,AAACvB,AAAiBC,AAAKqB,AAAShC;AAL7C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOoCiC,AAEnB,AAAA,AAAA,AAAA,AAAM,AAAA,AAACjB,AAAEtB,AAAc,AAAA,AAAA,AAACoC,AAAAA,AAAAA,AAClB,AAAA,AAACd,AAAEtB,AAAyB,AAAA,AAAA,AAAWA,AAAS,AAACwC,AAAmBR,AACpE,AAAA,AAACV,AAAEtB,AAA0B,AAAA,AAAA,AAAWA,AAAS,AAACwC,AAAmBR,AAC/D,AAAA,AAAA,AAAA,AAAWhC,AAAc,AAACwC,AAAmBR;AAZ1E,AAAA,AAAA,AAAA,AAAA,AAAA,AAaqBS,AACdT,AAC2B,AAAA,AAAIX,AAAUa","names":["personal-website.views.preview-html/format-type","type","clojure.string.split","cljs.core.map","clojure.string/capitalize","clojure.string.join","personal-website.views.preview-html/format-tags","tags","x","cljs.core.comp","cljs.core.partial","clojure.string/join","cljs.core/map","cljs.core/contains?","personal-website.utils/special-words","cljs.core/flatten","cljs.core.interpose","personal-website.views.preview-html/format-specifier","date","cljs.core/deref","page","re_frame.core.subscribe","homepage?","cljs.core._EQ_","width","js/window","personal-website.views.preview-html/preview","post-object","map__31544","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","title","content","show","id","post","suffix","new-type","header","personal-website.utils/format-title","personal-website.utils/scroll-to-top"],"sourcesContent":["(ns personal-website.views.preview-html\n  (:require [re-frame.core :as re-frame]\n            [personal-website.utils :as utils]))\n\n(defn format-type [type]\n  (->> (clojure.string/split type \"-\")\n       (map clojure.string/capitalize)\n       (clojure.string/join \" \")))\n\n(defn format-tags [tags]\n  (->> tags (map (fn [x] (clojure.string/split x \" \")))\n            (map (comp (partial clojure.string/join \" \")\n                       (partial map clojure.string/capitalize)))\n            (map (fn [x] (if\n                           (contains? utils/special-words x)\n                           (utils/special-words x)\n                           x)))\n            flatten\n            (interpose \", \")\n            clojure.string/join))\n\n(defn format-specifier [date type tags]\n  (let [page @(re-frame/subscribe [:kee-frame/route])\n        homepage? (if (= (:path page) \"/\") true false)\n        width (. js/window -innerWidth)]\n  (if homepage?\n    (if (<= width 450)\n      (str date \" | \" type)\n      (str date \" | \" type \" | \" tags))\n    (str date \" | \" type \" | \" tags))))\n\n(defn preview [post-object homepage?]\n  (let [{:keys [title date content show tags type id] :as post} post-object\n        suffix (if (= type \"short-story\") \"short-stories\" (str type \"s\"))\n        new-type (format-type type)\n        tags (format-tags tags)\n\n        header (format-specifier date new-type tags)]\n    [:div\n        [:p {:class \"preview-header\"} header]\n        [:a {:class \"preview-title\"\n             :href (cond (= type \"paper\") (post :paper-link)\n                         (= type \"computer-science\") (str \"/#/\" type \"/\" (utils/format-title title))\n                         (= type \"synthetic-biology\") (str \"/#/\" type \"/\" (utils/format-title title))\n                         :else (str \"/#/\" type \"s\" \"/\"  (utils/format-title title)))\n             :on-click utils/scroll-to-top}\n         title]\n        [:p {:class \"preview-text\"} (if homepage? show \"\")]]))\n"]}