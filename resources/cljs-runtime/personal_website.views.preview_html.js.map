{"version":3,"sources":["personal_website/views/preview_html.cljs"],"mappings":";AAGA,AAAA,AAAMA,AAAaC;AAAnB,AACO,AAAA,AAACC,AAAqBD,AACtB,AAACE,AAAIC,AACL,AAAA,AAACC;;AAER,AAAA,AAAMC,AAAaC;AAAnB,AACE,AAAU,AAACJ,AAAI,AAAKK,AACV,AAACL,AAAI,AAACM,AAAK,AAAA,AAACC,AAAQC,AACT,AAACD,AAAQE,AAAIR,AACxBS,AACA,AAAA,AAAA,AAACC,AACDT;AALK,AAAQ,AAAA,AAACH,AAAqBM;AAAxCD;;AAQP,AAAA,AAAMQ,AAASC,AAAYC;AAA3B,AACE,AAAAC,AAA8DF;AAA9DE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAwDU;AAAxD,AAAAN,AAAAJ,AAAA,AAAcK;AAAd,AAAAD,AAAAJ,AAAA,AAAoBM;AAApB,AAAAF,AAAAJ,AAAA,AAAyBO;AAAzB,AAAAH,AAAAJ,AAAA,AAAiCQ;AAAjC,AAAAJ,AAAAJ,AAAA,AAAsCX;AAAtC,AAAAe,AAAAJ,AAAA,AAA2CjB;AAA3C,AAAAqB,AAAAJ,AAAA,AAAgDS;AAC1CE,AAAO,AAAA,AAAI,AAAA,AAACC,AAAE7B,AAAoC,AAAA,AAAKA;AACvD8B,AAAS,AAAC/B,AAAYC;AACtB+B,AAAU,AAAA,AAAIf,AAAU,AAAA,AAAKc;AAC7BxB,AAAK,AAACD,AAAYC;AAClB0B,AAAO,AAAA,AAAKT,AAAWQ,AAAUzB;AALvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOoC0B,AAEnB,AAAA,AAAA,AAAA,AAAM,AAAA,AAACH,AAAE7B,AAAc,AAAA,AAAA,AAAC2B,AAAAA,AAAAA,AAClB,AAAA,AAACE,AAAE7B,AAAyB,AAAA,AAAA,AAAWA,AAAS,AAACiC,AAAmBX,AACpE,AAAA,AAACO,AAAE7B,AAA0B,AAAA,AAAA,AAAWA,AAAS,AAACiC,AAAmBX,AAC/D,AAAA,AAAA,AAAA,AAAWtB,AAAc,AAACiC,AAAmBX;AAZ1E,AAAA,AAAA,AAAA,AAAA,AAAA,AAaqBY,AACdZ,AAC4BG","names":["personal-website.views.preview-html/format-type","type","clojure.string.split","cljs.core.map","clojure.string/capitalize","clojure.string.join","personal-website.views.preview-html/format-tags","tags","x","cljs.core.comp","cljs.core.partial","clojure.string/join","cljs.core/map","cljs.core/flatten","cljs.core.interpose","personal-website.views.preview-html/preview","post-object","homepage?","map__32708","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","title","date","content","show","id","post","suffix","cljs.core._EQ_","new-type","specifier","header","personal-website.utils/format-title","personal-website.utils/scroll-to-top"],"sourcesContent":["(ns personal-website.views.preview-html\n  (:require [personal-website.utils :as utils]))\n\n(defn format-type [type]\n  (->> (clojure.string/split type \"-\")\n       (map clojure.string/capitalize)\n       (clojure.string/join \" \")))\n\n(defn format-tags [tags]\n  (->> tags (map (fn [x] (clojure.string/split x \" \")))\n            (map (comp (partial clojure.string/join \" \")\n                       (partial map clojure.string/capitalize)))\n            flatten\n            (interpose \", \")\n            clojure.string/join))\n\n\n(defn preview [post-object homepage?]\n  (let [{:keys [title date content show tags type id] :as post} post-object\n        suffix (if (= type \"short-story\") \"short-stories\" (str type \"s\"))\n        new-type (format-type type)\n        specifier (if homepage? (str new-type \" | \") \"\")\n        tags (format-tags tags)\n        header (str date \" | \" specifier tags)]\n    [:div\n        [:p {:class \"preview-header\"} header]\n        [:a {:class \"preview-title\"\n             :href (cond (= type \"paper\") (post :paper-link)\n                         (= type \"computer-science\") (str \"/#/\" type \"/\" (utils/format-title title))\n                         (= type \"synthetic-biology\") (str \"/#/\" type \"/\" (utils/format-title title))\n                         :else (str \"/#/\" type \"s\" \"/\"  (utils/format-title title)))\n             :on-click utils/scroll-to-top}\n         title]\n        [:em {:class \"preview-text\"} show]]))\n"]}