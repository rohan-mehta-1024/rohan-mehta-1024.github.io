{"version":3,"sources":["personal_website/views/search_html.cljs"],"mappings":"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","names":["personal-website.views.search-html/format-posts","posts","cljs.core/flatten","cljs.core.map","cljs.core/vals","personal-website.views.search-html/posts","personal-website.content.projects.projects/posts","personal-website.content.writings.writings/posts","personal-website.content.readings.readings/posts","personal-website.views.search-html/post-mapping","cljs.core.into","iter__4529__auto__","s__33100","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__33102","cljs.core/chunk-buffer","i__33101","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__33099","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","post","personal-website.views.search-html/format-objs","objs","p1__33103#","cljs.core.update_in","cljs.core.partial","clojure.string/join","cljs.core/clj->js","personal-website.views.search-html/searcher","this","seq__33104","chunk__33105","count__33106","i__33107","c__4556__auto__","cljs.core/chunk-first","cljs.core/next","obj","personal-website.views.search-html/search","query","search-fn","js/module$node_modules$lunr$lunr","results","formatted","cljs.core.js__GT_clj","l","cljs.core.print","s__33109","b__33111","i__33110","iter__33108","G__33112","G__33113","cljs.core/deref","p1__33114#","personal-website.views.search-html/search-field","re_frame.core.subscribe","re-frame.core/dispatch","personal-website.views.search-html/search-results","cljs.core._EQ_","cljs.core.not_EQ_","personal-website.views.preview-html/preview","personal-website.views.search-html/search-html"],"sourcesContent":["(ns personal-website.views.search-html\n  (:require [\"lunr\" :as lunr]\n            [re-frame.core :as re-frame]\n            [personal-website.content.projects.projects :as projects]\n            [personal-website.content.writings.writings :as writings]\n            [personal-website.content.readings.readings :as readings]\n            [personal-website.views.preview-html :refer [preview]]\n            [clojure.set :as set]\n            [clojure.string :refer [join]]))\n\n\n(defn format-posts [posts]\n  (->> posts flatten (map vals) flatten))\n\n(def posts (format-posts [projects/posts\n                          writings/posts\n                          readings/posts]))\n\n(def post-mapping (into {} (for [post posts]\n                        [(post :title) post])))\n\n(defn format-objs [objs]\n  (->> objs\n       (map #(update-in % [:tags] (partial join \", \")) objs)\n       (map clj->js)\n       (into [])))\n\n\n(defn searcher []\n  (let [objs (clj->js (format-objs posts))]\n    (this-as this\n             (.ref this \"title\")\n             (.field this \"title\")\n             (.field this \"content\")\n             (.field this \"type\")\n             (.field this \"tags\")\n             (.field this \"overarching\")\n             (doseq [obj objs]\n               (.add this obj)))))\n\n\n(defn search [query]\n  (let [search-fn (lunr searcher)\n        results (.search search-fn query)\n        formatted (js->clj results)\n        l (print \"achooqu\" post-mapping)]\n    (for [post formatted]\n      (post-mapping (post \"ref\")))))\n\n\n(defn search-field []\n  [:input {:id \"search-view\"\n           :type \"text\"\n           :placeholder \"Search for content...\"\n           :value @(re-frame/subscribe [:homepage/search-term])\n           :on-change #(re-frame/dispatch [:homepage/search-term (-> % .-target .-value)])}])\n\n(defn search-results []\n  (let [query @(re-frame/subscribe [:homepage/search-term])\n        results (search (if (or (= query nil) (= query \"\"))  \"12345678987654321\" query))]\n    [:div {:id \"search-results\"}\n     [:div {:id \"search-count\"} (str (count results) \" Result(s) Found.\")]\n     (if (not= (count results) 0)\n      [:div {:id \"results-container\"\n             :style {:margin-right \"10px\"}} (map preview results)]\n       [:div])]))\n\n(defn search-html []\n  [:div {:id \"search-container\"}\n   (search-field)\n   (search-results)])\n"]}