{"version":3,"sources":["re_frame_fx/dispatch.cljs"],"mappings":"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","names":["re-frame-fx.dispatch/deferred-actions","cljs.core.atom","re-frame-fx.dispatch/dispatch-debounce","dispatch-map-or-seq","cancel-timeout","id","temp__5735__auto__","deferred","cljs.core/deref","cljs.core.get","js/clearTimeout","cljs.core.swap_BANG_","cljs.core/dissoc","run-action","action","event","cljs.core._EQ_","re-frame.core/dispatch","seq__38442","cljs.core/seq","chunk__38443","count__38444","i__38445","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","e","seq__38452","chunk__38453","count__38454","i__38455","map__38474","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","map__38483","timeout","G__38473","cljs.core/PersistentVector","cljs.core/sequential?","fexpr__38476","fexpr__38485","cljs.core/assoc","js/setTimeout","map__38479","map__38486","js/Error","re-frame.core/reg-fx"],"sourcesContent":[";;   Copyright (c) 7theta. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://www.eclipse.org/legal/epl-v10.html)\n;;   which can be found in the LICENSE file at the root of this\n;;   distribution.\n;;\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any others, from this software.\n\n(ns re-frame-fx.dispatch\n  (:require [re-frame.core :refer [reg-fx dispatch]]))\n\n(def ^:private deferred-actions (atom {}))\n\n(defn dispatch-debounce\n  [dispatch-map-or-seq]\n  (let [cancel-timeout (fn [id]\n                         (when-let [deferred (get @deferred-actions id)]\n                           (js/clearTimeout (:timer deferred))\n                           (swap! deferred-actions dissoc id)))\n        run-action (fn [action event]\n                     (cond\n                       (= :dispatch action) (dispatch event)\n                       (= :dispatch-n action) (doseq [e event]\n                                                (dispatch e))))]\n    (doseq [{:keys [id timeout action event]}\n            (cond-> dispatch-map-or-seq\n              (not (sequential? dispatch-map-or-seq)) vector)]\n      (cond\n        (#{:dispatch :dispatch-n} action)\n        (do (cancel-timeout id)\n            (swap! deferred-actions assoc id\n                   {:action action\n                    :event event\n                    :timer (js/setTimeout (fn []\n                                            (cancel-timeout id)\n                                            (run-action action event))\n                                          timeout)}))\n\n        (= :cancel action)\n        (cancel-timeout id)\n\n        (= :flush action)\n        (when-let [{:keys [action event]} (get @deferred-actions id)]\n          (cancel-timeout id)\n          (run-action action event))\n\n        :else\n        (throw (js/Error (str \":dispatch-debounce invalid action \" action)))))))\n\n(reg-fx :dispatch-debounce dispatch-debounce)\n"]}