["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.core","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^9","~$subs","~$re-frame.subs","~$set","~$clojure.set","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^@","~$fx","~$re-frame.fx","~$re-frame.events","^C","~$loggers","~$re-frame.loggers","~$re-frame.settings","^F","^B","^B","~$re-frame.registrar","^G","~$interceptor","^@","~$router","~$re-frame.router","~$db","~$re-frame.db","~$registrar","^G","^J","^J","~$re-frame.utils","^N","^=","^=","~$events","^C","~$settings","^F","~$re-frame.std-interceptors","^Q","^E","^E","^;","^;","~$interop","^9","~$utils","^N","~$std-interceptors","^Q","^?","^?","^L","^L"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$ctx-handler->interceptor","^Q","~$fx-handler->interceptor","^Q","~$db-handler->interceptor","^Q"],"~:defs",["^ ","~$console",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","~:line",695,"~:column",7,"~:end-line",695,"~:end-column",14,"~:arglists",["~#list",["~$quote",["^18",[["~$level","~$&","~$args"]]]]],"~:doc","Logs `args` to the console at `level`. \n   Level can be one of `:log` `:error` `:warn` `:debug` `:group` `:groupEnd`.\n   If you are writing an extension to re-frame, like prehaps an effect handler,\n   you may want to use re-frame logging so that users can configure logging \n   from a central location.\n\n   usage: (console :error \"Oh, dear God, it happened:\" a-var \"and\" another)\n          (console :warn \"Possible breach of containment wall at:\" dt)","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^18",["^1:","^1;"]]],"^17",["^18",[["^1:","~$&","^1;"]]],"~:arglists-meta",["^18",[null]]]],"^5","~$re-frame.core/console","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",14,"^1=",["^ ","^1>",true,"^1?",1,"^1@",1,"^1A",[["^18",["^1:","^1;"]]],"^17",["^18",[["^1:","~$&","^1;"]]],"^1B",["^18",[null]]],"^1A",[["^18",["^1:","^1;"]]],"~:protocol-impl",null,"^1?",1,"^1B",["^18",[null]],"^14",1,"^1>",true,"~:methods",[["^ ","^1?",1,"^1>",true,"~:tag","~$any"]],"^13",695,"~:ret-tag","^1G","^15",695,"^1@",1,"~:fn-var",true,"^17",["^18",[["^1:","~$&","^1;"]]],"^1<","Logs `args` to the console at `level`. \n   Level can be one of `:log` `:error` `:warn` `:debug` `:group` `:groupEnd`.\n   If you are writing an extension to re-frame, like prehaps an effect handler,\n   you may want to use re-frame logging so that users can configure logging \n   from a central location.\n\n   usage: (console :error \"Oh, dear God, it happened:\" a-var \"and\" another)\n          (console :warn \"Possible breach of containment wall at:\" dt)"],"~$on-changes",["^ ","^5","~$re-frame.core/on-changes","^12","target/public/cljs-out/dev/re_frame/core.cljc","^13",576,"^14",1,"^15",576,"^16",16,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",576,"^14",6,"^15",576,"^16",16],"^1<","Interceptor factory which acts a bit like `reaction`  (but it flows into\n  `db`, rather than out). It observes N paths within `db` and if any of them\n  test not identical? to their previous value  (as a result of a event handler\n  being run) then it runs `f` to compute a new value, which is then assoc-ed\n  into the given `out-path` within `db`.\n\n  Usage:\n\n      (defn my-f\n        [a-val b-val]\n        ... some computation on a and b in here)\n\n      (on-changes my-f [:c]  [:a] [:b])\n\n  Put this Interceptor on the right handlers (ones which might change :a or :b).\n  It will:\n     - call `f` each time the value at path [:a] or [:b] changes\n     - call `f` with the values extracted from [:a] [:b]\n     - assoc the return value from `f` into the path  [:c]\n  "],"~$enrich",["^ ","^5","~$re-frame.core/enrich","^12","target/public/cljs-out/dev/re_frame/core.cljc","^13",506,"^14",1,"^15",506,"^16",12,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",506,"^14",6,"^15",506,"^16",12],"^1<","Interceptor factory which runs the given function `f` in the `after handler`\n  position.  `f` is called with two arguments: `db` and `v`, and is expected to\n  return a modified `db`.\n\n  Unlike the `after` interceptor which is only about side effects, `enrich`\n  expects `f` to process and alter the given `db` coeffect in some useful way,\n  contributing to the derived data, flowing vibe.\n\n  Example Use:\n  ------------\n\n  Imagine that todomvc needed to do duplicate detection - if any two todos had\n  the same text, then highlight their background, and report them via a warning\n  at the bottom of the panel.\n\n  Almost any user action (edit text, add new todo, remove a todo) requires a\n  complete reassessment of duplication errors and warnings. Eg: that edit\n  just made might have introduced a new duplicate, or removed one. Same with\n  any todo removal. So we need to re-calculate warnings after any CRUD events\n  associated with the todos list.\n\n  Unless we are careful, we might end up coding subtly different checks\n  for each kind of CRUD operation.  The duplicates check made after\n  'delete todo' event might be subtly different to that done after an\n  editing operation. Nice and efficient, but fiddly. A bug generator\n  approach.\n\n  So, instead, we create an `f` which recalculates ALL warnings from scratch\n  every time there is ANY change. It will inspect all the todos, and\n  reset ALL FLAGS every time (overwriting what was there previously)\n  and fully recalculate the list of duplicates (displayed at the bottom?).\n\n  https://twitter.com/nathanmarz/status/879722740776939520\n\n  By applying `f` in an `:enrich` interceptor, after every CRUD event,\n  we keep the handlers simple and yet we ensure this important step\n  (of getting warnings right) is not missed on any change.\n\n  We can test `f` easily - it is a pure function - independently of\n  any CRUD operation.\n\n  This brings huge simplicity at the expense of some re-computation\n  each time. This may be a very satisfactory trade-off in many cases."],"~$reg-sub-raw",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",264,"^14",7,"^15",264,"^16",18,"^17",["^18",["^19",["^18",[["~$query-id","~$handler-fn"]]]]],"^1<","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"^5","~$re-frame.core/reg-sub-raw","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",18,"^1A",["^18",[["^1O","^1P"]]],"^1D",null,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^13",264,"^1H","^1G","^15",264,"^1@",2,"^1I",true,"^17",["^18",["^19",["^18",[["^1O","^1P"]]]]],"^1<","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"~$subscribe",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",191,"^14",7,"^15",191,"^16",16,"^17",["^18",["^19",["^18",[["~$query"],["^1S","~$dynv"]]]]],"^1<","Given a `query` vector, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  Two, or more, concurrent subscriptions for the same query will source reactive\n  updates from the one executing handler.\n  ","^1=",["^ ","^1>",false,"^1?",2,"^1@",2,"^1A",[["^1S"],["^1S","^1T"]],"^17",["^18",[["^1S"],["^1S","^1T"]]],"^1B",["^18",[null,null]]]],"^5","~$re-frame.core/subscribe","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",16,"^1=",["^ ","^1>",false,"^1?",2,"^1@",2,"^1A",[["^1S"],["^1S","^1T"]],"^17",["^18",[["^1S"],["^1S","^1T"]]],"^1B",["^18",[null,null]]],"^1A",[["^1S"],["^1S","^1T"]],"^1D",null,"^1?",2,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^1E",[["^ ","^1?",1,"^1>",false,"^1F",["^4",[null,"^1G"]]],["^ ","^1?",2,"^1>",false,"^1F",["^4",[null,"^1G"]]]],"^13",191,"^15",191,"^1@",2,"^1I",true,"^17",["^18",[["^1S"],["^1S","^1T"]]],"^1<","Given a `query` vector, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  Two, or more, concurrent subscriptions for the same query will source reactive\n  updates from the one executing handler.\n  "],"~$reg-global-interceptor",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",600,"^14",7,"^15",600,"^16",29,"^17",["^18",["^19",["^18",[["^H"]]]]],"^1<","Registers `interceptor` as a global interceptor. Global interceptors are\n   included in the processing of every event.\n\n   When you register an event handler you have the option of supplying an\n   interceptor chain. Any global interceptors you register are effectively\n   prepending to this chain in the order that they are registered."],"^5","~$re-frame.core/reg-global-interceptor","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",29,"^1A",["^18",[["^H"]]],"^1D",null,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^13",600,"^1H",["^4",[null,"^1G"]],"^15",600,"^1@",1,"^1I",true,"^17",["^18",["^19",["^18",[["^H"]]]]],"^1<","Registers `interceptor` as a global interceptor. Global interceptors are\n   included in the processing of every event.\n\n   When you register an event handler you have the option of supplying an\n   interceptor chain. Any global interceptors you register are effectively\n   prepending to this chain in the order that they are registered."],"~$assoc-coeffect",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",648,"^14",7,"^15",648,"^16",21,"^17",["^18",["^19",["^18",[["~$context","~$key","~$value"]]]]],"^1<","Returns a new `context` with a new coeffects map that contains `key`\n   mapped to the `value`."],"^5","~$re-frame.core/assoc-coeffect","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",21,"^1A",["^18",[["^1Y","^1Z","^1["]]],"^1D",null,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^13",648,"^1H",["^4",["~$clj","^1G"]],"^15",648,"^1@",3,"^1I",true,"^17",["^18",["^19",["^18",[["^1Y","^1Z","^1["]]]]],"^1<","Returns a new `context` with a new coeffects map that contains `key`\n   mapped to the `value`."],"~$register-sub",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",778,"^14",7,"^15",778,"^16",19,"^17",["^18",["^19",["^18",[["~$&","^1;"]]]]],"^1<","Deprecated. Use `reg-sub-raw` instead.","~:deprecated","0.8.0","^1=",["^ ","^1>",true,"^1?",0,"^1@",0,"^1A",[["^18",["^1;"]]],"^17",["^18",[["~$&","^1;"]]],"^1B",["^18",[null]]]],"^5","~$re-frame.core/register-sub","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",19,"^1=",["^ ","^1>",true,"^1?",0,"^1@",0,"^1A",[["^18",["^1;"]]],"^17",["^18",[["~$&","^1;"]]],"^1B",["^18",[null]]],"^1A",[["^18",["^1;"]]],"^1D",null,"^1?",0,"^1B",["^18",[null]],"^14",1,"^1>",true,"^1E",[["^ ","^1?",0,"^1>",true,"^1F","^1G"]],"^13",778,"^23","0.8.0","^1H","^1G","^15",778,"^1@",0,"^1I",true,"^17",["^18",[["~$&","^1;"]]],"^1<","Deprecated. Use `reg-sub-raw` instead."],"~$purge-event-queue",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",734,"^14",7,"^15",734,"^16",24,"^17",["^18",["^19",["^18",[[]]]]],"^1<","Remove all events queued for processing"],"^5","~$re-frame.core/purge-event-queue","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",24,"^1A",["^18",[[]]],"^1D",null,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^13",734,"^1H","^1G","^15",734,"^1@",0,"^1I",true,"^17",["^18",["^19",["^18",[[]]]]],"^1<","Remove all events queued for processing"],"~$remove-post-event-callback",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",762,"^14",7,"^15",762,"^16",33,"^17",["^18",["^19",["^18",[["~$id"]]]]],"^1<","Unregisters the function identified by `id` to be called after each event is\n   processed."],"^5","~$re-frame.core/remove-post-event-callback","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",33,"^1A",["^18",[["^28"]]],"^1D",null,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^13",762,"^1H","^1G","^15",762,"^1@",1,"^1I",true,"^17",["^18",["^19",["^18",[["^28"]]]]],"^1<","Unregisters the function identified by `id` to be called after each event is\n   processed."],"~$path",["^ ","^5","~$re-frame.core/path","^12","target/public/cljs-out/dev/re_frame/core.cljc","^13",477,"^14",1,"^15",477,"^16",10,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",477,"^14",6,"^15",477,"^16",10],"^1<","returns an interceptor whose `:before` substitutes the coeffects `:db` with\n  a sub-path of `:db`. Within `:after` it grafts the handler's return value\n  back into db, at the right path.\n\n  So, its overall action is to make the event handler behave like the function\n  you might give to clojure's `update-in`.\n\n  Examples:\n\n      (path :some :path)\n      (path [:some :path])\n      (path [:some :path] :to :here)\n      (path [:some :path] [:to] :here)\n\n  Example Use:\n\n      (reg-event-db\n        :event-id\n        (path [:a :b])  ;; used here, in interceptor chain\n        (fn [b v]       ;; 1st arg is now not db. Is the value from path [:a :b] within db\n          ... new-b))   ;; returns a new value for that path (not the entire db)\n\n  Notes:\n    1. `path` may appear more than once in an interceptor chain. Progressive narrowing.\n    2. if `:effects` contains no `:db` effect, can't graft a value back in.\n  "],"~$reg-sub",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",58,"^14",7,"^15",58,"^16",14,"^17",["^18",["^19",["^18",[["^1O","~$&","^1;"]]]]],"^1<","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n\n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering\n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created.\n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later.\n\n  `reg-sub` arguments are:\n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways)\n    - a function which computes the value of this kind of node\n\n  The `computation function` is always the last argument supplied and it is expected to have the signature:\n    `(input-values, query-vector) -> a-value`\n\n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the\n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`,\n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways,\n  but whatever is there defines the `input signals` part of the template, controlling what input\n values \"flow into\" the `computation function` gets when it is called.\n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other\n  two are really just sugary variations.\n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.\n\n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n\n     This is the most canonical and instructive of the three variations.\n\n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to\n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns,\n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n\n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn\n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function,\n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  ","^1=",["^ ","^1>",true,"^1?",1,"^1@",1,"^1A",[["^18",["^1O","^1;"]]],"^17",["^18",[["^1O","~$&","^1;"]]],"^1B",["^18",[null]]]],"^5","~$re-frame.core/reg-sub","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",14,"^1=",["^ ","^1>",true,"^1?",1,"^1@",1,"^1A",[["^18",["^1O","^1;"]]],"^17",["^18",[["^1O","~$&","^1;"]]],"^1B",["^18",[null]]],"^1A",[["^18",["^1O","^1;"]]],"^1D",null,"^1?",1,"^1B",["^18",[null]],"^14",1,"^1>",true,"^1E",[["^ ","^1?",1,"^1>",true,"^1F","^1G"]],"^13",58,"^1H","^1G","^15",58,"^1@",1,"^1I",true,"^17",["^18",[["^1O","~$&","^1;"]]],"^1<","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n\n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering\n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created.\n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later.\n\n  `reg-sub` arguments are:\n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways)\n    - a function which computes the value of this kind of node\n\n  The `computation function` is always the last argument supplied and it is expected to have the signature:\n    `(input-values, query-vector) -> a-value`\n\n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the\n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`,\n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways,\n  but whatever is there defines the `input signals` part of the template, controlling what input\n values \"flow into\" the `computation function` gets when it is called.\n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other\n  two are really just sugary variations.\n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.\n\n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n\n     This is the most canonical and instructive of the three variations.\n\n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to\n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns,\n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n\n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn\n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function,\n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  "],"~$make-restore-fn",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",709,"^14",7,"^15",709,"^16",22,"^17",["^18",["^19",["^18",[[]]]]],"^1<","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"^5","~$re-frame.core/make-restore-fn","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",22,"^1A",["^18",[[]]],"^1D",null,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^13",709,"^1H","~$function","^15",709,"^1@",0,"^1I",true,"^17",["^18",["^19",["^18",[[]]]]],"^1<","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"~$clear-fx",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",300,"^14",7,"^15",300,"^16",15,"^17",["^18",["^19",["^18",[[],["^28"]]]]],"^1<","When called with no args, unregisters all effect handlers. When given one arg,\n   assumed to be the `id` of a registered effect handler, unregisters the \n   associated handler.","^1=",["^ ","^1>",false,"^1?",1,"^1@",1,"^1A",[[],["^28"]],"^17",["^18",[[],["^28"]]],"^1B",["^18",[null,null]]]],"^5","~$re-frame.core/clear-fx","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",15,"^1=",["^ ","^1>",false,"^1?",1,"^1@",1,"^1A",[[],["^28"]],"^17",["^18",[[],["^28"]]],"^1B",["^18",[null,null]]],"^1A",[[],["^28"]],"^1D",null,"^1?",1,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^1E",[["^ ","^1?",0,"^1>",false,"^1F",["^4",[null,"^1G"]]],["^ ","^1?",1,"^1>",false,"^1F",["^4",[null,"^1G"]]]],"^13",300,"^15",300,"^1@",1,"^1I",true,"^17",["^18",[[],["^28"]]],"^1<","When called with no args, unregisters all effect handlers. When given one arg,\n   assumed to be the `id` of a registered effect handler, unregisters the \n   associated handler."],"~$get-effect",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",654,"^14",7,"^15",654,"^16",17,"^17",["^18",["^19",["^18",[["^1Y"],["^1Y","^1Z"],["^1Y","^1Z","~$not-found"]]]]],"^1<","When called with one arg, returns the effects map from the `context`.\n   When called with two or three args, behaves like `clojure.core/get`, \n   returns the value mapped to `key` in the effects map, `not-found` or\n   `nil` if `key` is not present.","^1=",["^ ","^1>",false,"^1?",3,"^1@",3,"^1A",[["^1Y"],["^1Y","^1Z"],["^1Y","^1Z","^2D"]],"^17",["^18",[["^1Y"],["^1Y","^1Z"],["^1Y","^1Z","^2D"]]],"^1B",["^18",[null,null,null]]]],"^5","~$re-frame.core/get-effect","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",17,"^1=",["^ ","^1>",false,"^1?",3,"^1@",3,"^1A",[["^1Y"],["^1Y","^1Z"],["^1Y","^1Z","^2D"]],"^17",["^18",[["^1Y"],["^1Y","^1Z"],["^1Y","^1Z","^2D"]]],"^1B",["^18",[null,null,null]]],"^1A",[["^1Y"],["^1Y","^1Z"],["^1Y","^1Z","^2D"]],"^1D",null,"^1?",3,"^1B",["^18",[null,null,null]],"^14",1,"^1>",false,"^1E",[["^ ","^1?",1,"^1>",false,"^1F","^1G"],["^ ","^1?",2,"^1>",false,"^1F",["^4",[null,"^1G"]]],["^ ","^1?",3,"^1>",false,"^1F",["^4",[null,"^1G"]]]],"^13",654,"^15",654,"^1@",3,"^1I",true,"^17",["^18",[["^1Y"],["^1Y","^1Z"],["^1Y","^1Z","^2D"]]],"^1<","When called with one arg, returns the effects map from the `context`.\n   When called with two or three args, behaves like `clojure.core/get`, \n   returns the value mapped to `key` in the effects map, `not-found` or\n   `nil` if `key` is not present."],"~$reg-event-db",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",390,"^14",7,"^15",390,"^16",19,"^17",["^18",["^19",["^18",[["^28","~$handler"],["^28","~$interceptors","^2G"]]]]],"^1<","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.","^1=",["^ ","^1>",false,"^1?",3,"^1@",3,"^1A",[["^28","^2G"],["^28","^2H","^2G"]],"^17",["^18",[["^28","^2G"],["^28","^2H","^2G"]]],"^1B",["^18",[null,null]]]],"^5","~$re-frame.core/reg-event-db","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",19,"^1=",["^ ","^1>",false,"^1?",3,"^1@",3,"^1A",[["^28","^2G"],["^28","^2H","^2G"]],"^17",["^18",[["^28","^2G"],["^28","^2H","^2G"]]],"^1B",["^18",[null,null]]],"^1A",[["^28","^2G"],["^28","^2H","^2G"]],"^1D",null,"^1?",3,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^1E",[["^ ","^1?",2,"^1>",false,"^1F","^1G"],["^ ","^1?",3,"^1>",false,"^1F","^1G"]],"^13",390,"^15",390,"^1@",3,"^1I",true,"^17",["^18",[["^28","^2G"],["^28","^2H","^2G"]]],"^1<","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain."],"~$dispatch-sync",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",40,"^14",7,"^15",40,"^16",20,"^17",["^18",["^19",["^18",[["~$event-v"]]]]],"^1<","Synchronously (immediately) process `event`. Do not queue.\n\n  Generally, don't use this. Instead use `dispatch`. It is an error\n  to use `dispatch-sync` within an event handler.\n\n  Useful when any delay in processing is a problem:\n     1. the `:on-change` handler of a text field where we are expecting fast typing.\n     2  when initialising your app - see 'main' in todomvc examples\n     3. in a unit test where we don't want the action 'later'\n\n  Usage:\n     (dispatch-sync [:sing :falsetto 634])"],"^5","~$re-frame.core/dispatch-sync","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",20,"^1A",["^18",[["^2K"]]],"^1D",null,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^13",40,"^1H","~$clj-nil","^15",40,"^1@",1,"^1I",true,"^17",["^18",["^19",["^18",[["^2K"]]]]],"^1<","Synchronously (immediately) process `event`. Do not queue.\n\n  Generally, don't use this. Instead use `dispatch`. It is an error\n  to use `dispatch-sync` within an event handler.\n\n  Useful when any delay in processing is a problem:\n     1. the `:on-change` handler of a text field where we are expecting fast typing.\n     2  when initialising your app - see 'main' in todomvc examples\n     3. in a unit test where we don't want the action 'later'\n\n  Usage:\n     (dispatch-sync [:sing :falsetto 634])"],"~$clear-event",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",435,"^14",7,"^15",435,"^16",18,"^17",["^18",["^19",["^18",[[],["^28"]]]]],"^1<","When called with no args, unregisters all event handlers. When given one arg,\n   assumed to be the `id` of a registered event handler, unregisters the \n   associated handler.","^1=",["^ ","^1>",false,"^1?",1,"^1@",1,"^1A",[[],["^28"]],"^17",["^18",[[],["^28"]]],"^1B",["^18",[null,null]]]],"^5","~$re-frame.core/clear-event","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",18,"^1=",["^ ","^1>",false,"^1?",1,"^1@",1,"^1A",[[],["^28"]],"^17",["^18",[[],["^28"]]],"^1B",["^18",[null,null]]],"^1A",[[],["^28"]],"^1D",null,"^1?",1,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^1E",[["^ ","^1?",0,"^1>",false,"^1F",["^4",[null,"^1G"]]],["^ ","^1?",1,"^1>",false,"^1F",["^4",[null,"^1G"]]]],"^13",435,"^15",435,"^1@",1,"^1I",true,"^17",["^18",[[],["^28"]]],"^1<","When called with no args, unregisters all event handlers. When given one arg,\n   assumed to be the `id` of a registered event handler, unregisters the \n   associated handler."],"~$->interceptor",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",631,"^14",7,"^15",631,"^16",20,"^17",["^18",["^19",["^18",[["~$&",["^ ","~:as","~$m","~:keys",["^28","~$before","~$after"]]]]]]],"^1<","Create an interceptor from named arguments","^1=",["^ ","^1>",true,"^1?",0,"^1@",0,"^1A",[["^18",[["^ ","^2Q","~$m","^2R",["^28","^2S","^2T"]]]]],"^17",["^18",[["~$&",["^ ","^2Q","~$m","^2R",["^28","^2S","^2T"]]]]],"^1B",["^18",[null]]]],"^5","~$re-frame.core/->interceptor","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",20,"^1=",["^ ","^1>",true,"^1?",0,"^1@",0,"^1A",[["^18",[["^ ","^2Q","~$m","^2R",["^28","^2S","^2T"]]]]],"^17",["^18",[["~$&",["^ ","^2Q","~$m","^2R",["^28","^2S","^2T"]]]]],"^1B",["^18",[null]]],"^1A",[["^18",[["^ ","^2Q","~$m","^2R",["^28","^2S","^2T"]]]]],"^1D",null,"^1?",0,"^1B",["^18",[null]],"^14",1,"^1>",true,"^1E",[["^ ","^1?",0,"^1>",true,"^1F","^1G"]],"^13",631,"^1H","^1G","^15",631,"^1@",0,"^1I",true,"^17",["^18",[["~$&",["^ ","^2Q","~$m","^2R",["^28","^2S","^2T"]]]]],"^1<","Create an interceptor from named arguments"],"~$set-loggers!",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",689,"^14",7,"^15",689,"^16",19,"^17",["^18",["^19",["^18",[["~$new-loggers"]]]]],"^1<","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"^5","~$re-frame.core/set-loggers!","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",19,"^1A",["^18",[["^2W"]]],"^1D",null,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^13",689,"^1H",["^4",[null,"^1G"]],"^15",689,"^1@",1,"^1I",true,"^17",["^18",["^19",["^18",[["^2W"]]]]],"^1<","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"~$inject-cofx",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",322,"^14",7,"^15",322,"^16",18,"^17",["^18",["^19",["^18",[["^28"],["^28","^1["]]]]],"^1<","Given an `id`, and an optional, arbitrary `value`, returns an interceptor\n   whose `:before` adds to the `:coeffects` (map) by calling a pre-registered\n   'coeffect handler' identified by the `id`.\n\n   The previous association of a `coeffect handler` with an `id` will have\n   happened via a call to `re-frame.core/reg-cofx` - generally on program startup.\n\n   Within the created interceptor, this 'looked up' `coeffect handler` will\n   be called (within the `:before`) with two arguments:\n     - the current value of `:coeffects`\n     - optionally, the originally supplied arbitrary `value`\n\n   This `coeffect handler` is expected to modify and return its first, `coeffects` argument.\n\n   Example Of how `inject-cofx` and `reg-cofx` work together\n   ---------------------------------------------------------\n\n   1. Early in app startup, you register a `coeffect handler` for `:datetime`:\n\n      (re-frame.core/reg-cofx\n        :datetime                        ;; usage  (inject-cofx :datetime)\n        (fn coeffect-handler\n          [coeffect]\n          (assoc coeffect :now (js/Date.))))   ;; modify and return first arg\n\n   2. Later, add an interceptor to an -fx event handler, using `inject-cofx`:\n\n      (re-frame.core/reg-event-fx        ;; we are registering an event handler\n         :event-id\n         [ ... (inject-cofx :datetime) ... ]    ;; <-- create an injecting interceptor\n         (fn event-handler\n           [coeffect event]\n           ... in here can access (:now coeffect) to obtain current datetime ... )))\n\n   Background\n   ----------\n\n   `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes an event handler might need other resources.\n\n   Perhaps an event handler needs a random number or a GUID or the current\n   datetime. Perhaps it needs access to a DataScript database connection.\n\n   If an event handler directly accesses these resources, it stops being\n   pure and, consequently, it becomes harder to test, etc. So we don't\n   want that.\n\n   Instead, the interceptor created by this function is a way to 'inject'\n   'necessary resources' into the `:coeffects` (map) subsequently given\n   to the event handler at call time.","^1=",["^ ","^1>",false,"^1?",2,"^1@",2,"^1A",[["^28"],["^28","^1["]],"^17",["^18",[["^28"],["^28","^1["]]],"^1B",["^18",[null,null]]]],"^5","~$re-frame.core/inject-cofx","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",18,"^1=",["^ ","^1>",false,"^1?",2,"^1@",2,"^1A",[["^28"],["^28","^1["]],"^17",["^18",[["^28"],["^28","^1["]]],"^1B",["^18",[null,null]]],"^1A",[["^28"],["^28","^1["]],"^1D",null,"^1?",2,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^1E",[["^ ","^1?",1,"^1>",false,"^1F","~$cljs.core/IMap"],["^ ","^1?",2,"^1>",false,"^1F","^2["]],"^13",322,"^15",322,"^1@",2,"^1I",true,"^17",["^18",[["^28"],["^28","^1["]]],"^1<","Given an `id`, and an optional, arbitrary `value`, returns an interceptor\n   whose `:before` adds to the `:coeffects` (map) by calling a pre-registered\n   'coeffect handler' identified by the `id`.\n\n   The previous association of a `coeffect handler` with an `id` will have\n   happened via a call to `re-frame.core/reg-cofx` - generally on program startup.\n\n   Within the created interceptor, this 'looked up' `coeffect handler` will\n   be called (within the `:before`) with two arguments:\n     - the current value of `:coeffects`\n     - optionally, the originally supplied arbitrary `value`\n\n   This `coeffect handler` is expected to modify and return its first, `coeffects` argument.\n\n   Example Of how `inject-cofx` and `reg-cofx` work together\n   ---------------------------------------------------------\n\n   1. Early in app startup, you register a `coeffect handler` for `:datetime`:\n\n      (re-frame.core/reg-cofx\n        :datetime                        ;; usage  (inject-cofx :datetime)\n        (fn coeffect-handler\n          [coeffect]\n          (assoc coeffect :now (js/Date.))))   ;; modify and return first arg\n\n   2. Later, add an interceptor to an -fx event handler, using `inject-cofx`:\n\n      (re-frame.core/reg-event-fx        ;; we are registering an event handler\n         :event-id\n         [ ... (inject-cofx :datetime) ... ]    ;; <-- create an injecting interceptor\n         (fn event-handler\n           [coeffect event]\n           ... in here can access (:now coeffect) to obtain current datetime ... )))\n\n   Background\n   ----------\n\n   `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes an event handler might need other resources.\n\n   Perhaps an event handler needs a random number or a GUID or the current\n   datetime. Perhaps it needs access to a DataScript database connection.\n\n   If an event handler directly accesses these resources, it stops being\n   pure and, consequently, it becomes harder to test, etc. So we don't\n   want that.\n\n   Instead, the interceptor created by this function is a way to 'inject'\n   'necessary resources' into the `:coeffects` (map) subsequently given\n   to the event handler at call time."],"~$clear-global-interceptor",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",610,"^14",7,"^15",610,"^16",31,"^17",["^18",["^19",["^18",[[],["^28"]]]]],"^1<","When called with no args, unregisters all global interceptors. When given\n   one arg, assumed to be the `id` of a currently registered global\n   interceptor, it unregisters the associated interceptor.","^1=",["^ ","^1>",false,"^1?",1,"^1@",1,"^1A",[[],["^28"]],"^17",["^18",[[],["^28"]]],"^1B",["^18",[null,null]]]],"^5","~$re-frame.core/clear-global-interceptor","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",31,"^1=",["^ ","^1>",false,"^1?",1,"^1@",1,"^1A",[[],["^28"]],"^17",["^18",[[],["^28"]]],"^1B",["^18",[null,null]]],"^1A",[[],["^28"]],"^1D",null,"^1?",1,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^1E",[["^ ","^1?",0,"^1>",false,"^1F",["^4",[null,"^1G"]]],["^ ","^1?",1,"^1>",false,"^1F",["^4",[null,"^1G"]]]],"^13",610,"^15",610,"^1@",1,"^1I",true,"^17",["^18",[[],["^28"]]],"^1<","When called with no args, unregisters all global interceptors. When given\n   one arg, assumed to be the `id` of a currently registered global\n   interceptor, it unregisters the associated interceptor."],"~$get-coeffect",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",636,"^14",7,"^15",636,"^16",19,"^17",["^18",["^19",["^18",[["^1Y"],["^1Y","^1Z"],["^1Y","^1Z","^2D"]]]]],"^1<","When called with one arg, returns the coeffects map from the `context`.\n   When called with two or three args, behaves like `clojure.core/get`, \n   returns the value mapped to `key` in the coeffects map, `not-found` or\n   `nil` if `key` is not present.","^1=",["^ ","^1>",false,"^1?",3,"^1@",3,"^1A",[["^1Y"],["^1Y","^1Z"],["^1Y","^1Z","^2D"]],"^17",["^18",[["^1Y"],["^1Y","^1Z"],["^1Y","^1Z","^2D"]]],"^1B",["^18",[null,null,null]]]],"^5","~$re-frame.core/get-coeffect","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",19,"^1=",["^ ","^1>",false,"^1?",3,"^1@",3,"^1A",[["^1Y"],["^1Y","^1Z"],["^1Y","^1Z","^2D"]],"^17",["^18",[["^1Y"],["^1Y","^1Z"],["^1Y","^1Z","^2D"]]],"^1B",["^18",[null,null,null]]],"^1A",[["^1Y"],["^1Y","^1Z"],["^1Y","^1Z","^2D"]],"^1D",null,"^1?",3,"^1B",["^18",[null,null,null]],"^14",1,"^1>",false,"^1E",[["^ ","^1?",1,"^1>",false,"^1F","^1G"],["^ ","^1?",2,"^1>",false,"^1F",["^4",[null,"^1G"]]],["^ ","^1?",3,"^1>",false,"^1F",["^4",[null,"^1G"]]]],"^13",636,"^15",636,"^1@",3,"^1I",true,"^17",["^18",[["^1Y"],["^1Y","^1Z"],["^1Y","^1Z","^2D"]]],"^1<","When called with one arg, returns the coeffects map from the `context`.\n   When called with two or three args, behaves like `clojure.core/get`, \n   returns the value mapped to `key` in the coeffects map, `not-found` or\n   `nil` if `key` is not present."],"~$debug",["^ ","^5","~$re-frame.core/debug","^12","target/public/cljs-out/dev/re_frame/core.cljc","^13",448,"^14",1,"^15",448,"^16",11,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",448,"^14",6,"^15",448,"^16",11],"^1<","An interceptor which logs/instruments an event handler's actions to\n  `js/console.debug`. See examples/todomvc/src/events.cljs for use.\n\n  Output includes:\n  1. the event vector\n  2. a `clojure.data/diff` of db, before vs after, which shows\n     the changes caused by the event handler.  You will absolutely have\n     to understand https://clojuredocs.org/clojure.data/diff to\n     understand the output.\n\n  You'd typically include this interceptor after (to the right of) any\n  path interceptor.\n\n  Warning:  calling clojure.data/diff on large, complex data structures\n  can be slow. So, you won't want this interceptor present in production\n  code. So condition it out like this :\n\n      (re-frame.core/reg-event-db\n         :evt-id\n         [(when ^boolean goog.DEBUG re-frame.core/debug)]  ;; <-- conditional\n         (fn [db v]\n           ...))\n\n  To make this code fragment work, you'll also have to set goog.DEBUG to\n  false in your production builds - look in `project.clj` of /examples/todomvc.\n  ","^1F","^2["],"~$assoc-effect",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",666,"^14",7,"^15",666,"^16",19,"^17",["^18",["^19",["^18",[["^1Y","^1Z","^1["]]]]],"^1<","Returns a new `context` with a new effects map that contains `key`\n   mapped to the `value`."],"^5","~$re-frame.core/assoc-effect","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",19,"^1A",["^18",[["^1Y","^1Z","^1["]]],"^1D",null,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^13",666,"^1H",["^4",["^21","^1G"]],"^15",666,"^1@",3,"^1I",true,"^17",["^18",["^19",["^18",[["^1Y","^1Z","^1["]]]]],"^1<","Returns a new `context` with a new effects map that contains `key`\n   mapped to the `value`."],"~$enqueue",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",672,"^14",7,"^15",672,"^16",14,"^17",["^18",["^19",["^18",[["^1Y","^2H"]]]]],"^1<","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^5","~$re-frame.core/enqueue","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",14,"^1A",["^18",[["^1Y","^2H"]]],"^1D",null,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^13",672,"^1H",["^4",["^21","^1G"]],"^15",672,"^1@",2,"^1I",true,"^17",["^18",["^19",["^18",[["^1Y","^2H"]]]]],"^1<","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$clear-cofx",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",379,"^14",7,"^15",379,"^16",17,"^17",["^18",["^19",["^18",[[],["^28"]]]]],"^1<","When called with no args, unregisters all coeffect handlers. When given one arg,\n   assumed to be the `id` of a registered coeffect handler, unregisters the \n   associated handler.","^1=",["^ ","^1>",false,"^1?",1,"^1@",1,"^1A",[[],["^28"]],"^17",["^18",[[],["^28"]]],"^1B",["^18",[null,null]]]],"^5","~$re-frame.core/clear-cofx","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",17,"^1=",["^ ","^1>",false,"^1?",1,"^1@",1,"^1A",[[],["^28"]],"^17",["^18",[[],["^28"]]],"^1B",["^18",[null,null]]],"^1A",[[],["^28"]],"^1D",null,"^1?",1,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^1E",[["^ ","^1?",0,"^1>",false,"^1F",["^4",[null,"^1G"]]],["^ ","^1?",1,"^1>",false,"^1F",["^4",[null,"^1G"]]]],"^13",379,"^15",379,"^1@",1,"^1I",true,"^17",["^18",[[],["^28"]]],"^1<","When called with no args, unregisters all coeffect handlers. When given one arg,\n   assumed to be the `id` of a registered coeffect handler, unregisters the \n   associated handler."],"~$reg-event-ctx",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",423,"^14",7,"^15",423,"^16",20,"^17",["^18",["^19",["^18",[["^28","^2G"],["^28","^2H","^2G"]]]]],"^1<","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. ","^1=",["^ ","^1>",false,"^1?",3,"^1@",3,"^1A",[["^28","^2G"],["^28","^2H","^2G"]],"^17",["^18",[["^28","^2G"],["^28","^2H","^2G"]]],"^1B",["^18",[null,null]]]],"^5","~$re-frame.core/reg-event-ctx","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",20,"^1=",["^ ","^1>",false,"^1?",3,"^1@",3,"^1A",[["^28","^2G"],["^28","^2H","^2G"]],"^17",["^18",[["^28","^2G"],["^28","^2H","^2G"]]],"^1B",["^18",[null,null]]],"^1A",[["^28","^2G"],["^28","^2H","^2G"]],"^1D",null,"^1?",3,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^1E",[["^ ","^1?",2,"^1>",false,"^1F","^1G"],["^ ","^1?",3,"^1>",false,"^1F","^1G"]],"^13",423,"^15",423,"^1@",3,"^1I",true,"^17",["^18",[["^28","^2G"],["^28","^2H","^2G"]]],"^1<","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. "],"~$reg-fx",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",273,"^14",7,"^15",273,"^16",13,"^17",["^18",["^19",["^18",[["^28","^2G"]]]]],"^1<","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"^5","~$re-frame.core/reg-fx","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",13,"^1A",["^18",[["^28","^2G"]]],"^1D",null,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^13",273,"^1H","^1G","^15",273,"^1@",2,"^1I",true,"^17",["^18",["^19",["^18",[["^28","^2G"]]]]],"^1<","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"~$trim-v",["^ ","^5","~$re-frame.core/trim-v","^12","target/public/cljs-out/dev/re_frame/core.cljc","^13",552,"^14",1,"^15",552,"^16",12,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",552,"^14",6,"^15",552,"^16",12],"^1<","An interceptor which removes the first element of the event vector,\n  allowing you to write more aesthetically pleasing event handlers. No\n  leading underscore on the event-v!\n  Your event handlers will look like this:\n\n      (defn my-handler\n        [db [x y z]]    ;; <-- instead of [_ x y z]\n        ....)","^1F","^2["],"~$clear-sub",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",239,"^14",7,"^15",239,"^16",16,"^17",["^18",["^19",["^18",[[],["^1O"]]]]],"^1<","When called with no args, unregisters all subscription handlers. When given\n   one arg, assumed to be a `query-id` of a registered subscription handler,\n   unregisters the associated handler.\n\n   NOTE: Depending on the usecase it may also be necessary to call \n         `clear-subscription-cache!`.","^1=",["^ ","^1>",false,"^1?",1,"^1@",1,"^1A",[[],["^1O"]],"^17",["^18",[[],["^1O"]]],"^1B",["^18",[null,null]]]],"^5","~$re-frame.core/clear-sub","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",16,"^1=",["^ ","^1>",false,"^1?",1,"^1@",1,"^1A",[[],["^1O"]],"^17",["^18",[[],["^1O"]]],"^1B",["^18",[null,null]]],"^1A",[[],["^1O"]],"^1D",null,"^1?",1,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^1E",[["^ ","^1?",0,"^1>",false,"^1F",["^4",[null,"^1G"]]],["^ ","^1?",1,"^1>",false,"^1F",["^4",[null,"^1G"]]]],"^13",239,"^15",239,"^1@",1,"^1I",true,"^17",["^18",[[],["^1O"]]],"^1<","When called with no args, unregisters all subscription handlers. When given\n   one arg, assumed to be a `query-id` of a registered subscription handler,\n   unregisters the associated handler.\n\n   NOTE: Depending on the usecase it may also be necessary to call \n         `clear-subscription-cache!`."],"~$dispatch",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",26,"^14",7,"^15",26,"^16",15,"^17",["^18",["^19",["^18",[["~$event"]]]]],"^1<","Enqueue `event` for processing by event handling machinery.\n\n  `event` is a vector of length >= 1. The 1st element identifies the kind of event.\n\n  Note: the event handler is not run immediately - it is not run\n  synchronously. It will likely be run 'very soon', although it may be\n  added to the end of a FIFO queue which already contain events.\n\n  Usage:\n     (dispatch [:order-pizza {:supreme 2 :meatlovers 1 :veg 1}])"],"^5","~$re-frame.core/dispatch","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",15,"^1A",["^18",[["^3E"]]],"^1D",null,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^13",26,"^1H","^2M","^15",26,"^1@",1,"^1I",true,"^17",["^18",["^19",["^18",[["^3E"]]]]],"^1<","Enqueue `event` for processing by event handling machinery.\n\n  `event` is a vector of length >= 1. The 1st element identifies the kind of event.\n\n  Note: the event handler is not run immediately - it is not run\n  synchronously. It will likely be run 'very soon', although it may be\n  added to the end of a FIFO queue which already contain events.\n\n  Usage:\n     (dispatch [:order-pizza {:supreme 2 :meatlovers 1 :veg 1}])"],"^2T",["^ ","^5","~$re-frame.core/after","^12","target/public/cljs-out/dev/re_frame/core.cljc","^13",563,"^14",1,"^15",563,"^16",11,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",563,"^14",6,"^15",563,"^16",11],"^1<","returns an interceptor which runs a given function `f` in the `:after`\n  position, presumably for side effects.\n\n  `f` is called with two arguments: the `:effects` value for `:db`\n  (or the `coeffect` value of db if no db effect is returned) and the event.\n  Its return value is ignored, so `f` can only side-effect.\n\n  Examples use can be seen in the /examples/todomvc:\n     - `f` runs schema validation (reporting any errors found).\n     - `f` writes to localstorage."],"~$add-post-event-callback",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",741,"^14",7,"^15",741,"^16",30,"^17",["^18",["^19",["^18",[["~$f"],["^28","~$f"]]]]],"^1<","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ","^1=",["^ ","^1>",false,"^1?",2,"^1@",2,"^1A",[["~$f"],["^28","~$f"]],"^17",["^18",[["~$f"],["^28","~$f"]]],"^1B",["^18",[null,null]]]],"^5","~$re-frame.core/add-post-event-callback","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",30,"^1=",["^ ","^1>",false,"^1?",2,"^1@",2,"^1A",[["~$f"],["^28","~$f"]],"^17",["^18",[["~$f"],["^28","~$f"]]],"^1B",["^18",[null,null]]],"^1A",[["~$f"],["^28","~$f"]],"^1D",null,"^1?",2,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^1E",[["^ ","^1?",1,"^1>",false,"^1F","^1G"],["^ ","^1?",2,"^1>",false,"^1F","^1G"]],"^13",741,"^15",741,"^1@",2,"^1I",true,"^17",["^18",[["~$f"],["^28","~$f"]]],"^1<","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  "],"~$reg-cofx",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",310,"^14",7,"^15",310,"^16",15,"^17",["^18",["^19",["^18",[["^28","^2G"]]]]],"^1<","Register the given coeffect `handler` for the given `id`, for later use\n  within `inject-cofx`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a function which takes either one or two arguements, the first of which is\n  always `coeffects` and which returns an updated `coeffects`.\n\n  See the docs for `inject-cofx` for example use."],"^5","~$re-frame.core/reg-cofx","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",15,"^1A",["^18",[["^28","^2G"]]],"^1D",null,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^13",310,"^1H","^1G","^15",310,"^1@",2,"^1I",true,"^17",["^18",["^19",["^18",[["^28","^2G"]]]]],"^1<","Register the given coeffect `handler` for the given `id`, for later use\n  within `inject-cofx`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a function which takes either one or two arguements, the first of which is\n  always `coeffects` and which returns an updated `coeffects`.\n\n  See the docs for `inject-cofx` for example use."],"~$reg-event-fx",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",406,"^14",7,"^15",406,"^16",19,"^17",["^18",["^19",["^18",[["^28","^2G"],["^28","^2H","^2G"]]]]],"^1<","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.","^1=",["^ ","^1>",false,"^1?",3,"^1@",3,"^1A",[["^28","^2G"],["^28","^2H","^2G"]],"^17",["^18",[["^28","^2G"],["^28","^2H","^2G"]]],"^1B",["^18",[null,null]]]],"^5","~$re-frame.core/reg-event-fx","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",19,"^1=",["^ ","^1>",false,"^1?",3,"^1@",3,"^1A",[["^28","^2G"],["^28","^2H","^2G"]],"^17",["^18",[["^28","^2G"],["^28","^2H","^2G"]]],"^1B",["^18",[null,null]]],"^1A",[["^28","^2G"],["^28","^2H","^2G"]],"^1D",null,"^1?",3,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^1E",[["^ ","^1?",2,"^1>",false,"^1F","^1G"],["^ ","^1?",3,"^1>",false,"^1F","^1G"]],"^13",406,"^15",406,"^1@",3,"^1I",true,"^17",["^18",[["^28","^2G"],["^28","^2H","^2G"]]],"^1<","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects."],"~$register-handler",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",771,"^14",7,"^15",771,"^16",23,"^17",["^18",["^19",["^18",[["~$&","^1;"]]]]],"^1<","Deprecated. Use `reg-event-db` instead.","^23","0.8.0","^1=",["^ ","^1>",true,"^1?",0,"^1@",0,"^1A",[["^18",["^1;"]]],"^17",["^18",[["~$&","^1;"]]],"^1B",["^18",[null]]]],"^5","~$re-frame.core/register-handler","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",23,"^1=",["^ ","^1>",true,"^1?",0,"^1@",0,"^1A",[["^18",["^1;"]]],"^17",["^18",[["~$&","^1;"]]],"^1B",["^18",[null]]],"^1A",[["^18",["^1;"]]],"^1D",null,"^1?",0,"^1B",["^18",[null]],"^14",1,"^1>",true,"^1E",[["^ ","^1?",0,"^1>",true,"^1F","^1G"]],"^13",771,"^23","0.8.0","^1H","^1G","^15",771,"^1@",0,"^1I",true,"^17",["^18",[["~$&","^1;"]]],"^1<","Deprecated. Use `reg-event-db` instead."],"~$clear-subscription-cache!",["^ ","^10",null,"^11",["^ ","^12","/Users/Rohan Mehta/Desktop/rohan-mehta-1024.github.io/target/public/cljs-out/dev/re_frame/core.cljc","^13",251,"^14",7,"^15",251,"^16",32,"^17",["^18",["^19",["^18",[[]]]]],"^1<","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"^5","~$re-frame.core/clear-subscription-cache!","^12","target/public/cljs-out/dev/re_frame/core.cljc","^16",32,"^1A",["^18",[[]]],"^1D",null,"^1B",["^18",[null,null]],"^14",1,"^1>",false,"^13",251,"^1H",["^4",["^1G","^2M"]],"^15",251,"^1@",0,"^1I",true,"^17",["^18",["^19",["^18",[[]]]]],"^1<","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:warn","~:after","~:id","~:before"]],"~:order",["^3X","^3Y","^3W","^3V"]],"^1<",null]